[{"pageNumber":1,"pageContent":"Hacker’s Playbook 2nd Edition Q4 2016 Analysis of findings by SafeBreach Labs"},{"pageNumber":2,"pageContent":"Overview About the Hacker’s Playbook It’s Groundhog Day and we’re Bill Murray. It seems like almost every day, another major data breach hits the headlines. No organization or vertical is immune. When you consider that the organizations that have been breached include government agencies, financial institutions and high-tech firms with gigantic annual security spend, the ability for the average company to protect their environment seems bleak. After all, hackers need to only get it right one time, defenders need to be right all the time. The complexity of the new wave of security innovation from security vendors coupled with the enormous volume of security alerts and a now dynamic and mobile environment have contributed to this. Security teams have a challenge understanding how well their defenses are performing, and where their true risks are when they have a portfolio of point products, all with unique management systems, configuration and logs. What we’re missing is the hacker’s perspective. In order to properly understand your risks, validate your security controls and better prioritize your resources, you must play the role of an attacker. By putting yourselves in the mindset of an attacker, you can better anticipate and validate how you can be attacked, allowing you to quickly take corrective action on the things that matter. More importantly, we believe you must perform this validation in a continuous manner. After all, if hackers are challenging your security defenses every day, then shouldn’t you be doing the same? Otherwise, just like Bill Murray, we’re doomed to relive the pain of security breaches over and over again. In Q1 of 2016, we published the 1st edition of the SafeBreach Hacker’s Playbook. It was the first to report enterprise security trends and risky behaviors from the point-of-view of an attacker. From our early enterprise deployments and execution of more than 90,000 breach methods, this particular edition now incorporates a combined total of 3,985,011 breach methods executed between January 2016 and September 2016. During this time frame, the deployments, and breach methods executed increased, as did the number of use cases: • Endpoint security validation With the introduction of our endpoint simulators, our use cases expanded to validating the efficacy of endpoint security vendors. We played the hacker against a number of high-profile endpoint security vendors, and challenged many of their claims for our customers. • Impact from breaches in headlines Organizations were using our platform to quantify their impact from breaches in the headlines. In general, we saw a spike in concern around ransomware. In one case, a customer identified and mitigated issues related to CryptoLocker ransomware after their industry peers were being targeted. • Weaponizing threat intelligence With our threat intelligence integration, organizations were able to transform threat intelligence feeds into breach simulations in their environment. Most teams felt this was a more scalable way to consume threat intelligence and understand the actual impact from campaigns. Others used it to understand the efficacy of threat intelligence IoCs from vendors. How do we actually “play the hacker”? We do this by deploying simulators that play the role of a “virtual hacker” across endpoints, network and cloud, and execute breach methods from our hacker’s playbook. Our findings are incorporated in this report, and analyzed by SafeBreach Labs, with the hope that security teams can glean some interesting insights into the things not to do in their environment."},{"pageNumber":3,"pageContent":"If you’re a fan of Game of Thrones, you’ll remember the episode when the Wildlings attempted to breach Castle Black. During the conflict, the King-Beyond-the-Wall Mance Ryder, attacks the Night’s Watch to try to take Castle Black by force. The attackers used a variety of different techniques employed to breach the castle, including, yes, a giant. This medieval castle siege is a good analogy for our description of the attack kill chain and our key findings. Understanding the Cyber Kill Chain Stage 1: Infiltration – Breaching the castle The first step for an attacker is to get a foothold in the castle. It can entail breaking through the main gate or by getting someone on the inside to open the gate. In the cyber world, specifically in SafeBreach deployments, we assume the human element -- phishing a user and getting someone to click on an attachment can be achieved with enough persistence. What we focus on are the steps afterward, the ability for that peice of malware or executable file to bypass existing security controls. Our top successful infiltration methods were by hiding executable files inside non- executable files, using exploit kits and malware. In fact, the successful exploit kits and malware we used were older samples that had been around for more than a year. Stage 2: Lateral movement – Getting to the royal keep In medieval times, important assets like food and gold would be stored in the Royal keep. An attacker would need to penetrate layers of security, from breaking the inner wall (a good castle had two walls), past the bailey where the business of the castle was conducted before getting to the royal keep. Cyber attackers also face the same challenges, their landing zone is typically not where the crown jewels are. A variety of breach methods ranging from stealing credentials, exploiting malware and compromising machines can help an attacker move deeper in the environment. The SafeBreach platform was successful with brute force using SMB, RDP and SSH. In addition, we found organizations that were segmenting their internal networks with proxies weren’t configuring them properly, allowing us to bypass them in many engagements. Stage 3: Exfiltration – Getting the gold out of the castle Finally, when you’ve gotten a hold of the gold, you need to extract yourself and your bounty out of your medieval castle. This was probably the easiest challenge for the SafeBreach platform because of the various outbound communication channels many organizations had. We found a way out in 100% of engagements, very successfully in fact with breach methods using HTTP, IRC, SIP and Syslogs."},{"pageNumber":4,"pageContent":"Deja-vu with executable files: The top successful infiltration methods were by hiding executable files inside non-executable files. What’s old is new—exfiltration using executable files embedded within Windows script files, macros, and Visual Basic was very successful. (Old) Exploit kits still effective way to deliver malware: We were successful using exploit kits to challenge endpoint security and secure web gateway products. In many cases, these exploit kits had been around for more than a year. Misconfigured malware sandboxing leads to breach: Similar to the last Hacker’s Playbook, we found success because of misconfigured security products. In this case, malware sandboxing solutions were not configured correctly to tackle all ports, protocols, file formats and encrypted traffic. Internal segments bypassed via brute force and Proxy fuzzing: In our lateral movement efforts, we found success with brute force methods, and identified issues with proxies. When deployed correctly, proxies can segment internal networks. In instances where proxies were misconfigured, SafeBreach was able to breach new paths/ segments internally and externally. Data exfiltration an easy endeavor: Too many organizations had very open outbound channels to the Internet, with very little governance. SafeBreach was successful with protocols we would expect – HTTP, but also IRC, SIP and Syslogs. IT support tools and protocols like externally bound syslogs may be part of business operations, but they can still be used as a means for exfiltration. Key findings Page 4 Page 5 Page 6 Page 7 Page 8"},{"pageNumber":5,"pageContent":" 25.3% 23.2% 19.1% 18.2% 14.2% TOP MALICIOUS DOWNLOAD EXE inside WSF (as XML) using HTTP Downloading EXE inside a DOC with macro using HTTP EXE inside encrypted zip using HTTP Downloading EXE file which packed inside a VBS using HTTP EXE inside a VBS using HTTP Key findings In the 1st edition of the Hacker’s Playbook we reported that SafeBreach continued to find success with infiltration via executable file downloads. In this 2nd edition, we found that this was still a common successful infiltration method. We drilled a little deeper into the data to see which types off files were being downloaded and found a variety of methods using executable files across HTTP, from XML to macros and Visual Basic file formats were successful. Recommendations: Are these results a surprise? We know executable files have always been the Achilles’ heel for users, but most security products today won’t allow a user to download an executable with an .exe file extension. However, with just a small level of sophistication and creativity on the part of our virtual hacker —for example, using a script that contains a payload that includes an executable—we were able to bypass these security products. The level of granularity with types of executables that should be downloaded aren’t being defined. Additionally, while focus has been on email (security) to combat malicious downloads of executables, these policies must be extended to other means to do so like browsers and FTP clients. EXE inside WSF (as XML) WSF are Windows script files that can execute scripts at the “operating system” level. The WSF format allows you to use scripts within predefined XML tags. Attackers will run these within an environment once they are downloaded. MS-word document files (.DOC with macro) Microsoft Office TM for many years contained macros that allow you to program custom events. Over the years, attackers have abused macros to create malware. In fact, in June 2016, the US Cert issued a warning about the resurgence of using macros but it appears most organizations are still struggling with the balance between business continuity and security. Encrypted zip file/archives using HTTP In this example, SafeBreach used encrypted ZIP file/archive over HTTP. One of the oldest tricks by attackers, encrypted zip files over HTTP should be limited by policy or inspected by next-generation firewalls. Visual Basic Visual Basic is a scripting language that MSFT supports. SafeBreach was successful in breaching an environment using both an executable file hidden in VBScript, and by packing the executable within the scripts we were able to bypass deep packet inspection. Déjà vu: infiltration via download of executable files"},{"pageNumber":6,"pageContent":"Key findings Exploit kits are automated toolkits designed to run on a web browser, identify vulnerabilities and exploit them in order to deliver a malicious payload to the victim’s machine. There are several ways that hackers can utilize exploit kits in attacks: • Drive-by-attacks when users access unsecured wireless access points at conferences • Social engineering to get a user to click on a link to a website (reset password, access special offers etc), whereby the website launches an exploit kit. • Watering hole where the attacker identifies the websites frequented by the victim and infects one or more of them, or buys advertising space and uses code within them to deploy the kits. We were successful using exploit kits to challenge endpoint security and secure web gateway products. In many cases, the exploit kits that we used-- Sweet Orange, Neutrio and Rig -- had been around for more than a year. Recommendations: Attacks using exploit kits can be very difficult to defend against because of the adaptive nature of the kits, enabling attackers to easily add new malicious payloads. Adding to the complexity is the fact that many exploit kits reside on legitimate websites. “Securing the browser” needs to be a big focus for organizations, and requires a combination of different efforts. In addition to the fundamentals like user education and patching, limit the attack surface by blocking advertising content being sent to users. Block dynamic DNS domains and HTTP over non-standard ports to limit the likelihood of a successful exploitation. Use breach simulations during the evaluation process for endpoint security and secure web gateway products to see if they stand up to their claims. Consider micro-virtualization technology for browsers that can isolate sessions. Sweet Orange Sweet Orange is an exploit kit in 2012 that impacts Windows operating systems, including Windows 8.1 and Windows 7. It can also exploit newer v ersions of Internet Explorer, Firefox, and Google Chrome. Neutrino Another very popular exploit kit, Neutrino targets Flash and Java run-time environments. In June of this year, Threatpost reported CryptXX ransomware switching its distribution from Angler to the Neutrino exploit kit. Rig The Rig Exploit Kit was discovered in 2014 and mainly exploits vulnerabilities in Internet Explorer, Java, Adobe Flash, and Silverlight. (Old) exploit kits still effective way to deliver malware 26% 33% 19% 12% 10% TOP EXPLOIT KITS Sweet Orange Exploit Kit Infection Neutrino Exploit Kit Infection Rig Exploit Kit Infection Flashpack Exploit Kit Infection Magnitude Exploit Kit Infection"},{"pageNumber":7,"pageContent":" 2 2% 22% 19% 18% 18% TOP MALWARE SAMPLES Hesperbot Malware passed via HTTP/S Citadel Malware passed via HTTP/S SpyEye Malware passed via HTTP/S Dridex Malware passed via HTTP/S CryptoLocker Malware passed via HTTP/S Key findings One of SafeBreach’s strengths is the ability to simulate malware traffic. As part of our playbook, we attempt to pass malware between our external and internal simulators, a move that should be prevented by malware sandboxing solutions. When we drilled into the top successful malware samples, we found that our successes were with banking Trojan malware that have been around for a year or more. Recommendations: The top five successful malware used by SafeBreach were Hesperbot, Citadel, SpyEye, Dridex, and CryptoLocker. These banking Trojans were some of the more popular ones in use by attackers many years ago. These are old malware that should have been addressed by deployed security products, but we bypassed many malware sandboxing solutions because of incorrect configuration. This goes back to the challenge of security team; the average organization deploys 50-75 different security point products, and inadvertently, mistakes will occur. As a CISO once said to SafeBreach, “The most important thing is validation -- validating your controls and assumptions. We all know assumptions break easily when checked. It’s not just about offense versus defense, because over time we have invested money in both areas. The bottom line is you must validate your controls, your beliefs and that the concept in your mind is true.” Hesperbot Discovered by ESET, this “Zeus-like Trojan” emerged in 2013, targeting online banking users mainly in Turkey, The Czech Republic, Portugal and the United Kingdom. The malware has capabilities that include joining your computer to a botnet, key logging, capturing screenshots, capturing video, setting up a remote proxy, and attempting to lure Android, Blackberry and Symbian device users to download a fake banking app designed to steal your banking credentials. In 2014, it resurfaced in Australia. Citadel Citadel emerged in 2011, when cyber criminals used leaked Zeus code to create new and advanced malware strains that could do more harm while going undetected for longer. The banking Trojan soon became a type of malware distributed at a massive scale. In 2016, its variant (called Atmos) surfaced. SpyEye SpyEye is another destructive piece of malware targeting banks and financial institutions in that emerged in 2009. SpyEye exploited all four major browsers, Google Chrome Firefox, Internet Explorer and Opera, using keystroke logging and form grabbing to steal user credentials. Dridex Dridex is yet another strain of banking malware. Once infected, Dridex steals banking credentials. CryptoLocker CryptoLocker is a ransomware Trojan that targets computers using Microsoft Windows. It is propagated via infected email attachments. When activated, the malware encrypts local files and if ransom is not paid by a certain deadline, the files are then deleted. Misconfigured malware sandboxing leads to breach"},{"pageNumber":8,"pageContent":"Key findings The success of infiltration methods only establishes the initial foothold. In order to sustain persistent access in the environment, hackers must move laterally within the network, and gain higher privileges until he/she finds sensitive corporate data. Lateral movement methods may include stealing credentials, leveraging exploits, and compromising another machine to cement the attacker’s hold in the network and get closer to sensitive data. SafeBreach found success with brute force breach methods using SMB, RDP and SSH. Additionally, one of the interesting lateral movement methods we stumbled on was via proxy fuzzing. Recommendations: This is another case of misconfiguration of security products, and a lack of validation into security products that have already been deployed. In this case, a proxy product that was supposed to make the environment more secure, actually made it less secure, because of a human error. Adrian Sanabria, a senior analyst at 451 Research said it best in this article, “Due diligence isn’t just something you do before buying a product - it needs to done after implementation and throughout the product life cycle.” Internal segments bypassed via brute force and Proxy fuzzing Most organizations use proxies for Internet usage control, relaying requests from computers outside the network. These proxies are also used internally to segment various parts of the network. Many of the SafeBreach deployments included internal proxies to segregate between network segments of different trust levels. For example, imagine three segments, “A”, “B”, “C”. To get to “C”, a user traverses from “A” to “B”, and then “B” to “C”. When proxies are utilized in the environment, SafeBreach attempts to traverse critical segments directly through security products or via proxies. SafeBreach discovered many instances where these proxies were misconfigured, allowing us to fuzz proxies and breach new paths/segments that should not be accessible. In other words, we went directly from “A” to “C”."},{"pageNumber":9,"pageContent":" 19.7 % 8.6% 6.3% 3.2% TOP EXFILTRATION METHODS HTTP IRC SIP Syslog Key findings If you refer to our “Understanding the Kill Chain” section above, it’s not a breach until you get the data out. In other words, if you breach a castle, but you can’t get the gold out, you haven’t accomplished your goal. In the 1st edition of the Hacker’s Playbook, we found that most organizations had communications channels that were wide open to the Internet. In this 2nd edition, we found that this trend largely remained the same. The top successful data exfiltration techniques used by SafeBreach were breach methods using HTTP, IRC, SIP and Syslog. HTTP of course should be monitored, and enabled for specific use cases, while IRC, an option to transfer data between clients should be blocked. The success of exfiltration using SIP, a VoIP communications protocol and Syslogs was new. Recommendations: While we understand that security cannot require a lock-down on all outbound communications channels, security leaders can require a legitimate reason and use case to limit the attack surface. For example, if a specific business unit requires outbound SIP communications (a protocol used for the “signaling” part of a VoIP communications session) to be enabled, the SIP server (the headend) should be identified in advance. The organization should not just allow connection to any SIP server. Similarly, perhaps Syslogs, (event messages from network devices) can be limited to a specific Syslog server. In addition, such critical IT operations information should be encrypted or sent via a VPN tunnel. Data exfiltration is an easy endeavor HTTP HTTP is clearly the most common outbound traffic, and one of the easiest protocols to take advantage of. Monitor HTTP via next-generation firewalls and DLP platforms, and inspect the content. IRC The IRC (Internet Relay Chat) is a multi-user, multi-channel chat system that runs on a network. It’s a client-server model that allows people to communicate with each other. For data exfiltration purposes, IRC should be blocked unless there is a specific business reason to enable it. SIP SIP is a VoIP communications protocol; it establishes the initial signaling for a VoIP session. This is a legitimate communication protocol between a client and server, but should be limited to a specific SIP headend server. Syslog Syslog traffic includes event logs from network and security products. Some organizations send Syslog traffic to a external aggregator for consolidation and analysis. This type of IT business process tends not to be scrutinized by security, and thus can be used by attackers for data exfiltration if not monitored appropriately."},{"pageNumber":10,"pageContent":"Takeaways Our role as “virtual hacker” is always interesting because our perspective is uniquely different from defenders. Putting yourselves in the footsteps of adversaries is what security leaders need to be doing in order to better defend themselves: • Think comprehensive breach methods across the kill chain Don’t just focus on (sexy) advanced threats. There are very few skilled adversaries with the resources to be able to create zero days. The majority of attackers use (and reuse) a comprehensive set of common techniques, including older malware/exploits just like what we did. • Challenge your security products Always challenge your defenses; after all, attackers are doing it every day. Ensure that provisioning of security products are as complete as possible. Attackers will take advantage of the errors we make in our environment. We found some of our customers’ security products were either operating only on only certain ports or were only enabled for certain environments (production but not corporate segments). • Inspect encrypted traffic Many organizations just don’t decrypt encrypted traffic like SSL and SSH. This becomes a major blind spot. These are exactly the things that attackers will take advantage of to hide what they are doing. • Limit your attack surface Work with your business unit leaders to understand the types of use cases they need to address. Then focus on limiting your attack surface for outbound communications, and access to critical resources. Adopt the Forrester Zero Trust model of “Never trust, always verify” to make sure applications or protocols are being used correctly. Ready To Take Action? Request a FREE Security Risk Assessment Report Take advantage of our FREE security assessment to quantify your risks from breaches. Email us at contact@safebreach.com or scan this QR code for a free assessment. HQ 111 W. Evelyn Ave., Ste. 119 Sunnyvale CA 94086 R&D 108 Igal Alon Street, 4th floor Tel Aviv 6789146 Israel"}]
