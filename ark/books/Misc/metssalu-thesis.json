[{"pageNumber":1,"pageContent":"UNIVERSITY OF TARTU FACULTY OF MATHEMATICS AND COMPUTER SCIENCE Institute of Computer Science Computer Science Curriculum Hannes Metssalu Demonstrating Android P2P capabilities through a prototyp e application Bachelor's Thesis (9 ECTS) Sup ervisor: Artjom Lind, MSc Tartu 2015"},{"pageNumber":2,"pageContent":"Demonstrating Android P2P capabilities through a prototyp e ap- plication Abstract: Nowadays more and more p eople are communicating using electronic devices. This means that all kinds of data are transferred b etween devices. These are often private data but sent in a very public manner. When using traditional client-server approach, data may b e seen or even altered by the server which means that the authenticity and privacy of data is always under question when using untrusted servers. Furthermore many p eople prefer to use mobile devices (tablet or mobile phone) instead of a PC for communicating and changing data yet there still do es not exist a simple way to do it with certain privacy. This thesis analyzes di\u001berent metho ds for sending and receiving data b etween clients in a P2P (p eer-to-p eer) way instead of using traditional client-server mo del. Also a pro of- of-concept application is written for Android which demonstrates how to easily enable P2P communication b etween multiple devices. Application will supp ort sending messages b etween p eers and also includes an example Hangman game for demonstrating game programming with P2P communication. Keywords: P2P, Android, mobile device, game, Sip2Peer Androidi P2P võimaluste demonstreerimine läbi prototüüprak- enduse Lühikokkuvõte: Tänapäeval suheldakse aina rohkem elektro onilisi seadmeid kasutades. See tähendab, et seadmed vahetavad palju andmeid. Tihti on need andmed isiklikud, kuid saatmine toimub väga avalikul viisil. Kasutades levinud klient-server lähenemisviisi, võib server andmeid näha või isegi muuta, mis tähendab, et andmete autentsus ja privaatsus on rikutud, juhul kui kasutatakse ebausaldusväärset serverit. Lisaks eelistavad paljud inimesed suhtlemiseks ja andmevahetuseks mobiilseid seadmeid (tahvelarvutit või telefoni) tavalisele arvutile, kuid ikka veel ei eksisteeri lihtsat ning turvalist viisi selle tegemiseks. See tö ö analüüsib erinevaid andmevahetusmeeto deid P2P (p eer-to-p eer) viisil, mis er- ineb traditsio onilisest klient-server andmevahetusmudelist. Lisaks luuakse näiterakendus Androidile, mis demonstreerib, kuidas lihtsal mo el luua P2P ühendus mitmete seadmete vahel. Rakendus to etab sõnumite saatmist klientide vahel ning sisaldab Hangmani mängu, mis demonstreerib mängude programmeerimist P2P suhtluse abil. Võtmesõnad: P2P, Android, mobiilne seade, mäng, Sip2Peer 2"},{"pageNumber":3,"pageContent":"Contents 1 Intro duction 4 1.1 Problem overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 1.2 Motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 1.3 Goal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 1.4 Outline . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 2 State of the art 6 2.1 Peer-to-Peer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 2.1.1 Advantages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 2.1.2 Disadvantages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 2.2 Related works . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 2.2.1 Freenet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 2.2.2 LogMeIn Hamachi . . . . . . . . . . . . . . . . . . . . . . . . . . 7 2.2.3 BitTorrent Sync . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 2.2.4 P2P develop ement frameworks/libraries . . . . . . . . . . . . . . 8 3 Problem statement 10 3.1 Di\u001eculties of P2P . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 3.1.1 Network Address Translator . . . . . . . . . . . . . . . . . . . . . 10 3.1.2 NAT Traversal . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 3.2 S2P library . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 3.3 Application sp eci\u001ccation . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 4 Implementation 14 4.1 Demo application . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 4.1.1 Application structure . . . . . . . . . . . . . . . . . . . . . . . . . 15 4.2 Result analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Running the system . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 5 Conclusion 19 5.1 Future Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 6 App endices 21 6.1 App endix A: Prototyp e Application . . . . . . . . . . . . . . . . . . . . . 21 6.2 App endix B: S2PBo otstrap pro ject . . . . . . . . . . . . . . . . . . . . . 21 6.3 App endix C: Sip2PeerSBC pro ject . . . . . . . . . . . . . . . . . . . . . 21 6.4 App endix C: License . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 3"},{"pageNumber":4,"pageContent":"1 Intro duction 1.1 Problem overview Most of the communication b etween electronic devices involves passing data through servers. This means that we have to rely on central servers sending our data around the glob e without us knowing who reads or changes it. P2P communication often has its advantages over client-server mo del, yet there are no reliable and simple ways to achieve that. This thesis tries to analyze di\u001berences b etween client-server and P2P mo del and also bring out some of the current P2P applications b oth for PCs and mobile devices (for mainly Android OS). Creating P2P connection p oses many di\u001eculties due to \u001crewalls. These will b e lo oked up on and a solution will b e prop osed. Also a prototyp e application will b e written, which overcomes these issues and demonstrates di\u001berent ways to use P2P communication in Android applications. 1.2 Motivation Currently the use of P2P in mobile devices is very limited. Nowadays P2P is often asso ciated with piracy due to its most extensive use but this should not b e the case. P2P communication could b e b ene\u001ccially used in almost every application. Also, creating P2P connection b etween two p eers p oses multiple issues due to \u001crewalls and Network Address Translators (NAT), which will b e discussed later. For mobile devices even more problems arise. Demonstrating overcoming issues will help to p opularize developing P2P applications for mobile devices. 1.3 Goal The goal of this thesis is as follows: • Analyze advantages and disadvantages of P2P over client-server communication. • Analyze the current state of P2P frameworks and applications for mobile devices. • List out problems of creating P2P connections b etween mobile devices. • O\u001ber a solution to creating a successful connection b etween two mobile devices. • Create a prototyp e application which can successfully create P2P b etween mobile devices. • Motivate develop ers to write P2P applications for mobile devices. 1.4 Outline Chapter 2 Peer-to-p eer communication will b e compared to traditional client-server mo del. Current P2P applications and frameworks will b e analyzed and summarized. Chapter 3 Sp eci\u001ccation for the prototyp e application will b e given. Problems involving P2P connections will b e brought out and explained. A mobile framework for solving these problems will b e prop osed. Chapter 4 Detailed overview and a manual for develop ed application will b e given. 4"},{"pageNumber":5,"pageContent":"Chapter 5 Created program will b e compared with other similar programs. Chapter 6 Thesis will b e summarized and most imp ortant p oints will b e brought out. 5"},{"pageNumber":6,"pageContent":"2 State of the art This chapter discusses the main uses on P2P and also gives a detailed overview of what p eer-to-p eer communication means. 2.1 Peer-to-Peer Peer-to-p eer computing can b e de\u001cned as the sharing of computer resources and services by direct exchange. P2P network consists of distributed clients or p eers. Peers are all equally privileged participants in the network. Each p eer in the network is often called a no de. In such network p eers can communicate directly with each other. In case of more common client-server mo del, all the data is sent and requested through centralized server. Figure 1: P2P Figure 2: Client-server mo del P2P networks have b een previously used in many application domains, but the use of it started growing by the creation of di\u001berent \u001cle sharing systems, the most p opular b eing Napster in 1999 [Bar02]. In year 2008, P2P accounted nearly a third of tra\u001ec in North America. This was due to the fact that p eer-to-p eer \u001cle sharing programs were used extensively for piracy. By now, this numb er has declined to ab out 8% and is still declining [Fie14]. Yet, P2P still has its advantages over client-server mo del and has many p otential use cases. 2.1.1 Advantages Resilience Since P2P has no central p eer, it is not p ossible to collapse the network without taking down each individual p eer. Low cost No sp ecial software or hardware is required to set up a P2P network. 6"},{"pageNumber":7,"pageContent":"Easy setup In a small network, every ma jor op erating system has its own feature to set up data exchange easily. 2.1.2 Disadvantages Scalability issues As the numb er of users grow, the data is very clustered and accessing it by many p eople simultaneously causes the p eers to slow down drastically. No administrators Due to nature of P2P networks there is nob o dy to monitor which data is b eing sent and for which purp oses is it used. Security problems There is no way to stop any kind of tra\u001ec b etween no des which enables viruses to spread easily without fear of detection by anti-virus software or network adminis- trator. Data loss Information is distributed over all p eers which means that in the case of p eer failure, this part of network is also inaccessible. 2.2 Related works This section contains some p opular applications which rely on P2P communication for b oth PC and mobile devices. Skyp e which used to have its own closed source P2P proto col, is also worth mentioning, but as of June 20, 2014, Skyp e announced this proto col to b e deprecated and started using Microsoft Noti\u001ccation Proto col 24 which do es not involve the use of P2P networking. [Pet14] 2.2.1 Freenet Freenet was originally created in 2000 by Ian Clarke as a student pro ject at the University of Edinburgh [Mar00]. It is written in Java, works on all ma jor op erating systems and is still actively b eing develop ed by The Freenet Pro ject Team. Its goal was to create a p eer- to-p eer based platform for communication without restrictions or censorship. Freenet also claims to b e used strongly anonymously. By now it has grown into a huge network of no des all over the world. Freenet enables p eers to access data and webpages which are uploaded into Freenet network. Storage is distributed b etween p eers which means that every user acts as a small storage space for the whole system. Every bit of information is replicated b etween p eers so that no user could not b e resp onsible for any piece of information. More information 1 2.2.2 LogMeIn Hamachi Hamachi is an application that is capable of establishing direct connections b etween com- puters with whom it would b e otherwise imp ossible due to \u001crewall and router limitations, namely NAT (which will b e discussed later). It is capable of emulating lo cal area network 1 The Freenet Pro ject [con\u001crmed on 14.05.2015] https://freenetproject.org/index.html 7"},{"pageNumber":8,"pageContent":"Figure 3: LogMeIn Hamachi virtually with devices which are not in lo cal network. The exact means of how Hamachi bypasses NAT and \u001crewall for creating direct tunnels are not made public. LAN connec- tions are very useful for remote administration or computer gaming. All ma jor op erating systems are supp orted by LogMeIn Hamachi. More information at Hamachi webpage. 2 2.2.3 BitTorrent Sync BitTorrent Sync is a p eer-to-p eer \u001cle synchronization to ol for Windows, Mac, Linux, Android, iOS, Windows Phone, Amazon Kindle and BSD, still actively develop ed by BitTorrent, Inc. It was \u001crst released in the b eginning of 2013 by Konstantin Lissounov. BT Sync can synchronize \u001cles b etween devices on a lo cal network or b etween remote devices over the Internet. For creating connections with p eers it uses a mo di\u001ced version of BitTorrent proto col 3 . BT Sync has no limitations on sp eed or size of data synchronized other than the size of p eers' storage space and the sp eed of the connection. There have b een claims that BitTorrent Sync is not secure enough for private data but these claims were lo oked at and given a resp onse quickly by BitTorrent team which showed that there were no ma jor security issues 4 . 2.2.4 P2P develop ement frameworks/libraries Android Wi-Fi Peer-to-p eer (Wi-Fi Direct) Allows Android 4.0 or later devices to connect directly to each other via Wi-Fi without using an intermediate access p oint. It has very simple metho ds to create a lo cal network of p eers over Wi-Fi yet it lacks the p ossibility to use mobile data and create connections with remote p eers. Wi-Fi 2 LogMeIn Hamachi [con\u001crmed on 14.05.2015] https://secure.logmein.com/products/hamachi/ 3 BT Sync technology [con\u001crmed on 14.05.2015] http://www.getsync.com/how- it- works 4 BT reply to Hackito [con\u001crmed on 14.05.2015] http://www.networkworld.com/article/2849452/microsoft- subnet/ bittorrent- reply- to- hackito- report- on- bittorrent- syncs- bad- crypto- no- cause- for- concern. html 8"},{"pageNumber":9,"pageContent":"P2P Complies with Wi-Fi Direct TM certi\u001ccation program. 5 . The do cumentation is very broad and the library is suitable for creating applications which require creating a small p eer-to-p eer network in a lo cal area. P2P-communication-framework-for-android An easy to implement p eer-to-p eer frame- work allowing a nearbly cluster of Android devices to easily communicate with each other. Uses blueto oth for creating a network cluster. Op en-source, but not very well do cumented. Nowadays blueto oth has much alternatives with b etter range and stability, which makes it outdated for most mo dern applications but still has its sp eci\u001cc use cases. More information 6 . Op enPeer An op en P2P signalling proto col with their main ob jectives b eing op en- source, secure, private and scalable. Op enPeer has b eta SDKs for b oth Android and iOS develop ers. Its core-library is written in C++. Op enPeer has its own cen- tral server for distributing information and creating connections with other p eers. Op enPeer is suitable for developing mobile cross-platform applications which re- quire direct p eer-to-p eer communication over the Internet. More information 7 . Hive2Hive An op en-source library, written in Java, for secure, distributed, P2P-based \u001cle synchronization and sharing. It has a very detailed do cumentation and simple API. More information: 8 . Sip2Peer An op en-source SIP-based middleware for the implementation of any p eer-to- p eer application without constraints on p eer device and architecture. This library will b e used to create a prototyp e application for Android and will b e lo oked up on in detail later. 9 . 5 Wi-Fi Direct proto col [con\u001crmed on 14.05.2015] http://blog.broadcom.com/wp- content/ uploads/2013/10/Wi- Fi- Direct- White- Paper.pdf 6 p2p-communication-framework-for-android [con\u001crmed on 14.05.2015] https://code.google.com/ p/p2p- communication- framework- for- android/ 7 Op enPeer sp eci\u001ccation [con\u001crmed on 14.05.2015] http://docs.openpeer.org/ OpenPeerProtocolSpecification/ 8 Hive2Hive rep ository [con\u001crmed on 14.05.2015] https://github.com/Hive2Hive/Hive2Hive 9 Sip2Peer [con\u001crmed on 14.05.2015] https://code.google.com/p/sip2peer/ 9"},{"pageNumber":10,"pageContent":"3 Problem statement Creating an application which has to communicate via the Internet with other devices has always b een a dubious task. This is even more so when using mobile devices and P2P due to restrictions that establishing direct connections have. Since generally client- server mo del is more suitable for mobile applications, there is no prop er do cumentation or examples on how to develop a successful mobile application that is capable of b oth creating direct connections b etween each other and sending/receiving data without issues. This thesis tries to give out an example application which would solve the main di\u001eculties of P2P and also demonstrate some use cases of a P2P mobile application. The application will b e able to send/receive messages and include a pro of-of-concept level Hangman game. Sip2Peer Java library will b e used which will help in successfully creating P2P connections and managing p eers. 3.1 Di\u001eculties of P2P The biggest problem of creating a successful p eer-to-p eer connection is NAT and \u001cre- walls which b oth blo ck incoming packets unless con\u001cgured prop erly. There are ways to get through NAT such as NAT Traversal. Theoretically NAT is only a problem for IPv4 standard on which the ma jority of Internet is currently based. There is currently under- going a switch to much newer standard IPv6 which takes a lot time but will eventually solve the NAT problem for P2P connections [Dee98]. Also for mobile devices a big prob- lem is that mobile connection changes the device's IP address very often which p oses an issue when trying to maintain connection b etween b oth p eers. 3.1.1 Network Address Translator Network Address Translators (NAT) were \u001crst intro duced to stop Internet from running out of IPv4 (Internet Proto col version 4) IP addresses. IPv4 uses 32-bit address which limits the space to 2 32 ≈ 4 billion di\u001berent addresses (the practical numb er is really much smaller). NAT is lo cated b etween the public Internet and the network it serves. Its primary function is to translate public IP addresses and p ort numb ers into sp eci\u001cc lo cal IP addresses of lo cal machines which are hidden from the public Internet. After a machine has sent packets to outgoing server, NAT knows that incoming packets from the same server have to b e routed back to the same machine. In all cases, we must assume that an application will send and receive packets on the same p ort. In such case the incoming data gets sent through NAT to correct machine but in the case of P2P and an uncon\u001cgured NAT router, NAT do es not have any information on where to send packets and they get destroyed [SFK08]. 3.1.2 NAT Traversal NAT Traversal (NAT-T) is a general term for di\u001berent techniques that establish and main- tain Internet connection b etween lo cal and remote client through NAT. These techniques are typically required in p eer-to-p eer network applications. The ma jority of NAT-T tech- niques do not work for all typ es of NATs. These metho ds include: • So cket Secure (SOCKS) • Universal Plug'n'play Internet Gateway Device (UPnP IGD) 10"},{"pageNumber":11,"pageContent":"• Interactive Connectivity Establishment (ICE) • Application-level gateway (ALG) • Hole punching • Session Border Controllers 3.2 S2P library Sip-2-p eer (S2P) is a Java library for implementing p eer-to-p eer communication in any application without any constraints on p eer device nor architecture. It has tutorials for b oth PC and Android devices. S2P has its own NAT traversal management through SIP proto col and is p erfectly suitable for this thesis' prototyp e application. Session Initiation Proto col (SIP) is a communications proto col for signaling and control- ling multimedia communication sessions (Internet telephony for voice and video calls) but can also b e used in assisting NAT Traversal successfully. Session Border Controller (SBC) is a part of SIP network elements, which handles NAT Traversal. [BS] In S2P case, SBC is a no de with public IP that allows a p eer to check if it is b ehind a NAT and to request a public IP and p ort that can b e used by the requesting no de as a contact address and can b e advertised to other p eers. Like all the other metho ds for NAT Traversal, SBC and SIP do not work for every NAT. Most of the mentioned NAT Traversal metho ds do not work for Carrier Grade NAT's (CGN) 10 . 3.3 Application sp eci\u001ccation The main purp ose of the application is to demonstrate the usage of S2P library for Android for creating a successful p eer-to-p eer network. It will include a feature to send messages to other p eers and a small Hangman game. Ideally a working network needs: 1. Bo ostrap p eer which saves data for every p eer in network and can share this data with other p eers. 2. SBC server with public IP address which helps connect p eers that are b ehind NAT by assigning them a public IP address and advertising it to others. 3. Client p eers which communicate with each other and can request other p eers' data (IP address) from b o otstrap p eer. Every client p eer can also b e a b o otstrap p eer. The main sp eci\u001ccations: • Uses S2P library • Written in Java • Supp orts Android devices with API (Application Programming Interface) version ab ove 15 10 Carrier Grade NAT [con\u001crmed on 14.05.2015] https://www.apnic.net/community/ipv6- program/ about- cgn 11"},{"pageNumber":12,"pageContent":"Main features: • Directly connect to other p eers using their IP • Request network memb ers' IP addresses from b o otstrap p eer • Ping other p eers to acquire their IP address • Send chat messages to other p eers • Host a Hangman game • Play Hangman game One of the ideas which this game demonstrates is that only the host needs the game co de in its application. Other players only receive information ab out the status of the game and send messages back to host without really having any knowledge or co de how the game works. This reduces storage space and o\u001bers security for game develop ers and owners. This Hangman game needs a host and players. Host will pick a word, for example \"machine\". A message \"Lets play, the current status is ______\" will b e send out to every p eer in the network 4. After a client has sent for example \"a\" back to host 5, a new message will b e sent out to every p eer. This message includes already guessed letters and the current status, for example \"Current status: _a____ ; Guessed letters: {a,b,c}\" 6. After all the letters of the word are guessed the host will send out a message \"Game is over, the winner is <winner's name>\" 7. Figure 4: Welcome message by host 12"},{"pageNumber":13,"pageContent":"Figure 5: Guess by Peer D Figure 6: Status message by host Figure 7: Game over message by host 13"},{"pageNumber":14,"pageContent":"4 Implementation The application was written using Android Studio 1.2 under Linux environment. All the testing was done using Genymotion (an emulator for Android devices) and multiple Go ogle Nexus 5 virtual images. This thesis is written in LaTeX using TeXstudio 2.8.4. 4.1 Demo application S2P library o\u001bers multiple template pro jects b oth for Android and PC developing. SBC and Bo otstrap p eer were b oth set up on PC without changing any ma jor co de. Since SBC requires public connectivity with remote network, p orts had to b e op ened and router con\u001cgured. The \u001crst issue was prop erly con\u001cguring the router. The router used was Inteno DG301AL. The solution was to use DMZ (demilitarized zone) which forwards all the incoming data to a certain IP in a lo cal network which in our case is the PC with SBC and b o otstrap p eer. After con\u001cguring the router and setting up the con\u001cguration \u001cles Figure 8: Router DMZ settings for SBC and b o otstrap, Android application was written. Example Android application allowed to send pings (request IP address) b etween p eers. Sending chat messages was implemented through JSON (JavaScript Ob ject Notation) messages since it gives a go o d example on how to send more complex ob jects b etween devices. As can b e seen from Figures 9 and 10, JSON ob ject corresp onds exactly to Java ob ject and is generated from ob ject variable toString() metho ds. It is also worth mentioning that every \u001celd needs a get metho d for the JSON ob ject to b e generated prop erly. Most of the work was done on writing the Hangman game. All the new co de was added in such a way, that it is only required in game host's application. The game communicates with other p eers using already created message sending metho ds. While 14"},{"pageNumber":15,"pageContent":"Figure 9: JSON structure Figure 10: Java ob ject structure the host is hosting the game, a b o olean \u001dag is raised for him that the game has started. In such way, host knows to treat incoming messages as game messages instead of chat messages. 4.1.1 Application structure Android application front-end consists of Activities. Each Activity can b e imagined as one screen on device. Prototyp e application's Activities are as follows: 1. Main Activity which contains sending messages to other p eers and a chat log11. 2. Con\u001cguration activity where SBC and b o otstrap p eer information is contained12. 3. Bo otstrap Activity where p eer can connect to b o otstrap p eer (data is automatically pulled from con\u001cguration menu)13. 4. Peer list Activity which contains other network memb ers' name and IP addresses13. 5. Host game Activity from which Hangman game can b e hosted15. Navigation from one Activity to another can very well b e illustrated with the following diagram 16. 15"},{"pageNumber":16,"pageContent":"Figure 11: Main activity Figure 12: Con\u001cguration Activity Figure 13: Bo otstrap Activity Figure 14: Peer list Activity 16"},{"pageNumber":17,"pageContent":"Figure 15: Host game Activity Figure 16: Navigation 17"},{"pageNumber":18,"pageContent":"4.2 Result analysis The results of this work are divided into two parts b oth of which are equally informative and useful. Theoretical part will gives fairly up-to-date and summarized overview of current state of existing P2P applications and frameworks. Also the main issues with using P2P with mobile devices were brought out and p ossible solutions explained. For the practical part everything also works as stated in application's sp eci\u001ccation. Since routers have di\u001berent built in NATs, this application may not b e successful in creating a connection with every p eer. The application has very mo dular design and logical co de structure, which means that other typ es of NAT Traversal techniques can b e added with- out changing the ma jority of the co de. All the main features of P2P data exchange were covered and an example given on how to exchange Java ob jects through JSON ob jects. Also a demonstrative Hangman game was written which shows how P2P connection could p otentially b e used for sharing games in a closed environment with other p eers without them having the source co de in their application. Sip2Peer is not very p opular library and therefore not very many pro jects use it. Ogh- maSip is built on Sip2Peer and is a very similar application for media streaming [Ege11]. It uses Op enId for identifying p eers rather than Android device ID which is used in this thesis' application. 4.3 Running the system Prerequisites: • Android device(s) • Connection with public IP address • Java 1.8 • S2PBo otstrap pro ject • Sip2PeerSBC pro ject • Android APK Bo otstrap p eer S2PBo otstrap should b e op ened with any development environment (e.g. IDEA, Eclipse, NetBeans etc.). Con\u001cguring the Bo otstrap p eer (should not b e necessary) can b e done from /con\u001cg/bs.cfg \u001cle. Starting the p eer is done from package it.unipr.ce.dsg.s2p.example.p eer with class Bo otstrapPeer main metho d. After starting the metho d, an IP address will b e printed out which can b e used by other p eers. The default p ort is 5080 SBC server Sip2PeerSBC should b e op ened in a similar manner. For con\u001cguring /con- \u001cg/sb c.cfg should b e used. Starting the SBC server is done from it.unipr.ce.dsg.s2p.sip.sb c package from class SessionBorderController main metho d. SBC server IP address will b e printed out. Mobile application Application can b e run by transferring the .apk \u001cle to mobile stor- age and installing it. It can b e also run by op ening the pro ject in any of the Android supp orting IDEs and running the application from there. 18"},{"pageNumber":19,"pageContent":"5 Conclusion This thesis showed that although the use of P2P has declined in past years, there are still many use cases for p eer-to-p eer networks. Given the fast sp eed of mo dern connections, \u001cle synchronization using P2P seems to b ecome more p opular (BitTorrent Sync) b ecause it virtually has no limits. NAT and NAT Traversal issues were also lo oked up on. Currently switching to IPv6 proto col is undergoing which means so on NAT should not b e an issue anymore and this could mean a p otentially huge spike in P2P usage. Sending direct data directly from p eer to p eer is also very secure and when using prop er encryption is very hard to tamp er with. Piracy has b een a big reason why Internet service providers are limiting P2P tra\u001ec but di\u001berent market mo dels have b een develop ed to reduce piracy. This work provides excellent means to start developing P2P applications for Android which is a huge market and needs more p eer-to-p eer applications. A mo dular design application was develop ed which can act as a template for basically every program which needs P2P communication. 5.1 Future Work This application is currently in a prototyp e state and needs changes for real world use. Currently it provides information on how to do certain things. One p ossible use case would b e to develop a very abstract interface for receiving and displaying game data. This could b e used for simple card games or text based games with a b eautiful graphical user interface. Even a small program language for this can b e develop ed where so that any application owner can write its own game and share play it with others without sharing the source co de of the game. Other use case would b e a \u001cle sharing application where p eople can share di\u001berent \u001cles from their devices b etween a network of p eers. If multiple p eople have the same \u001cles, the sp eeds will b ecome much faster. It can also b e used for synchronizing for example tablet and mobile storage. The whole application could b e up dated to supp ort IPv6 IP addresses to keep up with current Internet proto col standards. 19"},{"pageNumber":20,"pageContent":"References [Bar02] David Barkai. An intro duction to p eer-to-p eer computing. page 7, Febru- ary 2002. [con\u001crmed on 14.05.2015] http://www2.it.lut.fi/wiki/lib/exe/ fetch.php/courses/ct30a6900/p2p_barkai.pdf . [BS] David Schwartz Baruch Sterman, Ph.D. Nat traversal in sip. page 17. [con\u001crmed on 14.05.2015] http://startrinity.com/VoIP/Resources/sip26.pdf . [Dee98] Stephen E Deering. Internet proto col, version 6 (ipv6) sp eci\u001ccation. 1998. [Ege11] Raimund Ege. Oghmasip: Peer-to-p eer multimedia for mobile devices. In MOBILITY 2011, The First International Conference on Mobile Services, Re- sources, and Users , pages 1\u00156, 2011. [Fie14] Seth Fiegerman. The slow decline of p eer-to-p eer \u001cle sharing. page 1, May 2014. [con\u001crmed on 14.05.2015] http://mashable.com/2014/05/14/ file- sharing- decline/ . [Mar00] John Marko\u001b. Cyb erspace programmers confront copyright laws. page 10, May 2000. [con\u001crmed on 14.05.2015] http://www.nytimes.com/2000/05/10/ business/cyberspace- programmers- confront- copyright- laws.html . [Pet14] Noah Petherbridge. Skyp e switched to the msn messenger proto col. page 9, Decemb er 2014. [con\u001crmed on 14.05.2015] https://www.kirsle.net/blog/ entry/skype- switched- to- the- msn- messenger- protocol . [SFK08] Pyda Srisuresh, Bryan Ford, and Dan Kegel. State of p eer-to-p eer (p2p) com- munication across network address translators (nats). Internet Engineering Task ForceâRequest for Comments , 5128:1\u001532, 2008. 20"},{"pageNumber":21,"pageContent":"6 App endices 6.1 App endix A: Prototyp e Application The prototyp e application is lo cated in GitHub rep ository https://github.com/hannesss81/PrototypeApplication 6.2 App endix B: S2PBo otstrap pro ject The prototyp e application is lo cated in GitHub rep ository https://github.com/hannesss81/S2PBootstrap 6.3 App endix C: Sip2PeerSBC pro ject The prototyp e application is lo cated in GitHub rep ository https://github.com/hannesss81/Sip2PeerSBC 21"},{"pageNumber":22,"pageContent":"6.4 App endix C: License Non-exclusive licence to repro duce thesis and make thesis public I, Hannes Metssalu (date of birth: 14th of February 1993), 1. herewith grant the University of Tartu a free p ermit (non-exclusive licence) to: 1.1 repro duce, for the purp ose of preservation and making available to the public, including for addition to the DSpace digital archives until expiry of the term of validity of the copyright, and 1.2 make available to the public via the web environment of the University of Tartu, including via the DSpace digital archives until expiry of the term of validity of the copyright, Demonstrating Android P2P capabilities through a prototyp e application sup ervised by Artjom Lind 2. I am aware of the fact that the author retains these rights. 3. I certify that granting the non-exclusive licence do es not infringe the intellectual prop erty rights or rights arising from the Personal Data Protection Act. Tartu, 14.05.2015 22"}]
